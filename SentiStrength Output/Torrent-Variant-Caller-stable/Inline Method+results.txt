Inline Method	Translation	Positive	Negative	EmotionRationale
1155 commit fac9932938f1275015aa0b93a82fb9bd52dd391d embedding gsalib source and queuejobreport r scripts in the dist and package jars. moved gsalib and queuejobreport.r to embeddable namespaced locations. updated packager dependencies/dir to add an @includes which filters the embedded fileset. rscriptexecutor can now jit compiles the gsalib. rscriptexecutor uses processcontroller and sends the rscript output to java's stdout when run under -l debug. refactored processcontroller and ioutils from queue to sting utils. added more unit tests to processcontroller along with a utility class to hard stop outputstreams at a specified byte count. replaced uses of some ioutils with apache commons io. shelljobrunner refactored to use direct processcontroller and now kills jobs on shutdown. better qgraph responsiveness on shutdown by using object.wait() instead of thread.sleep(). 	1155 commit fac9932938f1275015a0b93a82fb9bd52dd391d embedding gsalib source and queuejobreport are scripts in the dist and package jars.<br> moved gsalib and queuejobreport.<br>are to embeddable namespaced locations.<br> updated packager dependencies/dir to add an @includes which filters the embedded fileset.<br> rscriptexecutor can now jit compiles the gsalib.<br> rscriptexecutor uses processcontroller and sends the rscript output to java's stdout when run under -l debug.<br> refactored processcontroller and ioutils from queue to sting utils.<br> added more unit tests to processcontroller along with a utility class to hard stop outputstreams at a specified byte count.<br> replaced uses of some ioutils with apache commons io.<br> shelljobrunner refactored to use direct processcontroller and now kills jobs on shutdown.<br> better qgraph responsiveness on shutdown by using object.<br>wait( instead of thread.<br>sleep(	1	-2	 1155[0] commit[0] fac9932938f1275015aa0b93a82fb9bd52dd391d/fac9932938f1275015a0b93a82fb9bd52dd391d[0] embedding[0] gsalib[0] source[-1] and[0] queuejobreport[0] r[0] scripts[0] in[0] the[0] dist[0] and[0] package[0] jars[0] [[Sentence=-2,1=word max, 1-5]] moved[0] gsalib[0] and[0] queuejobreport[0] [[Sentence=-1,1=word max, 1-5]] r[0] to[0] embeddable[0] namespaced[0] locations[0] [[Sentence=-1,1=word max, 1-5]] updated[0] packager[0] dependencies/dir[0] to[0] add[0] an[0] @includes[0] which[0] filters[0] the[0] embedded[0] fileset[0] [[Sentence=-1,1=word max, 1-5]] rscriptexecutor[0] can[0] now[0] jit[0] compiles[0] the[0] gsalib[0] [[Sentence=-1,1=word max, 1-5]] rscriptexecutor[0] uses[0] processcontroller[0] and[0] sends[0] the[0] rscript[0] output[0] to[0] java's[0] stdout[0] when[0] run[0] under[0] l[0] debug[0] [[Sentence=-1,1=word max, 1-5]] refactored[0] processcontroller[0] and[0] ioutils[0] from[0] queue[0] to[0] sting[-1] utils[0] [[Sentence=-2,1=word max, 1-5]] added[0] more[0] unit[0] tests[0] to[0] processcontroller[0] along[0] with[0] a[0] utility[0] class[0] to[0] hard[0] stop[0] outputstreams[0] at[0] a[0] specified[0] byte[0] count[0] [[Sentence=-1,1=word max, 1-5]] replaced[0] uses[0] of[0] some[0] ioutils[0] with[0] apache[0] commons[0] io[0] [[Sentence=-1,1=word max, 1-5]] shelljobrunner[0] refactored[0] to[0] use[0] direct[0] processcontroller[0] and[0] now[0] kills[0] jobs[0] on[0] shutdown[0] [[Sentence=-1,1=word max, 1-5]] better[0] qgraph[0] responsiveness[0] on[0] shutdown[0] by[0] using[0] object[0] [[Sentence=-1,1=word max, 1-5]] wait[0] instead[0] of[0] thread[0] [[Sentence=-1,1=word max, 1-5]] sleep[0] [[Sentence=-1,1=word max, 1-5]][[[1,-2 max of sentences]]]
1574 commit b7511c5ff3b36e16037bfbbbd17b9fd4c9ea47af fixed long-standing bug in tribble index creation -- previously, on the fly indices didn't have dictionary set on the fly, so the gatk would read, add dictionary, and rewrite the index. this is now fixed, so that the on the fly index contains the reference dictionary when first written, avoiding the unnecessary read and write -- added a genomeanalysisengine and walker function called getmastersequencedictionary() that fetches the reference sequence dictionary. this can be used conveniently everywhere, and is what's written into the tribble index -- refactored tribble index utilities from rmdtrackbuilder into indexdictionaryutils -- vcfwriter now requires the master sequence dictionary -- updated walkers that create vcfwriters to provide the master sequence dictionary 	1574 commit b7511c5ff3b36e16037bfbbd17b9fd4c9ea47af fixed long-standing bug in tribble index creation - previously, on the fly indices didn't have dictionary set on the fly, so the gatk would read, add dictionary, and rewrite the index.<br> this is now fixed, so that the on the fly index contains the reference dictionary when first written, avoiding the unnecessary read and write - added a genomeanalysisengine and walker function called getmastersequencedictionary( that fetches the reference sequence dictionary.<br> this can be used conveniently everywhere, and is what's written into the tribble index - refactored tribble index utilities from rmdtrackbuilder into indexdictionaryutils - vcfwriter now requires the master sequence dictionary - updated walkers that create vcfwriters to provide the master sequence dictionary	1	-2	 1574[0] commit[0] b7511c5ff3b36e16037bfbbbd17b9fd4c9ea47af/b7511c5ff3b36e16037bfbbd17b9fd4c9ea47af[0] fixed[0] long[0] standing[0] bug[0] in[0] tribble[0] index[0] creation[0] previously[0] on[0] the[0] fly[0] indices[0] didn't[0] have[0] dictionary[0] set[0] on[0] the[0] fly[0] so[0] the[0] gatk[0] would[0] read[0] add[0] dictionary[0] and[0] rewrite[0] the[0] index[0] [[Sentence=-1,1=word max, 1-5]] this[0] is[0] now[0] fixed[0] so[0] that[0] the[0] on[0] the[0] fly[0] index[0] contains[0] the[0] reference[0] dictionary[0] when[0] first[0] written[0] avoiding[-1] the[0] unnecessary[-1] read[0] and[0] write[0] added[0] a[0] genomeanalysisengine[0] and[0] walker[0] function[0] called[0] getmastersequencedictionary[0] that[0] fetches[0] the[0] reference[0] sequence[0] dictionary[0] [[Sentence=-2,1=word max, 1-5]] this[0] can[0] be[0] used[0] conveniently[0] everywhere[0] and[0] is[0] what's[0] written[0] into[0] the[0] tribble[0] index[0] refactored[0] tribble[0] index[0] utilities[0] from[0] rmdtrackbuilder[0] into[0] indexdictionaryutils[0] vcfwriter[0] now[0] requires[0] the[0] master[0] sequence[0] dictionary[0] updated[0] walkers[0] that[0] create[0] vcfwriters[0] to[0] provide[0] the[0] master[0] sequence[0] dictionary[0] [[Sentence=-1,1=word max, 1-5]][[[1,-2 max of sentences]]]
1689 commit fe5724b6ea7c77f3f38f35b2d29d118860b6fc2a refactored indexing part of standardvcfwriter into superclass -- now other implementations of the vcfwriter can easily share common functions, such as writing an index on the fly 	1689 commit fe5724b6ea7c77f3f38f35b2d29d118860b6fc2a refactored indexing part of standardvcfwriter into superclass - now other implementations of the vcfwriter can easily share common functions, such as writing an index on the fly	1	-1	 1689[0] commit[0] fe5724b6ea7c77f3f38f35b2d29d118860b6fc2a[0] refactored[0] indexing[0] part[0] of[0] standardvcfwriter[0] into[0] superclass[0] now[0] other[0] implementations[0] of[0] the[0] vcfwriter[0] can[0] easily[0] share[0] common[0] functions[0] such[0] as[0] writing[0] an[0] index[0] on[0] the[0] fly[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
3245 commit e16bc2cbd9ff13bdb96e90c2d083908099aa82e8 contracts for java now write for genomeloc and genomelocparser. the semantics of genomeloc are now much clearer. it is no longer allowed to create invalid genomelocs -- you can only create them with well formed start, end, and contigs, with respect to the mater dictionary. where one previously created an invalid genomeloc, and asked is this valid, you must now provide the raw arguments to helper functions to assess this. providing bad arguments to genomeloc generates userexceptions now. added utilty functions contigisindictionary and indexisindictionary to help with this. refactored several interval utilties from genomelocparser to intervalutils, as one might expect they go removed genomeloc.clone() method, as this was not correctly implemented, and actually unnecessary, as genomelocs are immutable. several iterator classes have changed to remove their use of clone() removed misc. unnecessary imports disabled, temporarily, the validating pileup integration test, as it uses reads mapped to an different reference sequence for ecoli, and this now does not satisfy the contracts for genomeloc 	3245 commit e16bc2cbd9ff13bdb96e90c2d083908099a82e8 contracts for java now write for genomeloc and genomelocparser.<br> the semantics of genomeloc are now much clearer.<br> it is no longer allowed to create invalid genomelocs - you can only create them with well formed start, end, and contigs, with respect to the mater dictionary.<br> where one previously created an invalid genomeloc, and asked is this valid, you must now provide the raw arguments to helper functions to assess this.<br> providing bad arguments to genomeloc generates userexceptions now.<br> added utilty functions contigisindictionary and indexisindictionary to help with this.<br> refactored several interval utilties from genomelocparser to intervalutils, as one might expect they go removed genomeloc.<br>clone( method, as this was not correctly implemented, and actually unnecessary, as genomelocs are immutable.<br> several iterator classes have changed to remove their use of clone( removed misc.<br> unnecessary imports disabled, temporarily, the validating pileup integration test, as it uses reads mapped to an different reference sequence for ecoli, and this now does not satisfy the contracts for genomeloc	3	-2	 3245[0] commit[0] e16bc2cbd9ff13bdb96e90c2d083908099aa82e8/e16bc2cbd9ff13bdb96e90c2d083908099a82e8[0] contracts[0] for[0] java[0] now[0] write[0] for[0] genomeloc[0] and[0] genomelocparser[0] [[Sentence=-1,1=word max, 1-5]] the[0] semantics[0] of[0] genomeloc[0] are[0] now[0] much[0] clearer[0] [[Sentence=-1,1=word max, 1-5]] it[0] is[0] no[0] longer[0] allowed[0] to[0] create[0] invalid[-1] genomelocs[0] you[0] can[0] only[0] create[0] them[0] with[0] well[0] formed[0] start[0] end[0] and[0] contigs[0] with[0] respect[2] to[0] the[0] mater[0] dictionary[0] [[Sentence=-2,3=word max, 1-5]] where[0] one[0] previously[0] created[0] an[0] invalid[-1] genomeloc[0] and[0] asked[0] is[0] this[0] valid[0] you[0] must[0] now[0] provide[0] the[0] raw[0] arguments[-1] to[0] helper[0] functions[0] to[0] assess[0] this[0] [[Sentence=-2,1=word max, 1-5]] providing[0] bad[-1] arguments[-1] to[0] genomeloc[0] generates[0] userexceptions[0] now[0] [[Sentence=-2,1=word max, 1-5]] added[0] utilty[0] functions[0] contigisindictionary[0] and[0] indexisindictionary[0] to[0] help[0] with[0] this[0] [[Sentence=-1,1=word max, 1-5]] refactored[0] several[0] interval[0] utilties[0] from[0] genomelocparser[0] to[0] intervalutils[0] as[0] one[0] might[0] expect[0] they[0] go[0] removed[0] genomeloc[0] [[Sentence=-1,1=word max, 1-5]] clone[0] method[0] as[0] this[0] was[0] not[0] correctly[0] implemented[0] and[0] actually[0] unnecessary[-1] as[0] genomelocs[0] are[0] immutable[0] [[Sentence=-2,1=word max, 1-5]] several[0] iterator[0] classes[0] have[0] changed[0] to[0] remove[0] their[0] use[0] of[0] clone[0] removed[0] misc[0] [[Sentence=-1,1=word max, 1-5]] unnecessary[-1] imports[0] disabled[0] temporarily[-1] the[0] validating[0] pileup[0] integration[0] test[0] as[0] it[0] uses[0] reads[0] mapped[0] to[0] an[0] different[0] reference[0] sequence[0] for[0] ecoli[0] and[0] this[0] now[0] does[0] not[0] satisfy[1][NegatedDueToPreviousWord] the[0] contracts[0] for[0] genomeloc[0] [[Sentence=-2,1=word max, 1-5]][[[3,-2 max of sentences]]]
3773 commit ee6f112556bf5825f70aea5761cea73f0179e887 phase 3: constrained movement is now the only option available in the realigner (so i guess technically it's not really an option). several command-line options are deprecated. code cleaned up. wiki updated. release coming. one phase left... 	3773 commit ee6f112556bf5825f70aea5761cea73f0179e887 phase 3: constrained movement is now the only option available in the realigner (so i guess technically it's not really an option)<br> several command-line options are deprecated.<br> code cleaned up.<br> wiki updated.<br> release coming.<br> one phase left.	1	-1	 3773[0] commit[0] ee6f112556bf5825f70aea5761cea73f0179e887[0] phase[0] 3[0] constrained[0] movement[0] is[0] now[0] the[0] only[0] option[0] available[0] in[0] the[0] realigner[0] so[0] i[0] guess[0] technically[0] it's[0] not[0] really[0] an[0] option[0] [[Sentence=-1,1=word max, 1-5]] several[0] command[0] line[0] options[0] are[0] deprecated[0] [[Sentence=-1,1=word max, 1-5]] code[0] cleaned[0] up[0] [[Sentence=-1,1=word max, 1-5]] wiki[0] updated[0] [[Sentence=-1,1=word max, 1-5]] release[0] coming[0] [[Sentence=-1,1=word max, 1-5]] one[0] phase[0] left[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
5230 commit 693672a46132235590ccf482a5c418b03dc7ba21 refactoring the vcf writer code; now no longer uses vcfrecord or any of its related classes, instead writing directly to the writer. integration tests pass, but some are actually broken and will be fixed this week. 	5230 commit 693672a46132235590ccf482a5c418b03dc7ba21 refactoring the vcf writer code; now no longer uses vcfrecord or any of its related classes, instead writing directly to the writer.<br> integration tests pass, but some are actually broken and will be fixed this week.	1	-2	 5230[0] commit[0] 693672a46132235590ccf482a5c418b03dc7ba21[0] refactoring[0] the[0] vcf[0] writer[0] code[0] now[0] no[0] longer[0] uses[0] vcfrecord[0] or[0] any[0] of[0] its[0] related[0] classes[0] instead[0] writing[0] directly[0] to[0] the[0] writer[0] [[Sentence=-1,1=word max, 1-5]] integration[0] tests[0] pass[0] but[0] some[0] are[0] actually[0] broken[-1] and[0] will[0] be[0] fixed[0] this[0] week[0] [[Sentence=-2,1=word max, 1-5]][[[1,-2 max of sentences]]]
6774 commit b6f8e33f4c754b5638ecbc74447fa8bd98146b17 stage 2 of variation refactoring: vcfrecord now implements variation, vcfgenotyperecord now implements genotype. because of this change, rodvcf is now just a wrapper around the vcfrecord and does nothing else. also, one can call tovariation on the vcfgenotyperecord and it returns the vcfrecord. 	6774 commit b6f8e33f4c754b5638ecbc7447fa8bd98146b17 stage 2 of variation refactoring: vcfrecord now implements variation, vcfgenotyperecord now implements genotype.<br> because of this change, rodvcf is now just a wrapper around the vcfrecord and does nothing else.<br> also, one can call tovariation on the vcfgenotyperecord and it returns the vcfrecord.	1	-1	 6774[0] commit[0] b6f8e33f4c754b5638ecbc74447fa8bd98146b17/b6f8e33f4c754b5638ecbc7447fa8bd98146b17[0] stage[0] 2[0] of[0] variation[0] refactoring[0] vcfrecord[0] now[0] implements[0] variation[0] vcfgenotyperecord[0] now[0] implements[0] genotype[0] [[Sentence=-1,1=word max, 1-5]] because[0] of[0] this[0] change[0] rodvcf[0] is[0] now[0] just[0] a[0] wrapper[0] around[0] the[0] vcfrecord[0] and[0] does[0] nothing[0] else[0] [[Sentence=-1,1=word max, 1-5]] also[0] one[0] can[0] call[0] tovariation[0] on[0] the[0] vcfgenotyperecord[0] and[0] it[0] returns[0] the[0] vcfrecord[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
7007 commit b1376e42167ceacff5ad3a8a50483c48a1e9f44e structure refactored throughout for performance improvements 	7007 commit b1376e42167ceacff5ad3a8a50483c48a1e9f44e structure refactored throughout for performance improvements	2	-1	 7007[0] commit[0] b1376e42167ceacff5ad3a8a50483c48a1e9f44e[0] structure[0] refactored[0] throughout[0] for[0] performance[0] improvements[1] [[Sentence=-1,2=word max, 1-5]][[[2,-1 max of sentences]]]
7065 commit d549347f252c64eed3da575c339b56de50427afc refactored genotypelikelihoods to use an underlying 4-base model. it needs to be modified a bit and then hooked up to a pooled model, but that is now possible. at this point, there is no difference to the unified genotyper. 	7065 commit d549347f252c64eed3da575c339b56de50427afc refactored genotypelikelihoods to use an underlying 4-base model.<br> it needs to be modified a bit and then hooked up to a pooled model, but that is now possible.<br> at this point, there is no difference to the unified genotyper.	1	-1	 7065[0] commit[0] d549347f252c64eed3da575c339b56de50427afc[0] refactored[0] genotypelikelihoods[0] to[0] use[0] an[0] underlying[0] 4[0] base[0] model[0] [[Sentence=-1,1=word max, 1-5]] it[0] needs[0] to[0] be[0] modified[0] a[0] bit[0] and[0] then[0] hooked[0] up[0] to[0] a[0] pooled[0] model[0] but[0] that[0] is[0] now[0] possible[0] [[Sentence=-1,1=word max, 1-5]] at[0] this[0] point[0] there[0] is[0] no[0] difference[0] to[0] the[0] unified[0] genotyper[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
7814 commit 5c321f96303d48e2dcfcf24b898b839161c2e43b oops! accidentally deactivated the argumentfactory, needed by the cleanedreadinjector, while refactoring last night. 	7814 commit 5c321f96303d48e2dcfcf24b898b839161c2e43b oops!<br> accidentally deactivated the argumentfactory, needed by the cleanedreadinjector, while refactoring last night.	1	-2	 7814[0] commit[0] 5c321f96303d48e2dcfcf24b898b839161c2e43b[0] oops[0] [[Sentence=-1,1=word max, 1-5]] accidentally[-1] deactivated[0] the[0] argumentfactory[-1] needed[0] by[0] the[0] cleanedreadinjector[0] while[0] refactoring[0] last[0] night[0] [[Sentence=-2,1=word max, 1-5]][[[1,-2 max of sentences]]]
