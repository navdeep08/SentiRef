Move Method	Translation	Positive	Negative	EmotionRationale
371 commit 4ae3297a857c6a0c84511b4c5e727360f6958c89 lint infrastructure fixes this changeset contains various unrelated fixes to the lint infrastructure: (1) tweak the way the classpaths are computed in the default lint client method such that rather than reading and parsing the .classpath file 3 times, once for each of source-path, output-path and library-path, it's now processing it once and storing the results for all 3. (2) override the lookup-classpath method in eclipse to directly query the eclipse apis for obtaining the classpath info. (3) add in user libraries found in libs/, since these don't necessarily show up in the .classpath file. (4) fix a couple of bugs related to checking .class files: first, when locating the project for a .class file, lint would search upwards for the surrounding project, which meant looking for the nearest parent containing an androidmanifest.xml file. however, in the case of .class files, it will first encounter the bin/ directory, which can contain a manifest file, so it would compute a project for the bin/ folder rather than its parent, which meant the source paths would be wrong. second, the list of class entries to be processed by lint must be sorted prior to processing; the code dealing with innerclasses depends on that. (5) some minor code cleanup: move some generic utility code and some string literals out of specific detectors and into the generic utility and constant classes. (6) cache results of the lint-project to eclipse-project lookup method since that method is called repeatedly with the same (current) project. change-id: i33603eed8381ca54314202620cb1bb033e70f775 	371 commit 4ae3297a857c6a0c84511b4c5e727360f6958c89 lint infrastructure fixes this changeset contains various unrelated fixes to the lint infrastructure: (1) tweak the way the classpaths are computed in the default lint client method such that rather than reading and parsing the .<br>classpath file 3 times, once for each of source-path, output-path and library-path, it's now processing it once and storing the results for all 3.<br> (2) override the lookup-classpath method in eclipse to directly query the eclipse apis for obtaining the classpath info.<br> (3) add in user libraries found in libs/, since these don't necessarily show up in the .<br>classpath file.<br> (4) fix a couple of bugs related to checking .<br>class files: first, when locating the project for a .<br>class file, lint would search upwards for the surrounding project, which meant looking for the nearest parent containing an androidmanifest.<br>xml file.<br> however, in the case of .<br>class files, it will first encounter the bin/ directory, which can contain a manifest file, so it would compute a project for the bin/ folder rather than its parent, which meant the source paths would be wrong.<br> second, the list of class entries to be processed by lint must be sorted prior to processing; the code dealing with innerclasses depends on that.<br> (5) some minor code cleanup: move some generic utility code and some string literals out of specific detectors and into the generic utility and constant classes.<br> (6) cache results of the lint-project to eclipse-project lookup method since that method is called repeatedly with the same (current) project.<br> change-id: i33603eed8381ca54314202620cb1bb033e70f775	1	-2	 371[0] commit[0] 4ae3297a857c6a0c84511b4c5e727360f6958c89[0] lint[0] infrastructure[0] fixes[0] this[0] changeset[0] contains[0] various[0] unrelated[0] fixes[0] to[0] the[0] lint[0] infrastructure[0] (1[0] tweak[0] the[0] way[0] the[0] classpaths[0] are[0] computed[0] in[0] the[0] default[-1] lint[0] client[0] method[0] such[0] that[0] rather[0] than[0] reading[0] and[0] parsing[0] the[0] [[Sentence=-2,1=word max, 1-5]] classpath[0] file[0] 3[0] times[0] once[0] for[0] each[0] of[0] source[-1] path[0] output[0] path[0] and[0] library[0] path[0] it's[0] now[0] processing[0] it[0] once[0] and[0] storing[0] the[0] results[0] for[0] all[0] 3[0] [[Sentence=-2,1=word max, 1-5]] (2[0] override[0] the[0] lookup[0] classpath[0] method[0] in[0] eclipse[0] to[0] directly[0] query[0] the[0] eclipse[0] apis[0] for[0] obtaining[0] the[0] classpath[0] info[0] [[Sentence=-1,1=word max, 1-5]] (3[0] add[0] in[0] user[0] libraries[0] found[0] in[0] libs/[0] since[0] these[0] don't[0] necessarily[0] show[0] up[0] in[0] the[0] [[Sentence=-1,1=word max, 1-5]] classpath[0] file[0] [[Sentence=-1,1=word max, 1-5]] (4[0] fix[0] a[0] couple[0] of[0] bugs[0] related[0] to[0] checking[0] [[Sentence=-1,1=word max, 1-5]] class[0] files[0] first[0] when[0] locating[0] the[0] project[0] for[0] a[0] [[Sentence=-1,1=word max, 1-5]] class[0] file[0] lint[0] would[0] search[0] upwards[0] for[0] the[0] surrounding[0] project[0] which[0] meant[0] looking[0] for[0] the[0] nearest[0] parent[0] containing[0] an[0] androidmanifest[0] [[Sentence=-1,1=word max, 1-5]] xml[0] file[0] [[Sentence=-1,1=word max, 1-5]] however[0] in[0] the[0] case[0] of[0] [[Sentence=-1,1=word max, 1-5]] class[0] files[0] it[0] will[0] first[0] encounter[0] the[0] bin/[0] directory[0] which[0] can[0] contain[0] a[0] manifest[0] file[0] so[0] it[0] would[0] compute[0] a[0] project[0] for[0] the[0] bin/[0] folder[0] rather[0] than[0] its[0] parent[0] which[0] meant[0] the[0] source[-1] paths[0] would[0] be[0] wrong[0] [[Sentence=-2,1=word max, 1-5]] second[0] the[0] list[0] of[0] class[0] entries[0] to[0] be[0] processed[0] by[0] lint[0] must[0] be[0] sorted[0] prior[0] to[0] processing[0] the[0] code[0] dealing[0] with[0] innerclasses[0] depends[0] on[0] that[0] [[Sentence=-1,1=word max, 1-5]] (5[0] some[0] minor[0] code[0] cleanup[0] move[0] some[0] generic[0] utility[0] code[0] and[0] some[0] string[0] literals[0] out[0] of[0] specific[0] detectors[0] and[0] into[0] the[0] generic[0] utility[0] and[0] constant[0] classes[0] [[Sentence=-1,1=word max, 1-5]] (6[0] cache[0] results[0] of[0] the[0] lint[0] project[0] to[0] eclipse[0] project[0] lookup[0] method[0] since[0] that[0] method[0] is[0] called[0] repeatedly[0] with[0] the[0] same[0] current[0] project[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i33603eed8381ca54314202620cb1bb033e70f775[0] [[Sentence=-1,1=word max, 1-5]][[[1,-2 max of sentences]]]
2431 commit 8a06163380b3df70071df08a17f2f8c2aa77513c cherrypick 4cd282 from master. do not merge. grid layout and convert to grid layout improvements first, some improvements to grid layout handling: (1) when dropping a new widget, look up the sizing metadata and use it to determine what fill gravity to set. for example, a button will use gravity left, and a text field will use gravity fill_horizontal. (2) don't warn about reflection problems when failing to find gridlayout layout data; this probably means the layout is being attempted opened in an unsupporting sdk. there's a fallback case to compute the data instead already. second, improvements to the conversion to gridlayout handling: (1) it now looks at the layout_gravity values to see whether each row and column is flexible, and if there's no flexible column in each of the horizontal and vertical dimensions, it will insert a special  space  element to absorb any available extra space. this avoids constraints warnings from gridlayout. (2) it treats layout_width or layout_height attributes of match_parent or fill_parent as the same as a fill gravity (and removes it) and uses this in the flexibility computation above. (3) it removes unsupported layout params for all children (earlier this would only remove unsupported layout params on the direct children of the layout, which isn't enough when a hierarchy is being flattened.) (4) it's smarter about computing implicit rows and columns, so it avoids writing out redundant layout_row and layout_column attributes in some cases. (5) it avoids throwing refactoring errors in cases where an attribute is removed twice (6) fixes a bug where the root layout was included when computing the set of used x and y coordinates, which means you'd often end up with a blank row and column 0. (7) various refactoring to make the code cleaner. (8) more unit tests and updates to existing unit tests to reflect the new behavior such as an absorbing spacer and removal of redundant attributes. change-id: ifaca43458a4961fa032dfe22dc033b6def3c38d3 	2431 commit 8a06163380b3df70071df08a17f2f8c2a77513c cherrypick 4cd282 from master.<br> do not merge.<br> grid layout and convert to grid layout improvements first, some improvements to grid layout handling: (1) when dropping a new widget, look up the sizing metadata and use it to determine what fill gravity to set.<br> for example, a button will use gravity left, and a text field will use gravity fill_horizontal.<br> (2) don't warn about reflection problems when failing to find gridlayout layout data; this probably means the layout is being attempted opened in an unsupporting sdk.<br> there's a fallback case to compute the data instead already.<br> second, improvements to the conversion to gridlayout handling: (1) it now looks at the layout_gravity values to see whether each row and column is flexible, and if there's no flexible column in each of the horizontal and vertical dimensions, it will insert a special  space  element to absorb any available extra space.<br> this avoids constraints warnings from gridlayout.<br> (2) it treats layout_width or layout_height attributes of match_parent or fill_parent as the same as a fill gravity (and removes it) and uses this in the flexibility computation above.<br> (3) it removes unsupported layout params for all children (earlier this would only remove unsupported layout params on the direct children of the layout, which isn't enough when a hierarchy is being flattened.<br> (4) it's smarter about computing implicit rows and columns, so it avoids writing out redundant layout_row and layout_column attributes in some cases.<br> (5) it avoids throwing refactoring errors in cases where an attribute is removed twice (6) fixes a bug where the root layout was included when computing the set of used x and y coordinates, which means you'd often end up with a blank row and column 0.<br> (7) various refactoring to make the code cleaner.<br> (8) more unit tests and updates to existing unit tests to reflect the new behavior such as an absorbing spacer and removal of redundant attributes.<br> change-id: ifaca43458a4961fa032dfe22dc033b6def3c38d3	2	-2	 2431[0] commit[0] 8a06163380b3df70071df08a17f2f8c2aa77513c/8a06163380b3df70071df08a17f2f8c2a77513c[0] cherrypick[0] 4cd282[0] from[0] master[0] [[Sentence=-1,1=word max, 1-5]] do[0] not[0] merge[0] [[Sentence=-1,1=word max, 1-5]] grid[0] layout[0] and[0] convert[0] to[0] grid[0] layout[0] improvements[1] first[0] some[0] improvements[1][-1 LastWordBoosterStrength] to[0] grid[0] layout[0] handling[0] (1[0] when[0] dropping[0] a[0] new[0] widget[0] look[0] up[0] the[0] sizing[0] metadata[0] and[0] use[0] it[0] to[0] determine[0] what[0] fill[0] gravity[0] to[0] set[0] [[Sentence=-1,2=word max, 1-5]] for[0] example[0] a[0] button[0] will[0] use[0] gravity[0] left[0] and[0] a[0] text[0] field[0] will[0] use[0] gravity[0] fill_horizontal[0] [[Sentence=-1,1=word max, 1-5]] (2[0] don't[0] warn[0] about[0] reflection[0] problems[-1] when[0] failing[0] to[0] find[0] gridlayout[0] layout[0] data[0] this[0] probably[0] means[0] the[0] layout[0] is[0] being[0] attempted[0] opened[0] in[0] an[0] unsupporting[0] sdk[0] [[Sentence=-2,1=word max, 1-5]] there's[0] a[0] fallback[0] case[0] to[0] compute[0] the[0] data[0] instead[0] already[0] [[Sentence=-1,1=word max, 1-5]] second[0] improvements[1] to[0] the[0] conversion[0] to[0] gridlayout[0] handling[0] (1[0] it[0] now[0] looks[0] at[0] the[0] layout_gravity[0] values[1] to[0] see[0] whether[0] each[0] row[0] and[0] column[0] is[0] flexible[0] and[0] if[0] there's[0] no[0] flexible[0] column[0] in[0] each[0] of[0] the[0] horizontal[0] and[0] vertical[0] dimensions[0] it[0] will[0] insert[0] a[0] special[1] space[0] element[0] to[0] absorb[0] any[0] available[0] extra[0] space[0] [[Sentence=-1,2=word max, 1-5]] this[0] avoids[-1] constraints[0] warnings[0] from[0] gridlayout[0] [[Sentence=-2,1=word max, 1-5]] (2[0] it[0] treats[0] layout_width[0] or[0] layout_height[0] attributes[0] of[0] match_parent[0] or[0] fill_parent[0] as[0] the[0] same[0] as[0] a[0] fill[0] gravity[0] and[0] removes[0] it[0] and[0] uses[0] this[0] in[0] the[0] flexibility[0] computation[0] above[0] [[Sentence=-1,1=word max, 1-5]] (3[0] it[0] removes[0] unsupported[0] layout[0] params[0] for[0] all[0] children[0] earlier[0] this[0] would[0] only[0] remove[0] unsupported[0] layout[0] params[0] on[0] the[0] direct[0] children[0] of[0] the[0] layout[0] which[0] isn't[0] enough[0] when[0] a[0] hierarchy[0] is[0] being[0] flattened[0] [[Sentence=-1,1=word max, 1-5]] (4[0] it's[0] smarter[1] about[0] computing[0] implicit[0] rows[0] and[0] columns[0] so[0] it[0] avoids[-1] writing[0] out[0] redundant[0] layout_row[0] and[0] layout_column[0] attributes[0] in[0] some[0] cases[0] [[Sentence=-2,2=word max, 1-5]] (5[0] it[0] avoids[-1] throwing[0] refactoring[0] errors[0] in[0] cases[0] where[0] an[0] attribute[0] is[0] removed[0] twice[0] (6[0] fixes[0] a[0] bug[0] where[0] the[0] root[0] layout[0] was[0] included[0] when[0] computing[0] the[0] set[0] of[0] used[0] x[1] and[0] y[0] coordinates[0] which[0] means[0] you'd[0] often[0] end[0] up[0] with[0] a[0] blank[0] row[0] and[0] column[0] 0[0] [[Sentence=-2,2=word max, 1-5]] (7[0] various[0] refactoring[0] to[0] make[0] the[0] code[0] cleaner[0] [[Sentence=-1,1=word max, 1-5]] (8[0] more[0] unit[0] tests[0] and[0] updates[0] to[0] existing[0] unit[0] tests[0] to[0] reflect[0] the[0] new[0] behavior[0] such[0] as[0] an[0] absorbing[0] spacer[0] and[0] removal[0] of[0] redundant[0] attributes[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] ifaca43458a4961fa032dfe22dc033b6def3c38d3[0] [[Sentence=-1,1=word max, 1-5]][[[2,-2 max of sentences]]]
2467 commit 4cd282c7b21dc06c2d2d02748278f07c94282fc1 grid layout and convert to grid layout improvements first, some improvements to grid layout handling: (1) when dropping a new widget, look up the sizing metadata and use it to determine what fill gravity to set. for example, a button will use gravity left, and a text field will use gravity fill_horizontal. (2) don't warn about reflection problems when failing to find gridlayout layout data; this probably means the layout is being attempted opened in an unsupporting sdk. there's a fallback case to compute the data instead already. second, improvements to the conversion to gridlayout handling: (1) it now looks at the layout_gravity values to see whether each row and column is flexible, and if there's no flexible column in each of the horizontal and vertical dimensions, it will insert a special  space  element to absorb any available extra space. this avoids constraints warnings from gridlayout. (2) it treats layout_width or layout_height attributes of match_parent or fill_parent as the same as a fill gravity (and removes it) and uses this in the flexibility computation above. (3) it removes unsupported layout params for all children (earlier this would only remove unsupported layout params on the direct children of the layout, which isn't enough when a hierarchy is being flattened.) (4) it's smarter about computing implicit rows and columns, so it avoids writing out redundant layout_row and layout_column attributes in some cases. (5) it avoids throwing refactoring errors in cases where an attribute is removed twice (6) fixes a bug where the root layout was included when computing the set of used x and y coordinates, which means you'd often end up with a blank row and column 0. (7) various refactoring to make the code cleaner. (8) more unit tests and updates to existing unit tests to reflect the new behavior such as an absorbing spacer and removal of redundant attributes. change-id: iee44c3ca749eefc107b83545669cc9d7f84615b1 	2467 commit 4cd282c7b21dc06c2d2d02748278f07c94282fc1 grid layout and convert to grid layout improvements first, some improvements to grid layout handling: (1) when dropping a new widget, look up the sizing metadata and use it to determine what fill gravity to set.<br> for example, a button will use gravity left, and a text field will use gravity fill_horizontal.<br> (2) don't warn about reflection problems when failing to find gridlayout layout data; this probably means the layout is being attempted opened in an unsupporting sdk.<br> there's a fallback case to compute the data instead already.<br> second, improvements to the conversion to gridlayout handling: (1) it now looks at the layout_gravity values to see whether each row and column is flexible, and if there's no flexible column in each of the horizontal and vertical dimensions, it will insert a special  space  element to absorb any available extra space.<br> this avoids constraints warnings from gridlayout.<br> (2) it treats layout_width or layout_height attributes of match_parent or fill_parent as the same as a fill gravity (and removes it) and uses this in the flexibility computation above.<br> (3) it removes unsupported layout params for all children (earlier this would only remove unsupported layout params on the direct children of the layout, which isn't enough when a hierarchy is being flattened.<br> (4) it's smarter about computing implicit rows and columns, so it avoids writing out redundant layout_row and layout_column attributes in some cases.<br> (5) it avoids throwing refactoring errors in cases where an attribute is removed twice (6) fixes a bug where the root layout was included when computing the set of used x and y coordinates, which means you'd often end up with a blank row and column 0.<br> (7) various refactoring to make the code cleaner.<br> (8) more unit tests and updates to existing unit tests to reflect the new behavior such as an absorbing spacer and removal of redundant attributes.<br> change-id: iee44c3ca749eefc107b83545669cc9d7f84615b1	2	-2	 2467[0] commit[0] 4cd282c7b21dc06c2d2d02748278f07c94282fc1[0] grid[0] layout[0] and[0] convert[0] to[0] grid[0] layout[0] improvements[1] first[0] some[0] improvements[1][-1 LastWordBoosterStrength] to[0] grid[0] layout[0] handling[0] (1[0] when[0] dropping[0] a[0] new[0] widget[0] look[0] up[0] the[0] sizing[0] metadata[0] and[0] use[0] it[0] to[0] determine[0] what[0] fill[0] gravity[0] to[0] set[0] [[Sentence=-1,2=word max, 1-5]] for[0] example[0] a[0] button[0] will[0] use[0] gravity[0] left[0] and[0] a[0] text[0] field[0] will[0] use[0] gravity[0] fill_horizontal[0] [[Sentence=-1,1=word max, 1-5]] (2[0] don't[0] warn[0] about[0] reflection[0] problems[-1] when[0] failing[0] to[0] find[0] gridlayout[0] layout[0] data[0] this[0] probably[0] means[0] the[0] layout[0] is[0] being[0] attempted[0] opened[0] in[0] an[0] unsupporting[0] sdk[0] [[Sentence=-2,1=word max, 1-5]] there's[0] a[0] fallback[0] case[0] to[0] compute[0] the[0] data[0] instead[0] already[0] [[Sentence=-1,1=word max, 1-5]] second[0] improvements[1] to[0] the[0] conversion[0] to[0] gridlayout[0] handling[0] (1[0] it[0] now[0] looks[0] at[0] the[0] layout_gravity[0] values[1] to[0] see[0] whether[0] each[0] row[0] and[0] column[0] is[0] flexible[0] and[0] if[0] there's[0] no[0] flexible[0] column[0] in[0] each[0] of[0] the[0] horizontal[0] and[0] vertical[0] dimensions[0] it[0] will[0] insert[0] a[0] special[1] space[0] element[0] to[0] absorb[0] any[0] available[0] extra[0] space[0] [[Sentence=-1,2=word max, 1-5]] this[0] avoids[-1] constraints[0] warnings[0] from[0] gridlayout[0] [[Sentence=-2,1=word max, 1-5]] (2[0] it[0] treats[0] layout_width[0] or[0] layout_height[0] attributes[0] of[0] match_parent[0] or[0] fill_parent[0] as[0] the[0] same[0] as[0] a[0] fill[0] gravity[0] and[0] removes[0] it[0] and[0] uses[0] this[0] in[0] the[0] flexibility[0] computation[0] above[0] [[Sentence=-1,1=word max, 1-5]] (3[0] it[0] removes[0] unsupported[0] layout[0] params[0] for[0] all[0] children[0] earlier[0] this[0] would[0] only[0] remove[0] unsupported[0] layout[0] params[0] on[0] the[0] direct[0] children[0] of[0] the[0] layout[0] which[0] isn't[0] enough[0] when[0] a[0] hierarchy[0] is[0] being[0] flattened[0] [[Sentence=-1,1=word max, 1-5]] (4[0] it's[0] smarter[1] about[0] computing[0] implicit[0] rows[0] and[0] columns[0] so[0] it[0] avoids[-1] writing[0] out[0] redundant[0] layout_row[0] and[0] layout_column[0] attributes[0] in[0] some[0] cases[0] [[Sentence=-2,2=word max, 1-5]] (5[0] it[0] avoids[-1] throwing[0] refactoring[0] errors[0] in[0] cases[0] where[0] an[0] attribute[0] is[0] removed[0] twice[0] (6[0] fixes[0] a[0] bug[0] where[0] the[0] root[0] layout[0] was[0] included[0] when[0] computing[0] the[0] set[0] of[0] used[0] x[1] and[0] y[0] coordinates[0] which[0] means[0] you'd[0] often[0] end[0] up[0] with[0] a[0] blank[0] row[0] and[0] column[0] 0[0] [[Sentence=-2,2=word max, 1-5]] (7[0] various[0] refactoring[0] to[0] make[0] the[0] code[0] cleaner[0] [[Sentence=-1,1=word max, 1-5]] (8[0] more[0] unit[0] tests[0] and[0] updates[0] to[0] existing[0] unit[0] tests[0] to[0] reflect[0] the[0] new[0] behavior[0] such[0] as[0] an[0] absorbing[0] spacer[0] and[0] removal[0] of[0] redundant[0] attributes[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] iee44c3ca749eefc107b83545669cc9d7f84615b1[0] [[Sentence=-1,1=word max, 1-5]][[[2,-2 max of sentences]]]
3927 commit 842b0eb9e2d530c19b9af3981e2d688411c1e554 add newline inside new root elements, and some move code around tweak the "new xml file" creation code to insert a new line inside the created root element, indent, and place the cursor there. this means that you end up with:  linearlayout     /linearlayout  instead of (where   denotes the initial caret position):   linearlayout   /linearlayout  this means you can instantly press ctrl-space to complete on the elements, etc., and is similar to how eclipse creates new method bodies from templates, adding newlines such that you can instantly write code there instead of having to "open them up". all the diffs for this are in newxmlfilewizard.java; the other modifications in this changeset are simple move refactoring operations as described next: the second change in this changeset is moving some code around such that common utility methods live in more natural places rather than where they were first needed. in particular: hyperlinks.openurl    adtplugin hyperlinks.openjavaclass    adtplugin hyperlinks.openfile    adtplugin androidcontentassist.getandroidxmleditor    androidxmleditor resourcechooser.cancreateresource    resourcehelper resourcechooser.createresource    resourcehelper hyperlinks.parseresource    resourcehelper resourcenamevalidator.isvaluebasedresourcetype    resourcehelper resourcenamevalidator.isfilebasedresourcetype    resourcehelper change-id: if7690df9ce59c709c1d909ffd9f74c2684f3dd46 	3927 commit 842b0eb9e2d530c19b9af3981e2d688411c1e554 add newline inside new root elements, and some move code around tweak the "new xml file" creation code to insert a new line inside the created root element, indent, and place the cursor there.<br> this means that you end up with:  linearlayout     /linearlayout  instead of (where   denotes the initial caret positionposition   linearlayout   /linearlayout  this means you can instantly press ctrl-space to complete on the elements, etc.<br> and is similar to how eclipse creates new method bodies from templates, adding newlines such that you can instantly write code there instead of having to "open them up"<br> all the diffs for this are in newxmlfilewizard.<br>java; the other modifications in this changeset are simple move refactoring operations as described next: the second change in this changeset is moving some code around such that common utility methods live in more natural places rather than where they were first needed.<br> in particular: hyperlinks.<br>openurl    adtplugin hyperlinks.<br>openjavaclass    adtplugin hyperlinks.<br>openfile    adtplugin androidcontentassist.<br>getandroidxmleditor    androidxmleditor resourcechooser.<br>cancreateresource    resourcehelper resourcechooser.<br>createresource    resourcehelper hyperlinks.<br>parseresource    resourcehelper resourcenamevalidator.<br>isvaluebasedresourcetype    resourcehelper resourcenamevalidator.<br>isfilebasedresourcetype    resourcehelper change-id: if7690df9ce59c709c1d909ffd9f74c2684f3dd46	1	-2	 3927[0] commit[0] 842b0eb9e2d530c19b9af3981e2d688411c1e554[0] add[0] newline[0] inside[0] new[0] root[0] elements[0] and[0] some[0] move[0] code[0] around[0] tweak[0] the[0] new[0] xml[0] file[0] creation[0] code[0] to[0] insert[0] a[0] new[0] line[0] inside[0] the[0] created[0] root[0] element[0] indent[0] and[0] place[0] the[0] cursor[0] there[0] [[Sentence=-1,1=word max, 1-5]] this[0] means[0] that[0] you[0] end[0] up[0] with[0] linearlayout[0] /linearlayout[0] instead[0] of[0] where[0] denotes[0] the[0] initial[0] caret[0] position[0][-1 Emoticon] linearlayout[0] /linearlayout[0] this[0] means[0] you[0] can[0] instantly[0] press[0] ctrl[0] space[0] to[0] complete[0] on[0] the[0] elements[0] etc[0] [[Sentence=-2,1=word max, 1-5]] and[0] is[0] similar[0] to[0] how[0] eclipse[0] creates[0] new[0] method[0] bodies[0] from[0] templates[0] adding[0] newlines[0] such[0] that[0] you[0] can[0] instantly[0] write[0] code[0] there[0] instead[0] of[0] having[0] to[0] open[0] them[0] up[0] [[Sentence=-1,1=word max, 1-5]] all[0] the[0] diffs[0] for[0] this[0] are[0] in[0] newxmlfilewizard[0] [[Sentence=-1,1=word max, 1-5]] java[0] the[0] other[0] modifications[0] in[0] this[0] changeset[0] are[0] simple[0] move[0] refactoring[0] operations[0] as[0] described[0] next[0] the[0] second[0] change[0] in[0] this[0] changeset[0] is[0] moving[0] some[0] code[0] around[0] such[0] that[0] common[0] utility[0] methods[0] live[0] in[0] more[0] natural[0] places[0] rather[0] than[0] where[0] they[0] were[0] first[0] needed[0] [[Sentence=-1,1=word max, 1-5]] in[0] particular[0] hyperlinks[0] [[Sentence=-1,1=word max, 1-5]] openurl[0] adtplugin[0] hyperlinks[0] [[Sentence=-1,1=word max, 1-5]] openjavaclass[0] adtplugin[0] hyperlinks[0] [[Sentence=-1,1=word max, 1-5]] openfile[0] adtplugin[0] androidcontentassist[0] [[Sentence=-1,1=word max, 1-5]] getandroidxmleditor[0] androidxmleditor[0] resourcechooser[0] [[Sentence=-1,1=word max, 1-5]] cancreateresource[0] resourcehelper[0] resourcechooser[0] [[Sentence=-1,1=word max, 1-5]] createresource[0] resourcehelper[0] hyperlinks[0] [[Sentence=-1,1=word max, 1-5]] parseresource[0] resourcehelper[0] resourcenamevalidator[0] [[Sentence=-1,1=word max, 1-5]] isvaluebasedresourcetype[0] resourcehelper[0] resourcenamevalidator[0] [[Sentence=-1,1=word max, 1-5]] isfilebasedresourcetype[0] resourcehelper[0] change[0] id[0] if7690df9ce59c709c1d909ffd9f74c2684f3dd46[0] [[Sentence=-1,1=word max, 1-5]][[[1,-2 max of sentences]]]
3973 commit 9e6db060854d0e890190919a27a1846f50f69d1a extract as include support for configuration variations first, add support for the "extract as include" refactoring to update all identical code fragments in configuration variations of the same file. for example, if you have a particular subtree of xml elements in a file that you have then duplicated into say a landscape mode, then applying the extract as include refactoring will locate the same code fragment in both files, and replace *both* code fragments with an include (and this is optional with a checkbox in the wizard dialog). this only happens when the extracted code fragment is "identical" in both files. the code fragments can vary in terms of xml formatting and attribute order (and namespace prefix choice), but the element hierarchy order, names, attributes defined and attribute values must be identical. second, make fixes to the change layout and change widget type refactorings such that when the id of the converted element is changed, then references to that id are updated as well. third, ensure that the refactorings are enabled even when there is no text selection; in that case the refactoring will apply to the element containing the caret. some test infrastructure improvements. change-id: idb4ba40f4217dba2b13881b3d06e269c80ba4b97 	3973 commit 9e6db060854d0e890190919a27a1846f50f69d1a extract as include support for configuration variations first, add support for the "extract as include" refactoring to update all identical code fragments in configuration variations of the same file.<br> for example, if you have a particular subtree of xml elements in a file that you have then duplicated into say a landscape mode, then applying the extract as include refactoring will locate the same code fragment in both files, and replace *both* code fragments with an include (and this is optional with a checkbox in the wizard dialog)<br> this only happens when the extracted code fragment is "identical" in both files.<br> the code fragments can vary in terms of xml formatting and attribute order (and namespace prefix choice) but the element hierarchy order, names, attributes defined and attribute values must be identical.<br> second, make fixes to the change layout and change widget type refactorings such that when the id of the converted element is changed, then references to that id are updated as well.<br> third, ensure that the refactorings are enabled even when there is no text selection; in that case the refactoring will apply to the element containing the caret.<br> some test infrastructure improvements.<br> change-id: idb4ba40f4217dba2b13881b3d06e269c80ba4b97	2	-1	 3973[0] commit[0] 9e6db060854d0e890190919a27a1846f50f69d1a[0] extract[0] as[0] include[0] support[0] for[0] configuration[0] variations[0] first[0] add[0] support[0] for[0] the[0] extract[0] as[0] include[0] refactoring[0] to[0] update[0] all[0] identical[0] code[0] fragments[0] in[0] configuration[0] variations[0] of[0] the[0] same[0] file[0] [[Sentence=-1,1=word max, 1-5]] for[0] example[0] if[0] you[0] have[0] a[0] particular[0] subtree[0] of[0] xml[0] elements[0] in[0] a[0] file[0] that[0] you[0] have[0] then[0] duplicated[0] into[0] say[0] a[0] landscape[0] mode[0] then[0] applying[0] the[0] extract[0] as[0] include[0] refactoring[0] will[0] locate[0] the[0] same[0] code[0] fragment[0] in[0] both[0] files[0] and[0] replace[0] both[0] code[0] fragments[0] with[0] an[0] include[0] and[0] this[0] is[0] optional[0] with[0] a[0] checkbox[0] in[0] the[0] wizard[0] dialog[0] [[Sentence=-1,1=word max, 1-5]] this[0] only[0] happens[0] when[0] the[0] extracted[0] code[0] fragment[0] is[0] identical[0] in[0] both[0] files[0] [[Sentence=-1,1=word max, 1-5]] the[0] code[0] fragments[0] can[0] vary[0] in[0] terms[0] of[0] xml[0] formatting[0] and[0] attribute[0] order[0] and[0] namespace[0] prefix[0] choice[0] but[0] the[0] element[0] hierarchy[0] order[0] names[0] attributes[0] defined[0] and[0] attribute[0] values[1] must[0] be[0] identical[0] [[Sentence=-1,2=word max, 1-5]] second[0] make[0] fixes[0] to[0] the[0] change[0] layout[0] and[0] change[0] widget[0] type[0] refactorings[0] such[0] that[0] when[0] the[0] id[0] of[0] the[0] converted[0] element[0] is[0] changed[0] then[0] references[0] to[0] that[0] id[0] are[0] updated[0] as[0] well[0] [[Sentence=-1,1=word max, 1-5]] third[0] ensure[0] that[0] the[0] refactorings[0] are[0] enabled[0] even[0] when[0] there[0] is[0] no[0] text[0] selection[0] in[0] that[0] case[0] the[0] refactoring[0] will[0] apply[0] to[0] the[0] element[0] containing[0] the[0] caret[0] [[Sentence=-1,1=word max, 1-5]] some[0] test[0] infrastructure[0] improvements[1] [[Sentence=-1,2=word max, 1-5]] change[0] id[0] idb4ba40f4217dba2b13881b3d06e269c80ba4b97[0] [[Sentence=-1,1=word max, 1-5]][[[2,-1 max of sentences]]]
3983 commit 5e4103bba9ff1b8a0faaee7fb70504ca515d796b merge: 403096e 86be31d merge "a bit more refactoring around the resource repository." 	3983 commit 5e4103bba9ff1b8a0faee7fb70504ca515d796b merge: 403096e 86be31d merge "a bit more refactoring around the resource repository.	1	-1	 3983[0] commit[0] 5e4103bba9ff1b8a0faaee7fb70504ca515d796b/5e4103bba9ff1b8a0faee7fb70504ca515d796b[0] merge[0] 403096e[0] 86be31d[0] merge[0] a[0] bit[0] more[0] refactoring[0] around[0] the[0] resource[0] repository[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
3984 commit 86be31dde602ef2af040a73940849d0c66c9991f a bit more refactoring around the resource repository. - move configurable in the same package as folderconfiguration. - move resourcemanager.getconfig in folderconfiguration. - move resourcemaanger.processfolder in resourcerepository. - move resourcemanager.processfile in resourcefolder. - rename some misc methods. change-id: ifa557c7db22c3fb82327a68f4365c08d152d9cf4 	3984 commit 86be31dde602ef2af040a73940849d0c66c991f a bit more refactoring around the resource repository.<br> - move configurable in the same package as folderconfiguration.<br> - move resourcemanager.<br>getconfig in folderconfiguration.<br> - move resourcemanger.<br>processfolder in resourcerepository.<br> - move resourcemanager.<br>processfile in resourcefolder.<br> - rename some misc methods.<br> change-id: ifa557c7db22c3fb82327a68f4365c08d152d9cf4	1	-1	 3984[0] commit[0] 86be31dde602ef2af040a73940849d0c66c9991f/86be31dde602ef2af040a73940849d0c66c991f[0] a[0] bit[0] more[0] refactoring[0] around[0] the[0] resource[0] repository[0] [[Sentence=-1,1=word max, 1-5]] move[0] configurable[0] in[0] the[0] same[0] package[0] as[0] folderconfiguration[0] [[Sentence=-1,1=word max, 1-5]] move[0] resourcemanager[0] [[Sentence=-1,1=word max, 1-5]] getconfig[0] in[0] folderconfiguration[0] [[Sentence=-1,1=word max, 1-5]] move[0] resourcemaanger/resourcemanger[0] [[Sentence=-1,1=word max, 1-5]] processfolder[0] in[0] resourcerepository[0] [[Sentence=-1,1=word max, 1-5]] move[0] resourcemanager[0] [[Sentence=-1,1=word max, 1-5]] processfile[0] in[0] resourcefolder[0] [[Sentence=-1,1=word max, 1-5]] rename[0] some[0] misc[0] methods[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] ifa557c7db22c3fb82327a68f4365c08d152d9cf4[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
5953 commit 114ca22329320d7f43af219b473d4c2461e82e7d first step of multiple apk support. - new export type project to handle exporting a single app represented by multiple projects (for different minsdkversion for instance). - cleaned-up the current ant tasks and eclipse builder to not deal with apksettings anymore. it's not possible to generate more than one apk in a single pass. the export project will handle this and call out the normal build system to export each variant. make older (deprecated) attribute actually output a warning. - ant rules r3 now with support for multi apk export. lots of clean up, add new properties to be overriden by the multi-apk export task, make older one overrideable too. - better handling of older rules, older tasks, etc... in the setuptask used by the normal build. - add split by abi to apksettings and use it in the new multi apk export. - new custom task for multi-apk export. replaces setuptask for export-type projects. calls out to the project's build.xml after setting/overriding properties. this also override the project's versioncode with a new composite one made of different values. also uses a different build.xml, so added a new template: build.export.template. very much a work in progress. still to do: add other types of apk split, create/update export projects, export the build log, ... also, we need to refactor the normal build rules to avoid so much duplication! change-id: i57a565c60d097a5eabb40108ae1fa8cb209f2380 	5953 commit 114ca22329320d7f43af219b473d4c2461e82e7d first step of multiple apk support.<br> - new export type project to handle exporting a single ap represented by multiple projects (for different minsdkversion for instance)<br> - cleaned-up the current ant tasks and eclipse builder to not deal with apksettings anymore.<br> it's not possible to generate more than one apk in a single pass.<br> the export project will handle this and call out the normal build system to export each variant.<br> make older (deprecated) attribute actually output a warning.<br> - ant rules r3 now with support for multi apk export.<br> lots of clean up, add new properties to be overriden by the multi-apk export task, make older one overrideable too.<br> - better handling of older rules, older tasks, etc.<br> in the setuptask used by the normal build.<br> - add split by abi to apksettings and use it in the new multi apk export.<br> - new custom task for multi-apk export.<br> replaces setuptask for export-type projects.<br> calls out to the project's build.<br>xml after setting/overriding properties.<br> this also override the project's versioncode with a new composite one made of different values.<br> also uses a different build.<br>xml, so added a new template: build.<br>export.<br>template.<br> very much a work in progress.<br> still to do: add other types of apk split, create/update export projects, export the build log, .<br> also, we need to refactor the normal build rules to avoid so much duplication!<br> change-id: i57a565c60d097a5eabb40108ae1fa8cb209f2380	2	-2	 5953[0] commit[0] 114ca22329320d7f43af219b473d4c2461e82e7d[0] first[0] step[0] of[0] multiple[0] apk[0] support[0] [[Sentence=-1,1=word max, 1-5]] new[0] export[0] type[0] project[0] to[0] handle[0] exporting[0] a[0] single[0] app/ap[0] represented[0] by[0] multiple[0] projects[0] for[0] different[0] minsdkversion[0] for[0] instance[0] [[Sentence=-1,1=word max, 1-5]] cleaned[0] up[0] the[0] current[0] ant[0] tasks[0] and[0] eclipse[0] builder[0] to[0] not[0] deal[0] with[0] apksettings[0] anymore[0] [[Sentence=-1,1=word max, 1-5]] it's[0] not[0] possible[0] to[0] generate[0] more[0] than[0] one[0] apk[0] in[0] a[0] single[0] pass[0] [[Sentence=-1,1=word max, 1-5]] the[0] export[0] project[0] will[0] handle[0] this[0] and[0] call[0] out[0] the[0] normal[0] build[0] system[0] to[0] export[0] each[0] variant[0] [[Sentence=-1,1=word max, 1-5]] make[0] older[0] deprecated[0] attribute[0] actually[0] output[0] a[0] warning[0] [[Sentence=-1,1=word max, 1-5]] ant[0] rules[0] r3[0] now[0] with[0] support[0] for[0] multi[0] apk[0] export[0] [[Sentence=-1,1=word max, 1-5]] lots[0] of[0] clean[0] up[0] add[0] new[0] properties[0] to[0] be[0] overriden[0] by[0] the[0] multi[0] apk[0] export[0] task[0] make[0] older[0] one[0] overrideable[0] too[0] [[Sentence=-1,1=word max, 1-5]] better[0] handling[0] of[0] older[0] rules[0] older[0] tasks[0] etc[0] [[Sentence=-1,1=word max, 1-5]] in[0] the[0] setuptask[0] used[0] by[0] the[0] normal[0] build[0] [[Sentence=-1,1=word max, 1-5]] add[0] split[0] by[0] abi[0] to[0] apksettings[0] and[0] use[0] it[0] in[0] the[0] new[0] multi[0] apk[0] export[0] [[Sentence=-1,1=word max, 1-5]] new[0] custom[0] task[0] for[0] multi[0] apk[0] export[0] [[Sentence=-1,1=word max, 1-5]] replaces[0] setuptask[0] for[0] export[0] type[0] projects[0] [[Sentence=-1,1=word max, 1-5]] calls[0] out[0] to[0] the[0] project's[0] build[0] [[Sentence=-1,1=word max, 1-5]] xml[0] after[0] setting/overriding[0] properties[0] [[Sentence=-1,1=word max, 1-5]] this[0] also[0] override[0] the[0] project's[0] versioncode[0] with[0] a[0] new[0] composite[0] one[0] made[0] of[0] different[0] values[1] [[Sentence=-1,2=word max, 1-5]] also[0] uses[0] a[0] different[0] build[0] [[Sentence=-1,1=word max, 1-5]] xml[0] so[0] added[0] a[0] new[0] template[0] build[0] [[Sentence=-1,1=word max, 1-5]] export[0] [[Sentence=-1,1=word max, 1-5]] template[0] [[Sentence=-1,1=word max, 1-5]] very[0] much[0] a[0] work[0] in[0] progress[0] [[Sentence=-1,1=word max, 1-5]] still[0] to[0] do[0] add[0] other[0] types[0] of[0] apk[0] split[0] create/update[0] export[0] projects[0] export[0] the[0] build[0] log[0] [[Sentence=-1,1=word max, 1-5]] also[0] we[0] need[0] to[0] refactor[0] the[0] normal[0] build[0] rules[0] to[0] avoid[-1] so[0] much[0] duplication[0] [[Sentence=-2,1=word max, 1-5]] change[0] id[0] i57a565c60d097a5eabb40108ae1fa8cb209f2380[0] [[Sentence=-1,1=word max, 1-5]][[[2,-2 max of sentences]]]
8852 commit c0b5d489887aadb389854ca7a5856b084abd1ef0 merge: c10c06d 69d1a9b am defc3d14: merge change 3407 into donut merge commit 'defc3d14e1b43cbab5877f9c9112b170cc61c4a5' * commit 'defc3d14e1b43cbab5877f9c9112b170cc61c4a5': sdk updater: refactor install into archive. 	8852 commit c0b5d489887adb389854ca7a5856b084abd1ef0 merge: c10c06d 69d1a9b am defc3d14: merge change 3407 into donut merge commit 'defc3d14e1b43cbab5877f9c9112b170cc61c4a5' * commit 'defc3d14e1b43cbab5877f9c9112b170cc61c4a5': sdk updater: refactor install into archive.	1	-1	 8852[0] commit[0] c0b5d489887aadb389854ca7a5856b084abd1ef0/c0b5d489887adb389854ca7a5856b084abd1ef0[0] merge[0] c10c06d[0] 69d1a9b[0] am[0] defc3d14[0] merge[0] change[0] 3407[0] into[0] donut[0] merge[0] commit[0] 'defc3d14e1b43cbab5877f9c9112b170cc61c4a5'[0] commit[0] 'defc3d14e1b43cbab5877f9c9112b170cc61c4a5'[0] sdk[0] updater[0] refactor[0] install[0] into[0] archive[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
8853 commit 69d1a9b48d069fd96bf8e9102b92811a48b53541 merge: 033f001 0fc874c merge change 3407 into donut * changes: sdk updater: refactor install into archive. 	8853 commit 69d1a9b48d069fd96bf8e9102b92811a48b53541 merge: 033f001 0fc874c merge change 3407 into donut * changes: sdk updater: refactor install into archive.	1	-1	 8853[0] commit[0] 69d1a9b48d069fd96bf8e9102b92811a48b53541[0] merge[0] 033f001[0] 0fc874c[0] merge[0] change[0] 3407[0] into[0] donut[0] changes[0] sdk[0] updater[0] refactor[0] install[0] into[0] archive[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
8866 commit 0fc874ce466821f764ae67e490b5ca93cc608df5 sdk updater: refactor install into archive. 	8866 commit 0fc874ce466821f764ae67e490b5ca93cc608df5 sdk updater: refactor install into archive.	1	-1	 8866[0] commit[0] 0fc874ce466821f764ae67e490b5ca93cc608df5[0] sdk[0] updater[0] refactor[0] install[0] into[0] archive[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
