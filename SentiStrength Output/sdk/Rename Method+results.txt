Rename Method	Translation	Positive	Negative	EmotionRationale
167 commit 802de810020fba3f86282cd1d66597a2a41698e3 preview support in the templates this changeset adds a preview page to the end of the template wizards which shows the changes to be applied to the project - first the files which were edited (merged), such as the manifest file in the case of a new activity, and second the text files to be created, and third the binary files to be created. in addition, the user can now uncheck any of these changes, if for example the manifest file edit isn't wanted. furthermore, the now that the changes are computed up front, the phase of applying the changes is run in the background with a progress bar in the new-wizard. there's also some consolidation of the various template wizards to handle things like the upgrade-page and the dependency-page in one place. infrastructure wise this changes the template instantiation from being based on file manipulation to using the refactoring infrastructure's change support, which should be more reliable. it also fixes a bug where projects were marked as library projects which should not have be. change-id: i496761f01c7ec28bf9170e4d1041211e3ebe285b 	167 commit 802de810020fba3f86282cd1d66597a2a41698e3 preview support in the templates this changeset adds a preview page to the end of the template wizards which shows the changes to be applied to the project - first the files which were edited (merged) such as the manifest file in the case of a new activity, and second the text files to be created, and third the binary files to be created.<br> in addition, the user can now uncheck any of these changes, if for example the manifest file edit isn't wanted.<br> furthermore, the now that the changes are computed up front, the phase of applying the changes is run in the background with a progress bar in the new-wizard.<br> there's also some consolidation of the various template wizards to handle things like the upgrade-page and the dependency-page in one place.<br> infrastructure wise this changes the template instantiation from being based on file manipulation to using the refactoring infrastructure's change support, which should be more reliable.<br> it also fixes a bug where projects were marked as library projects which should not have be.<br> change-id: i496761f01c7ec28bf9170e4d1041211e3ebe285b	1	-2	 167[0] commit[0] 802de810020fba3f86282cd1d66597a2a41698e3[0] preview[0] support[0] in[0] the[0] templates[0] this[0] changeset[0] adds[0] a[0] preview[0] page[0] to[0] the[0] end[0] of[0] the[0] template[0] wizards[0] which[0] shows[0] the[0] changes[0] to[0] be[0] applied[0] to[0] the[0] project[0] first[0] the[0] files[0] which[0] were[0] edited[0] merged[0] such[0] as[0] the[0] manifest[0] file[0] in[0] the[0] case[0] of[0] a[0] new[0] activity[0] and[0] second[0] the[0] text[0] files[0] to[0] be[0] created[0] and[0] third[0] the[0] binary[0] files[0] to[0] be[0] created[0] [[Sentence=-1,1=word max, 1-5]] in[0] addition[0] the[0] user[0] can[0] now[0] uncheck[0] any[0] of[0] these[0] changes[0] if[0] for[0] example[0] the[0] manifest[0] file[0] edit[0] isn't[0] wanted[0] [[Sentence=-1,1=word max, 1-5]] furthermore[0] the[0] now[0] that[0] the[0] changes[0] are[0] computed[0] up[0] front[0] the[0] phase[0] of[0] applying[0] the[0] changes[0] is[0] run[0] in[0] the[0] background[0] with[0] a[0] progress[0] bar[0] in[0] the[0] new[0] wizard[0] [[Sentence=-1,1=word max, 1-5]] there's[0] also[0] some[0] consolidation[0] of[0] the[0] various[0] template[0] wizards[0] to[0] handle[0] things[0] like[0] the[0] upgrade[0] page[0] and[0] the[0] dependency[0] page[0] in[0] one[0] place[0] [[Sentence=-1,1=word max, 1-5]] infrastructure[0] wise[0] this[0] changes[0] the[0] template[0] instantiation[0] from[0] being[0] based[0] on[0] file[0] manipulation[-1] to[0] using[0] the[0] refactoring[0] infrastructure's[0] change[0] support[0] which[0] should[0] be[0] more[0] reliable[0] [[Sentence=-2,1=word max, 1-5]] it[0] also[0] fixes[0] a[0] bug[0] where[0] projects[0] were[0] marked[0] as[0] library[0] projects[0] which[0] should[0] not[0] have[0] be[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i496761f01c7ec28bf9170e4d1041211e3ebe285b[0] [[Sentence=-1,1=word max, 1-5]][[[1,-2 max of sentences]]]
840 commit 6462650a787c96cbb371d6aca201af3d613aad24 sdk manager dialog to enable 3rd party addons. - change addonuser dialog: transform current dialog in 2 pages. one is for user to add custom addon site urls (like the dialog was doing before, unchanged.) - other tab is to select which official addon sites should be enabled. - support enable/disable state for each source. - display disabled sources as such in the tree when in "per-repository" view. - persist the enable bit state via local pref file. - refactor a few inner classes out of packagespage. change-id: icc8e392d90550e53f1c76dd7aefb31669219973b 	840 commit 6462650a787c96cbb371d6aca201af3d613ad24 sdk manager dialog to enable 3rd party addons.<br> - change addonuser dialog: transform current dialog in 2 pages.<br> one is for user to add custom addon site urls (like the dialog was doing before, unchanged.<br> - other tab is to select which official addon sites should be enabled.<br> - support enable/disable state for each source.<br> - display disabled sources as such in the tree when in "per-repository" view.<br> - persist the enable bit state via local pref file.<br> - refactor a few inner classes out of packagespage.<br> change-id: icc8e392d90550e53f1c76dd7aefb31669219973b	1	-2	 840[0] commit[0] 6462650a787c96cbb371d6aca201af3d613aad24/6462650a787c96cbb371d6aca201af3d613ad24[0] sdk[0] manager[0] dialog[0] to[0] enable[0] 3rd[0] party[0] addons[0] [[Sentence=-1,1=word max, 1-5]] change[0] addonuser[0] dialog[0] transform[0] current[0] dialog[0] in[0] 2[0] pages[0] [[Sentence=-1,1=word max, 1-5]] one[0] is[0] for[0] user[0] to[0] add[0] custom[0] addon[0] site[0] urls[0] like[0] the[0] dialog[0] was[0] doing[0] before[0] unchanged[0] [[Sentence=-1,1=word max, 1-5]] other[0] tab[0] is[0] to[0] select[0] which[0] official[0] addon[0] sites[0] should[0] be[0] enabled[0] [[Sentence=-1,1=word max, 1-5]] support[0] enable/disable[0] state[0] for[0] each[0] source[-1] [[Sentence=-2,1=word max, 1-5]] display[0] disabled[0] sources[-1] as[0] such[0] in[0] the[0] tree[0] when[0] in[0] per[0] repository[0] view[0] [[Sentence=-2,1=word max, 1-5]] persist[0] the[0] enable[0] bit[0] state[0] via[0] local[0] pref[0] file[0] [[Sentence=-1,1=word max, 1-5]] refactor[0] a[0] few[0] inner[0] classes[0] out[0] of[0] packagespage[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] icc8e392d90550e53f1c76dd7aefb31669219973b[0] [[Sentence=-1,1=word max, 1-5]][[[1,-2 max of sentences]]]
952 commit f7900cb4967f007c9d2034d442dbc63445e9200a sdkcontroller: multitouch handler activity. also refactor some common code from the sensoractivity into the basebindingactivity. also rework the handler-to-ui update mechanism. change-id: i0a38b16ae2b2b4adb802298793cefa51b1a73104 	952 commit f7900cb4967f007c9d2034d442dbc63445e9200a sdkcontroller: multitouch handler activity.<br> also refactor some common code from the sensoractivity into the basebindingactivity.<br> also rework the handler-to-ui update mechanism.<br> change-id: i0a38b16ae2b2b4adb802298793cefa51b1a73104	1	-1	 952[0] commit[0] f7900cb4967f007c9d2034d442dbc63445e9200a[0] sdkcontroller[0] multitouch[0] handler[0] activity[0] [[Sentence=-1,1=word max, 1-5]] also[0] refactor[0] some[0] common[0] code[0] from[0] the[0] sensoractivity[0] into[0] the[0] basebindingactivity[0] [[Sentence=-1,1=word max, 1-5]] also[0] rework[0] the[0] handler[0] to[0] ui[0] update[0] mechanism[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i0a38b16ae2b2b4adb802298793cefa51b1a73104[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
1713 commit 3ce45b249f898697ae82e8c6dd045966227f3438 lint infrastructure improvements this changeset fixes a bunch of issues in the infrastructure: (1) it cleans up the context class quite a bit. it had some hardcoded xml stuff in it, which is now in a separate xmlcontext class (and there will be a javacontext class in the java support cl). it also hides a bunch of public fields, cleans up some unused stuff, and introduces a couple of wrapper methods to make detector code cleaner; in particular, rather than calling context.client.report(context, ... you can now just call context.report(... and similarly there are wrappers for logging and checking for disabled issues. (2) the iparser interface is renamed to idomparser since in the next cl there will also be an ijavaparser. some other related cleanup. (3) there is now a "location.handle" interface. this allows detectors to create light-weight location holders, and later on call handle.resolve() to create a full-fledged location. this is useful when detectors don't yet know whether they'll need a location for a node, but want to store it for later in case they do. as an example, the unused resource detector creates location handles for declaration and only resolves full locations for those that are found to be unused. locations can now carry custom messages. for example, for a duplicate id error, the secondary location now contains a "original declaration here" message. and the cli and html reports now include alternate locations in the output. some other location cleanup too; using factory methods to make the code cleaner, some default implementations that can be shared, etc. (4) there's a new sdk info class intended to provide sdk information from a tool client (such as resource resolution). it currently just contains parent-view information, used for the obsoletelayoutparams detector and an upcoming cl for a viewtypedetector. (5) the detector class now provides dummy implementations for the inner-interfaces, so we no longer need the adapter classes. this makes it easy to implement the xmlscanner or javascanner interfaces without needing to also stub out a bunch of methods. change-id: i4b3aaabe51febb25b000f9086703653bea6cf7c9 	1713 commit 3ce45b249f898697ae82e8c6dd045966227f3438 lint infrastructure improvements this changeset fixes a bunch of issues in the infrastructure: (1) it cleans up the context class quite a bit.<br> it had some hardcoded xml stuff in it, which is now in a separate xmlcontext class (and there will be a javacontext class in the java support cl)<br> it also hides a bunch of public fields, cleans up some unused stuff, and introduces a couple of wrapper methods to make detector code cleaner; in particular, rather than calling context.<br>client.<br>report(context, .<br> you can now just call context.<br>report(<br> and similarly there are wrappers for logging and checking for disabled issues.<br> (2) the iparser interface is renamed to idomparser since in the next cl there will also be an ijavaparser.<br> some other related cleanup.<br> (3) there is now a "location.<br>handle" interface.<br> this allows detectors to create light-weight location holders, and later on call handle.<br>resolve( to create a full-fledged location.<br> this is useful when detectors don't yet know whether they'll need a location for a node, but want to store it for later in case they do.<br> as an example, the unused resource detector creates location handles for declaration and only resolves full locations for those that are found to be unused.<br> locations can now carry custom messages.<br> for example, for a duplicate id error, the secondary location now contains a "original declaration here" message.<br> and the cli and html reports now include alternate locations in the output.<br> some other location cleanup too; using factory methods to make the code cleaner, some default implementations that can be shared, etc.<br> (4) there's a new sdk info class intended to provide sdk information from a tool client (such as resource resolution)<br> it currently just contains parent-view information, used for the obsoletelayoutparams detector and an upcoming cl for a viewtypedetector.<br> (5) the detector class now provides dummy implementations for the inner-interfaces, so we no longer need the adapter classes.<br> this makes it easy to implement the xmlscanner or javascanner interfaces without needing to also stub out a bunch of methods.<br> change-id: i4b3abe51febb25b00f9086703653bea6cf7c9	2	-1	 1713[0] commit[0] 3ce45b249f898697ae82e8c6dd045966227f3438[0] lint[0] infrastructure[0] improvements[1] this[0] changeset[0] fixes[0] a[0] bunch[0] of[0] issues[0] in[0] the[0] infrastructure[0] (1[0] it[0] cleans[0] up[0] the[0] context[0] class[0] quite[0] a[0] bit[0] [[Sentence=-1,2=word max, 1-5]] it[0] had[0] some[0] hardcoded[0] xml[0] stuff[0] in[0] it[0] which[0] is[0] now[0] in[0] a[0] separate[0] xmlcontext[0] class[0] and[0] there[0] will[0] be[0] a[0] javacontext[0] class[0] in[0] the[0] java[0] support[0] cl[0] [[Sentence=-1,1=word max, 1-5]] it[0] also[0] hides[0] a[0] bunch[0] of[0] public[0] fields[0] cleans[0] up[0] some[0] unused[0] stuff[0] and[0] introduces[0] a[0] couple[0] of[0] wrapper[0] methods[0] to[0] make[0] detector[0] code[0] cleaner[0] in[0] particular[0] rather[0] than[0] calling[0] context[0] [[Sentence=-1,1=word max, 1-5]] client[0] [[Sentence=-1,1=word max, 1-5]] report[0] context[0] [[Sentence=-1,1=word max, 1-5]] you[0] can[0] now[0] just[0] call[0] context[0] [[Sentence=-1,1=word max, 1-5]] report[0] [[Sentence=-1,1=word max, 1-5]] and[0] similarly[0] there[0] are[0] wrappers[0] for[0] logging[0] and[0] checking[0] for[0] disabled[0] issues[0] [[Sentence=-1,1=word max, 1-5]] (2[0] the[0] iparser[0] interface[0] is[0] renamed[0] to[0] idomparser[0] since[0] in[0] the[0] next[0] cl[0] there[0] will[0] also[0] be[0] an[0] ijavaparser[0] [[Sentence=-1,1=word max, 1-5]] some[0] other[0] related[0] cleanup[0] [[Sentence=-1,1=word max, 1-5]] (3[0] there[0] is[0] now[0] a[0] location[0] [[Sentence=-1,1=word max, 1-5]] handle[0] interface[0] [[Sentence=-1,1=word max, 1-5]] this[0] allows[0] detectors[0] to[0] create[0] light[0] weight[0] location[0] holders[0] and[0] later[0] on[0] call[0] handle[0] [[Sentence=-1,1=word max, 1-5]] resolve[0] to[0] create[0] a[0] full[0] fledged[0] location[0] [[Sentence=-1,1=word max, 1-5]] this[0] is[0] useful[1] when[0] detectors[0] don't[0] yet[0] know[0] whether[0] they'll[0] need[0] a[0] location[0] for[0] a[0] node[0] but[0] want[0] to[0] store[0] it[0] for[0] later[0] in[0] case[0] they[0] do[0] [[Sentence=-1,2=word max, 1-5]] as[0] an[0] example[0] the[0] unused[0] resource[0] detector[0] creates[0] location[0] handles[0] for[0] declaration[0] and[0] only[0] resolves[1] full[0] locations[0] for[0] those[0] that[0] are[0] found[0] to[0] be[0] unused[0] [[Sentence=-1,2=word max, 1-5]] locations[0] can[0] now[0] carry[0] custom[0] messages[0] [[Sentence=-1,1=word max, 1-5]] for[0] example[0] for[0] a[0] duplicate[0] id[0] error[0] the[0] secondary[0] location[0] now[0] contains[0] a[0] original[0] declaration[0] here[0] message[0] [[Sentence=-1,1=word max, 1-5]] and[0] the[0] cli[0] and[0] html[0] reports[0] now[0] include[0] alternate[0] locations[0] in[0] the[0] output[0] [[Sentence=-1,1=word max, 1-5]] some[0] other[0] location[0] cleanup[0] too[0] using[0] factory[0] methods[0] to[0] make[0] the[0] code[0] cleaner[0] some[0] default[-1][--1 LastWordBoosterStrength] implementations[0] that[0] can[0] be[0] shared[0] etc[0] [[Sentence=-1,1=word max, 1-5]] (4[0] there's[0] a[0] new[0] sdk[0] info[0] class[0] intended[0] to[0] provide[0] sdk[0] information[0] from[0] a[0] tool[0] client[0] such[0] as[0] resource[0] resolution[0] [[Sentence=-1,1=word max, 1-5]] it[0] currently[0] just[0] contains[0] parent[0] view[0] information[0] used[0] for[0] the[0] obsoletelayoutparams[0] detector[0] and[0] an[0] upcoming[0] cl[0] for[0] a[0] viewtypedetector[0] [[Sentence=-1,1=word max, 1-5]] (5[0] the[0] detector[0] class[0] now[0] provides[0] dummy[0] implementations[0] for[0] the[0] inner[0] interfaces[0] so[0] we[0] no[0] longer[0] need[0] the[0] adapter[0] classes[0] [[Sentence=-1,1=word max, 1-5]] this[0] makes[0] it[0] easy[0] to[0] implement[0] the[0] xmlscanner[0] or[0] javascanner[0] interfaces[0] without[0] needing[0] to[0] also[0] stub[0] out[0] a[0] bunch[0] of[0] methods[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i4b3aaabe51febb25b000f9086703653bea6cf7c9/i4b3abe51febb25b00f9086703653bea6cf7c9[0][+0.6 MultipleLetters] [[Sentence=-1,2=word max, 1-5]][[[2,-1 max of sentences]]]
2653 commit 78d3947aeebf2d8c0d17fe35d0fd94e53013b60e add/remove wrap_content when converting gridlayouts in gridlayout, the layout_width and layout_height attributes use wrap_content by default. we already avoid setting these on the elements themselves when dragging into the layout, but this changeset makes the change layout refactoring remove wrap_content attributes when converting to gridlayout, and adding them when converting from a gridlayout. when changing layouts, any layout params that are supported on the old parent layout, but not the new layout, are removed. however, this was not done for the non-layout attributes on the parent layout. this changeset also fixes that bug, so for example after converting a horizontal linearlayout to a relativelayout, the "orientation" attribute is removed. change-id: id25b80b567578bd5882c527bbe23115577ff7d61 	2653 commit 78d3947aeebf2d8c0d17fe35d0fd94e53013b60e add/remove wrap_content when converting gridlayouts in gridlayout, the layout_width and layout_height attributes use wrap_content by default.<br> we already avoid setting these on the elements themselves when dragging into the layout, but this changeset makes the change layout refactoring remove wrap_content attributes when converting to gridlayout, and adding them when converting from a gridlayout.<br> when changing layouts, any layout params that are supported on the old parent layout, but not the new layout, are removed.<br> however, this was not done for the non-layout attributes on the parent layout.<br> this changeset also fixes that bug, so for example after converting a horizontal linearlayout to a relativelayout, the "orientation" attribute is removed.<br> change-id: id25b80b567578bd5882c527bbe23115577ff7d61	2	-2	 2653[0] commit[0] 78d3947aeebf2d8c0d17fe35d0fd94e53013b60e[0] add/remove[0] wrap_content[0] when[0] converting[0] gridlayouts[0] in[0] gridlayout[0] the[0] layout_width[0] and[0] layout_height[0] attributes[0] use[0] wrap_content[0] by[0] default[-1] [[Sentence=-2,1=word max, 1-5]] we[0] already[0] avoid[-1] setting[0] these[0] on[0] the[0] elements[0] themselves[0] when[0] dragging[0] into[0] the[0] layout[0] but[0] this[0] changeset[0] makes[0] the[0] change[0] layout[0] refactoring[0] remove[0] wrap_content[0] attributes[0] when[0] converting[0] to[0] gridlayout[0] and[0] adding[0] them[0] when[0] converting[0] from[0] a[0] gridlayout[0] [[Sentence=-2,1=word max, 1-5]] when[0] changing[0] layouts[0] any[0] layout[0] params[0] that[0] are[0] supported[1] on[0] the[0] old[0] parent[0] layout[0] but[0] not[0] the[0] new[0] layout[0] are[0] removed[0] [[Sentence=-1,2=word max, 1-5]] however[0] this[0] was[0] not[0] done[0] for[0] the[0] non[0] layout[0] attributes[0] on[0] the[0] parent[0] layout[0] [[Sentence=-1,1=word max, 1-5]] this[0] changeset[0] also[0] fixes[0] that[0] bug[0] so[0] for[0] example[0] after[0] converting[0] a[0] horizontal[0] linearlayout[0] to[0] a[0] relativelayout[0] the[0] orientation[0] attribute[0] is[0] removed[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] id25b80b567578bd5882c527bbe23115577ff7d61[0] [[Sentence=-1,1=word max, 1-5]][[[2,-2 max of sentences]]]
3235 commit 122ed4977a42719239e501fc522592994267bd9d sdkmanager: fix issue with double-packages on reload. rewrote the merge in place   sort of packages by api. did some refactoring   added some unit tests. change-id: i168b306853185866606ed76c324a8db6051b15bb 	3235 commit 122ed4977a42719239e501fc522592994267bd9d sdkmanager: fix issue with double-packages on reload.<br> rewrote the merge in place   sort of packages by api.<br> did some refactoring   added some unit tests.<br> change-id: i168b30685318586606ed76c324a8db6051b15bb	1	-1	 3235[0] commit[0] 122ed4977a42719239e501fc522592994267bd9d[0] sdkmanager[0] fix[0] issue[0] with[0] double[0] packages[0] on[0] reload[0] [[Sentence=-1,1=word max, 1-5]] rewrote[0] the[0] merge[0] in[0] place[0] sort[0] of[0] packages[0] by[0] api[0] [[Sentence=-1,1=word max, 1-5]] did[0] some[0] refactoring[0] added[0] some[0] unit[0] tests[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i168b306853185866606ed76c324a8db6051b15bb/i168b30685318586606ed76c324a8db6051b15bb[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
3761 commit eacf5a536e29b366e6e2dcf6a80d86ad5241734c make extract include search in all files this changeset makes the "extract include" refactoring search not just the configuration-variations of the layout it was invoked on, but it will look for semantically identical xml fragments in all layouts in the same project, and will offer to replace each one of them with the new include. change-id: i03abf9e285d416e91b45eec7e01f518ea8d017d9 	3761 commit eacf5a536e29b366e6e2dcf6a80d86ad5241734c make extract include search in all files this changeset makes the "extract include" refactoring search not just the configuration-variations of the layout it was invoked on, but it will look for semantically identical xml fragments in all layouts in the same project, and will offer to replace each one of them with the new include.<br> change-id: i03abf9e285d416e91b45eec7e01f518ea8d017d9	1	-1	 3761[0] commit[0] eacf5a536e29b366e6e2dcf6a80d86ad5241734c[0] make[0] extract[0] include[0] search[0] in[0] all[0] files[0] this[0] changeset[0] makes[0] the[0] extract[0] include[0] refactoring[0] search[0] not[0] just[0] the[0] configuration[0] variations[0] of[0] the[0] layout[0] it[0] was[0] invoked[0] on[0] but[0] it[0] will[0] look[0] for[0] semantically[0] identical[0] xml[0] fragments[0] in[0] all[0] layouts[0] in[0] the[0] same[0] project[0] and[0] will[0] offer[0] to[0] replace[0] each[0] one[0] of[0] them[0] with[0] the[0] new[0] include[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i03abf9e285d416e91b45eec7e01f518ea8d017d9[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
3809 commit 9a802fd306aa12da7a5c770868ec16fb4c5621a5 merge: d7c4ca2 52188bb merge "sdk manager 2: refactor window implementation." 	3809 commit 9a802fd306a12da7a5c770868ec16fb4c5621a5 merge: d7c4ca2 52188bb merge "sdk manager 2: refactor window implementation.	1	-1	 3809[0] commit[0] 9a802fd306aa12da7a5c770868ec16fb4c5621a5/9a802fd306a12da7a5c770868ec16fb4c5621a5[0] merge[0] d7c4ca2[0] 52188bb[0] merge[0] sdk[0] manager[0] 2[0] refactor[0] window[0] implementation[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
3826 commit 52188bba8b3c61e9aafd5b0da4c173209a480d4e sdk manager 2: refactor window implementation. the previous patch based the implementation of the new window on top of the old updaterwindowimpl. although that works since there are many things in common, in practice the goal is to get rid of the old one eventually so it's easier to not add a dependency that needs to be removed later. change-id: ic1eac19dcc7e91d6750b7462eb2d28b447acad3a 	3826 commit 52188bba8b3c61e9afd5b0da4c173209a480d4e sdk manager 2: refactor window implementation.<br> the previous patch based the implementation of the new window on top of the old updaterwindowimpl.<br> although that works since there are many things in common, in practice the goal is to get rid of the old one eventually so it's easier to not add a dependency that needs to be removed later.<br> change-id: ic1eac19dcc7e91d6750b7462eb2d28b447acad3a	1	-2	 3826[0] commit[0] 52188bba8b3c61e9aafd5b0da4c173209a480d4e/52188bba8b3c61e9afd5b0da4c173209a480d4e[0] sdk[0] manager[0] 2[0] refactor[0] window[0] implementation[0] [[Sentence=-1,1=word max, 1-5]] the[0] previous[0] patch[0] based[0] the[0] implementation[0] of[0] the[0] new[0] window[0] on[0] top[0] of[0] the[0] old[0] updaterwindowimpl[0] [[Sentence=-1,1=word max, 1-5]] although[0] that[0] works[0] since[0] there[0] are[0] many[0] things[0] in[0] common[0] in[0] practice[0] the[0] goal[0] is[0] to[0] get[0] rid[-1] of[0] the[0] old[0] one[0] eventually[0] so[0] it's[0] easier[0] to[0] not[0] add[0] a[0] dependency[0] that[0] needs[0] to[0] be[0] removed[0] later[0] [[Sentence=-2,1=word max, 1-5]] change[0] id[0] ic1eac19dcc7e91d6750b7462eb2d28b447acad3a[0] [[Sentence=-1,1=word max, 1-5]][[[1,-2 max of sentences]]]
3973 commit 9e6db060854d0e890190919a27a1846f50f69d1a extract as include support for configuration variations first, add support for the "extract as include" refactoring to update all identical code fragments in configuration variations of the same file. for example, if you have a particular subtree of xml elements in a file that you have then duplicated into say a landscape mode, then applying the extract as include refactoring will locate the same code fragment in both files, and replace *both* code fragments with an include (and this is optional with a checkbox in the wizard dialog). this only happens when the extracted code fragment is "identical" in both files. the code fragments can vary in terms of xml formatting and attribute order (and namespace prefix choice), but the element hierarchy order, names, attributes defined and attribute values must be identical. second, make fixes to the change layout and change widget type refactorings such that when the id of the converted element is changed, then references to that id are updated as well. third, ensure that the refactorings are enabled even when there is no text selection; in that case the refactoring will apply to the element containing the caret. some test infrastructure improvements. change-id: idb4ba40f4217dba2b13881b3d06e269c80ba4b97 	3973 commit 9e6db060854d0e890190919a27a1846f50f69d1a extract as include support for configuration variations first, add support for the "extract as include" refactoring to update all identical code fragments in configuration variations of the same file.<br> for example, if you have a particular subtree of xml elements in a file that you have then duplicated into say a landscape mode, then applying the extract as include refactoring will locate the same code fragment in both files, and replace *both* code fragments with an include (and this is optional with a checkbox in the wizard dialog)<br> this only happens when the extracted code fragment is "identical" in both files.<br> the code fragments can vary in terms of xml formatting and attribute order (and namespace prefix choice) but the element hierarchy order, names, attributes defined and attribute values must be identical.<br> second, make fixes to the change layout and change widget type refactorings such that when the id of the converted element is changed, then references to that id are updated as well.<br> third, ensure that the refactorings are enabled even when there is no text selection; in that case the refactoring will apply to the element containing the caret.<br> some test infrastructure improvements.<br> change-id: idb4ba40f4217dba2b13881b3d06e269c80ba4b97	2	-1	 3973[0] commit[0] 9e6db060854d0e890190919a27a1846f50f69d1a[0] extract[0] as[0] include[0] support[0] for[0] configuration[0] variations[0] first[0] add[0] support[0] for[0] the[0] extract[0] as[0] include[0] refactoring[0] to[0] update[0] all[0] identical[0] code[0] fragments[0] in[0] configuration[0] variations[0] of[0] the[0] same[0] file[0] [[Sentence=-1,1=word max, 1-5]] for[0] example[0] if[0] you[0] have[0] a[0] particular[0] subtree[0] of[0] xml[0] elements[0] in[0] a[0] file[0] that[0] you[0] have[0] then[0] duplicated[0] into[0] say[0] a[0] landscape[0] mode[0] then[0] applying[0] the[0] extract[0] as[0] include[0] refactoring[0] will[0] locate[0] the[0] same[0] code[0] fragment[0] in[0] both[0] files[0] and[0] replace[0] both[0] code[0] fragments[0] with[0] an[0] include[0] and[0] this[0] is[0] optional[0] with[0] a[0] checkbox[0] in[0] the[0] wizard[0] dialog[0] [[Sentence=-1,1=word max, 1-5]] this[0] only[0] happens[0] when[0] the[0] extracted[0] code[0] fragment[0] is[0] identical[0] in[0] both[0] files[0] [[Sentence=-1,1=word max, 1-5]] the[0] code[0] fragments[0] can[0] vary[0] in[0] terms[0] of[0] xml[0] formatting[0] and[0] attribute[0] order[0] and[0] namespace[0] prefix[0] choice[0] but[0] the[0] element[0] hierarchy[0] order[0] names[0] attributes[0] defined[0] and[0] attribute[0] values[1] must[0] be[0] identical[0] [[Sentence=-1,2=word max, 1-5]] second[0] make[0] fixes[0] to[0] the[0] change[0] layout[0] and[0] change[0] widget[0] type[0] refactorings[0] such[0] that[0] when[0] the[0] id[0] of[0] the[0] converted[0] element[0] is[0] changed[0] then[0] references[0] to[0] that[0] id[0] are[0] updated[0] as[0] well[0] [[Sentence=-1,1=word max, 1-5]] third[0] ensure[0] that[0] the[0] refactorings[0] are[0] enabled[0] even[0] when[0] there[0] is[0] no[0] text[0] selection[0] in[0] that[0] case[0] the[0] refactoring[0] will[0] apply[0] to[0] the[0] element[0] containing[0] the[0] caret[0] [[Sentence=-1,1=word max, 1-5]] some[0] test[0] infrastructure[0] improvements[1] [[Sentence=-1,2=word max, 1-5]] change[0] id[0] idb4ba40f4217dba2b13881b3d06e269c80ba4b97[0] [[Sentence=-1,1=word max, 1-5]][[[2,-1 max of sentences]]]
3983 commit 5e4103bba9ff1b8a0faaee7fb70504ca515d796b merge: 403096e 86be31d merge "a bit more refactoring around the resource repository." 	3983 commit 5e4103bba9ff1b8a0faee7fb70504ca515d796b merge: 403096e 86be31d merge "a bit more refactoring around the resource repository.	1	-1	 3983[0] commit[0] 5e4103bba9ff1b8a0faaee7fb70504ca515d796b/5e4103bba9ff1b8a0faee7fb70504ca515d796b[0] merge[0] 403096e[0] 86be31d[0] merge[0] a[0] bit[0] more[0] refactoring[0] around[0] the[0] resource[0] repository[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
3984 commit 86be31dde602ef2af040a73940849d0c66c9991f a bit more refactoring around the resource repository. - move configurable in the same package as folderconfiguration. - move resourcemanager.getconfig in folderconfiguration. - move resourcemaanger.processfolder in resourcerepository. - move resourcemanager.processfile in resourcefolder. - rename some misc methods. change-id: ifa557c7db22c3fb82327a68f4365c08d152d9cf4 	3984 commit 86be31dde602ef2af040a73940849d0c66c991f a bit more refactoring around the resource repository.<br> - move configurable in the same package as folderconfiguration.<br> - move resourcemanager.<br>getconfig in folderconfiguration.<br> - move resourcemanger.<br>processfolder in resourcerepository.<br> - move resourcemanager.<br>processfile in resourcefolder.<br> - rename some misc methods.<br> change-id: ifa557c7db22c3fb82327a68f4365c08d152d9cf4	1	-1	 3984[0] commit[0] 86be31dde602ef2af040a73940849d0c66c9991f/86be31dde602ef2af040a73940849d0c66c991f[0] a[0] bit[0] more[0] refactoring[0] around[0] the[0] resource[0] repository[0] [[Sentence=-1,1=word max, 1-5]] move[0] configurable[0] in[0] the[0] same[0] package[0] as[0] folderconfiguration[0] [[Sentence=-1,1=word max, 1-5]] move[0] resourcemanager[0] [[Sentence=-1,1=word max, 1-5]] getconfig[0] in[0] folderconfiguration[0] [[Sentence=-1,1=word max, 1-5]] move[0] resourcemaanger/resourcemanger[0] [[Sentence=-1,1=word max, 1-5]] processfolder[0] in[0] resourcerepository[0] [[Sentence=-1,1=word max, 1-5]] move[0] resourcemanager[0] [[Sentence=-1,1=word max, 1-5]] processfile[0] in[0] resourcefolder[0] [[Sentence=-1,1=word max, 1-5]] rename[0] some[0] misc[0] methods[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] ifa557c7db22c3fb82327a68f4365c08d152d9cf4[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
4038 commit 9be69095bcb0d56373c0a0e52f0b3840aa0df127 merge: d4192b5 0757ce4 merge "more refactoring work: convert hierarchy, and change type" 	4038 commit 9be69095bcb0d56373c0a0e52f0b3840a0df127 merge: d4192b5 0757ce4 merge "more refactoring work: convert hierarchy, and change type"	1	-1	 4038[0] commit[0] 9be69095bcb0d56373c0a0e52f0b3840aa0df127/9be69095bcb0d56373c0a0e52f0b3840a0df127[0] merge[0] d4192b5[0] 0757ce4[0] merge[0] more[0] refactoring[0] work[0] convert[0] hierarchy[0] and[0] change[0] type[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
4045 commit 0757ce4af2764e4dd564acc0b1a013e910abc8da more refactoring work: convert hierarchy, and change type a lot of work on the "change layout" refactoring to improve conversion to a relative layout. first, add a "flatten hierarchy" option which can take an entire hierarchy of layout widgets and flatten it down to a single top level relativelayout where the constraints attempt to reflect the original layout. (this isn't always possible, since some layout managers offer features not possible to express in relativelayout, such as a linearlayout with multiple different weights) but it often works or is at least a good start. (this work is ongoing, but since my changeset is getting large i want to check in this snapshot since the functionality is better than what is in the trunk.) this changeset also adds a new refactoring: change widget type. this can be applied to a selection of elements, and it will convert the widget type to the new target widget type. it will also remove any attributes that are not valid for the new layout. it also improves the wizards which display the possible target types. for change widget type, it will first offer "related" widgets, so for an analogclock it will first offer digital clock, for a checkbox it will offer a checked text view and a radio button, etc. in addition, it will list views and layouts that it finds in any library jars (except for the builtin android ones), and any custom view classes in the project. there is also now some preliminary support for refactoring unit tests. these tests must be run as eclipse plugin tests, since they utilize the xml model (and the xml model cannot be mocked). the test infrastructure reads source xml files, applies the refactoring change list to them, and diffs the output with the known expected output (also stored as result xml files in the test project). finally, there are a number of fixes and improvements to the shared refactoring code. change-id: i0974653e530dfb4feb625e0eef8257c29d50614b 	4045 commit 0757ce4af2764e4dd564acc0b1a013e910abc8da more refactoring work: convert hierarchy, and change type a lot of work on the "change layout" refactoring to improve conversion to a relative layout.<br> first, add a "flatten hierarchy" option which can take an entire hierarchy of layout widgets and flatten it down to a single top level relativelayout where the constraints attempt to reflect the original layout.<br> (this isn't always possible, since some layout managers offer features not possible to express in relativelayout, such as a linearlayout with multiple different weights) but it often works or is at least a good start.<br> (this work is ongoing, but since my changeset is getting large i want to check in this snapshot since the functionality is better than what is in the trunk.<br> this changeset also adds a new refactoring: change widget type.<br> this can be applied to a selection of elements, and it will convert the widget type to the new target widget type.<br> it will also remove any attributes that are not valid for the new layout.<br> it also improves the wizards which display the possible target types.<br> for change widget type, it will first offer "related" widgets, so for an analogclock it will first offer digital clock, for a checkbox it will offer a checked text view and a radio button, etc.<br> in addition, it will list views and layouts that it finds in any library jars (except for the builtin android ones) and any custom view classes in the project.<br> there is also now some preliminary support for refactoring unit tests.<br> these tests must be run as eclipse plugin tests, since they utilize the xml model (and the xml model cannot be mocked)<br> the test infrastructure reads source xml files, applies the refactoring change list to them, and diffs the output with the known expected output (also stored as result xml files in the test project)<br> finally, there are a number of fixes and improvements to the shared refactoring code.<br> change-id: i0974653e530dfb4feb625e0eef8257c29d50614b	3	-2	 4045[0] commit[0] 0757ce4af2764e4dd564acc0b1a013e910abc8da[0] more[0] refactoring[0] work[0] convert[0] hierarchy[0] and[0] change[0] type[0] a[0] lot[0] of[0] work[0] on[0] the[0] change[0] layout[0] refactoring[0] to[0] improve[1] conversion[0] to[0] a[0] relative[0] layout[0] [[Sentence=-1,2=word max, 1-5]] first[0] add[0] a[0] flatten[0] hierarchy[0] option[0] which[0] can[0] take[0] an[0] entire[0] hierarchy[0] of[0] layout[0] widgets[0] and[0] flatten[0] it[0] down[0] to[0] a[0] single[0] top[0] level[0] relativelayout[0] where[0] the[0] constraints[0] attempt[0] to[0] reflect[0] the[0] original[0] layout[0] [[Sentence=-1,1=word max, 1-5]] this[0] isn't[0] always[0] possible[0] since[0] some[0] layout[0] managers[0] offer[0] features[0] not[0] possible[0] to[0] express[0] in[0] relativelayout[0] such[0] as[0] a[0] linearlayout[0] with[0] multiple[0] different[0] weights[0] but[0] it[0] often[0] works[0] or[0] is[0] at[0] least[0] a[0] good[1] start[0] [[Sentence=-1,2=word max, 1-5]] this[0] work[0] is[0] ongoing[0] but[0] since[0] my[0] changeset[0] is[0] getting[0] large[0] i[0] want[0] to[0] check[0] in[0] this[0] snapshot[0] since[0] the[0] functionality[0] is[0] better[0] than[0] what[0] is[0] in[0] the[0] trunk[0] [[Sentence=-1,1=word max, 1-5]] this[0] changeset[0] also[0] adds[0] a[0] new[0] refactoring[0] change[0] widget[0] type[0] [[Sentence=-1,1=word max, 1-5]] this[0] can[0] be[0] applied[0] to[0] a[0] selection[0] of[0] elements[0] and[0] it[0] will[0] convert[0] the[0] widget[0] type[0] to[0] the[0] new[0] target[0] widget[0] type[0] [[Sentence=-1,1=word max, 1-5]] it[0] will[0] also[0] remove[0] any[0] attributes[0] that[0] are[0] not[0] valid[0] for[0] the[0] new[0] layout[0] [[Sentence=-1,1=word max, 1-5]] it[0] also[0] improves[1] the[0] wizards[0] which[0] display[0] the[0] possible[0] target[0] types[0] [[Sentence=-1,2=word max, 1-5]] for[0] change[0] widget[0] type[0] it[0] will[0] first[0] offer[0] related[0] widgets[0] so[0] for[0] an[0] analogclock[0] it[0] will[0] first[0] offer[0] digital[0] clock[0] for[0] a[0] checkbox[0] it[0] will[0] offer[0] a[0] checked[0] text[0] view[0] and[0] a[0] radio[0] button[0] etc[0] [[Sentence=-1,1=word max, 1-5]] in[0] addition[0] it[0] will[0] list[0] views[0] and[0] layouts[0] that[0] it[0] finds[0] in[0] any[0] library[0] jars[0] except[0] for[0] the[0] builtin[0] android[0] ones[0] and[0] any[0] custom[0] view[0] classes[0] in[0] the[0] project[0] [[Sentence=-1,1=word max, 1-5]] there[0] is[0] also[0] now[0] some[0] preliminary[0] support[0] for[0] refactoring[0] unit[0] tests[0] [[Sentence=-1,1=word max, 1-5]] these[0] tests[0] must[0] be[0] run[0] as[0] eclipse[0] plugin[0] tests[0] since[0] they[0] utilize[0] the[0] xml[0] model[0] and[0] the[0] xml[0] model[0] cannot[0] be[0] mocked[-2][NegatedDueToPreviousWord] [[Sentence=-1,3=word max, 1-5]] the[0] test[0] infrastructure[0] reads[0] source[-1] xml[0] files[0] applies[0] the[0] refactoring[0] change[0] list[0] to[0] them[0] and[0] diffs[0] the[0] output[0] with[0] the[0] known[0] expected[0] output[0] also[0] stored[0] as[0] result[0] xml[0] files[0] in[0] the[0] test[0] project[0] [[Sentence=-2,1=word max, 1-5]] finally[0] there[0] are[0] a[0] number[0] of[0] fixes[0] and[0] improvements[1] to[0] the[0] shared[0] refactoring[0] code[0] [[Sentence=-1,2=word max, 1-5]] change[0] id[0] i0974653e530dfb4feb625e0eef8257c29d50614b[0] [[Sentence=-1,1=word max, 1-5]][[[3,-2 max of sentences]]]
4087 commit 7c6a3d2fa9361fdd473d74f4e335bdbd914a95e5 merge: 5ec81d7 8dc4366 merge "refactoring: wrap in container, change layout type, extract" 	4087 commit 7c6a3d2fa9361fdd473d74f4e335bdbd914a95e5 merge: 5ec81d7 8dc4366 merge "refactoring: wrap in container, change layout type, extract"	1	-1	 4087[0] commit[0] 7c6a3d2fa9361fdd473d74f4e335bdbd914a95e5[0] merge[0] 5ec81d7[0] 8dc4366[0] merge[0] refactoring[0] wrap[0] in[0] container[0] change[0] layout[0] type[0] extract[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
4088 commit 8dc4366bbaad39d56e1c2ded4046c86a95a17666 refactoring: wrap in container, change layout type, extract this changeset adds refactoring support for 3 visual refactoring operations: (1) wrap in container. this can be invoked on one or more sibling views (or the root view) to add a new layout container into the hierarchy which "wraps" the views. the refactoring can also update the layout attributes (such as relativelayout attachments) such that they refer to the new container instead. if invoked on the root element, the namespace declarations are migrated from the old root to the new root. (2) change layout. this can be invoked on a layout view to change the type of layout. in addition to editing the xml type declaration, it also removes layout parameters that no longer apply, and depending on which layout you are converting from and converting to, it may attempt to perform some translation to preserve the layout characteristics. in particular, if you convert from a linearlayout to a relativelayout, then it will use relativelayout params to emulate the old linearlayout by attaching items below (for vertical layouts) or to the right of (for horizontal layout) the previous sibling, and if the baseline property was set on the linearlayout it will also add baseline constraints on the relativelayout. (it also adds default ids on any elements that need it.) there is a lot more we can do to support layout transformations; this is just a beginning. (3) extract as include. we already had this feature, but it performed its own xml document manipulation. this code has been rewritten to use the eclipse refactoring support (which the other two refactorings are implemented to use as well), which among other things means that you get preview support - you can press preview from the refactoring dialog to see the edits before they are made. this rewrite is also necessary to support an upcoming feature: the ability to replace occurrences in other configuration-variations of this layout; for that we need to ability to do multi-file changes which the refactoring support is ideal for. change-id: i50b142645f14c29c798fc02df6df69bad5b9426c 	4088 commit 8dc4366bbad39d56e1c2ded4046c86a95a1766 refactoring: wrap in container, change layout type, extract this changeset adds refactoring support for 3 visual refactoring operations: (1) wrap in container.<br> this can be invoked on one or more sibling views (or the root view) to add a new layout container into the hierarchy which "wraps" the views.<br> the refactoring can also update the layout attributes (such as relativelayout attachments) such that they refer to the new container instead.<br> if invoked on the root element, the namespace declarations are migrated from the old root to the new root.<br> (2) change layout.<br> this can be invoked on a layout view to change the type of layout.<br> in addition to editing the xml type declaration, it also removes layout parameters that no longer apply, and depending on which layout you are converting from and converting to, it may attempt to perform some translation to preserve the layout characteristics.<br> in particular, if you convert from a linearlayout to a relativelayout, then it will use relativelayout params to emulate the old linearlayout by attaching items below (for vertical layouts) or to the right of (for horizontal layout) the previous sibling, and if the baseline property was set on the linearlayout it will also add baseline constraints on the relativelayout.<br> (it also adds default ids on any elements that need it.<br> there is a lot more we can do to support layout transformations; this is just a beginning.<br> (3) extract as include.<br> we already had this feature, but it performed its own xml document manipulation.<br> this code has been rewritten to use the eclipse refactoring support (which the other two refactorings are implemented to use as well) which among other things means that you get preview support - you can press preview from the refactoring dialog to see the edits before they are made.<br> this rewrite is also necessary to support an upcoming feature: the ability to replace occurrences in other configuration-variations of this layout; for that we need to ability to do multi-file changes which the refactoring support is ideal for.<br> change-id: i50b142645f14c29c798fc02df6df69bad5b9426c	2	-2	 4088[0] commit[0] 8dc4366bbaad39d56e1c2ded4046c86a95a17666/8dc4366bbad39d56e1c2ded4046c86a95a1766[0][+0.6 MultipleLetters] refactoring[0] wrap[0] in[0] container[0] change[0] layout[0] type[0] extract[0] this[0] changeset[0] adds[0] refactoring[0] support[0] for[0] 3[0] visual[0] refactoring[0] operations[0] (1[0] wrap[0] in[0] container[0] [[Sentence=-1,2=word max, 1-5]] this[0] can[0] be[0] invoked[0] on[0] one[0] or[0] more[0] sibling[0] views[0] or[0] the[0] root[0] view[0] to[0] add[0] a[0] new[0] layout[0] container[0] into[0] the[0] hierarchy[0] which[0] wraps[0] the[0] views[0] [[Sentence=-1,1=word max, 1-5]] the[0] refactoring[0] can[0] also[0] update[0] the[0] layout[0] attributes[0] such[0] as[0] relativelayout[0] attachments[0] such[0] that[0] they[0] refer[0] to[0] the[0] new[0] container[0] instead[0] [[Sentence=-1,1=word max, 1-5]] if[0] invoked[0] on[0] the[0] root[0] element[0] the[0] namespace[0] declarations[0] are[0] migrated[0] from[0] the[0] old[0] root[0] to[0] the[0] new[0] root[0] [[Sentence=-1,1=word max, 1-5]] (2[0] change[0] layout[0] [[Sentence=-1,1=word max, 1-5]] this[0] can[0] be[0] invoked[0] on[0] a[0] layout[0] view[0] to[0] change[0] the[0] type[0] of[0] layout[0] [[Sentence=-1,1=word max, 1-5]] in[0] addition[0] to[0] editing[0] the[0] xml[0] type[0] declaration[0] it[0] also[0] removes[0] layout[0] parameters[0] that[0] no[0] longer[0] apply[0] and[0] depending[0] on[0] which[0] layout[0] you[0] are[0] converting[0] from[0] and[0] converting[0] to[0] it[0] may[0] attempt[0] to[0] perform[0] some[0] translation[0] to[0] preserve[0] the[0] layout[0] characteristics[0] [[Sentence=-1,1=word max, 1-5]] in[0] particular[0] if[0] you[0] convert[0] from[0] a[0] linearlayout[0] to[0] a[0] relativelayout[0] then[0] it[0] will[0] use[0] relativelayout[0] params[0] to[0] emulate[0] the[0] old[0] linearlayout[0] by[0] attaching[0] items[0] below[0] for[0] vertical[0] layouts[0] or[0] to[0] the[0] right[0] of[0] for[0] horizontal[0] layout[0] the[0] previous[0] sibling[0] and[0] if[0] the[0] baseline[0] property[0] was[0] set[0] on[0] the[0] linearlayout[0] it[0] will[0] also[0] add[0] baseline[0] constraints[0] on[0] the[0] relativelayout[0] [[Sentence=-1,1=word max, 1-5]] it[0] also[0] adds[0] default[-1] ids[0] on[0] any[0] elements[0] that[0] need[0] it[0] [[Sentence=-2,1=word max, 1-5]] there[0] is[0] a[0] lot[0] more[0] we[0] can[0] do[0] to[0] support[0] layout[0] transformations[0] this[0] is[0] just[0] a[0] beginning[0] [[Sentence=-1,1=word max, 1-5]] (3[0] extract[0] as[0] include[0] [[Sentence=-1,1=word max, 1-5]] we[0] already[0] had[0] this[0] feature[0] but[0] it[0] performed[0] its[0] own[0] xml[0] document[0] manipulation[-1] [[Sentence=-2,1=word max, 1-5]] this[0] code[0] has[0] been[0] rewritten[0] to[0] use[0] the[0] eclipse[0] refactoring[0] support[0] which[0] the[0] other[0] two[0] refactorings[0] are[0] implemented[0] to[0] use[0] as[0] well[0] which[0] among[0] other[0] things[0] means[0] that[0] you[0] get[0] preview[0] support[0] you[0] can[0] press[0] preview[0] from[0] the[0] refactoring[0] dialog[0] to[0] see[0] the[0] edits[0] before[0] they[0] are[0] made[0] [[Sentence=-1,1=word max, 1-5]] this[0] rewrite[0] is[0] also[0] necessary[0] to[0] support[0] an[0] upcoming[0] feature[0] the[0] ability[0] to[0] replace[0] occurrences[0] in[0] other[0] configuration[0] variations[0] of[0] this[0] layout[0] for[0] that[0] we[0] need[0] to[0] ability[0] to[0] do[0] multi[0] file[0] changes[0] which[0] the[0] refactoring[0] support[0] is[0] ideal[0] for[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i50b142645f14c29c798fc02df6df69bad5b9426c[0] [[Sentence=-1,1=word max, 1-5]][[[2,-2 max of sentences]]]
4633 commit 18284d7b4da35a990268f51cdab0abc3a8e6e061 merge: 77e0fde 95b17a5 merge "layoutlib api refactoring" 	4633 commit 18284d7b4da35a990268f51cdab0abc3a8e6e061 merge: 77e0fde 95b17a5 merge "layoutlib api refactoring"	1	-1	 4633[0] commit[0] 18284d7b4da35a990268f51cdab0abc3a8e6e061[0] merge[0] 77e0fde[0] 95b17a5[0] merge[0] layoutlib[0] api[0] refactoring[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
4634 commit 95b17a5e62eeeb7b38ef668508df43a1ee9e0880 layoutlib api refactoring change-id: i40abba4c4f786755c2a1c0e70df4d7bc08e2bcde 	4634 commit 95b17a5e62eeb7b38ef668508df43a1ee9e0880 layoutlib api refactoring change-id: i40abba4c4f786755c2a1c0e70df4d7bc08e2bcde	1	-1	 4634[0] commit[0] 95b17a5e62eeeb7b38ef668508df43a1ee9e0880/95b17a5e62eeb7b38ef668508df43a1ee9e0880[0] layoutlib[0] api[0] refactoring[0] change[0] id[0] i40abba4c4f786755c2a1c0e70df4d7bc08e2bcde[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
5068 commit b293bb776f0e48674fb5f6e6a822a23011dab305 merge: 12479c5 83dba50 merge "add gesture support, marquee selection, and refactoring" 	5068 commit b293bb776f0e48674fb5f6e6a822a23011dab305 merge: 12479c5 83dba50 merge "add gesture support, marquee selection, and refactoring"	1	-1	 5068[0] commit[0] b293bb776f0e48674fb5f6e6a822a23011dab305[0] merge[0] 12479c5[0] 83dba50[0] merge[0] add[0] gesture[0] support[0] marquee[0] selection[0] and[0] refactoring[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
5072 commit 83dba505e22985fd2f9414e7c6ef14ce29d31713 add gesture support, marquee selection, and refactoring this checkin adds support for gestures and overlays. gestures are sessions of mouse/keyboard activity, and this is documented in the javadoc for the new gesture class. overlays are units of graphics, and these are documented in the overlay javadoc. the gesture architecture lets us isolate the logic for each different type of operation (marquee, resize, move, etc), and with associated overlays we don't attempt to for example paint drag feedback during a resize operation, etc. the checkin also adds marquee selection (as a second gesture, in addition to the existing drag & drop based move gesture), along with some associated changes in how the root view is treated. as part of isolating the mouse handling and painting related to gestures, painting etc., i also refactored the code quite a bit. layoutcanvas which used to be a large class has been split into a number of new classes, one for each area of responsibility: - the mouse listener and drag & drop code has been moved into a gesturemanager. (a lot of the drop handling code also came from the canvasdroplistener class.) - code related to maintaining the set of rendered views, and performing searches in the views, has been moved into a viewhierarchy class. - code related to selection has been moved into a selectionmanager. - various individual painting pieces (outline, hover, etc) have been moved into individual overlay classes such as outlineoverlay, hoveroverlay, selectionoverlay, etc. this also moved associated resource allocation and cleanup into the overlays. - new coordinate classes, controlpoint and layoutpoint, are used instead of ints and plain points to make it really clear which methods require coordinates in the layout (such as the viewhieararchy search methods) and which ones require coordinates in the canvas control (such as paint methods). there are factory methods to automatically construct the right kind of coordinate from different types of mouse events, as well as methods to convert between the two. i also tweaked the visual appearance of selection a bit more, and some other misc cleanup. change-id: i666aabdcd36720bebe406b68237e8966d985fb8f 	5072 commit 83dba505e22985fd2f9414e7c6ef14ce29d31713 add gesture support, marquee selection, and refactoring this checkin adds support for gestures and overlays.<br> gestures are sessions of mouse/keyboard activity, and this is documented in the javadoc for the new gesture class.<br> overlays are units of graphics, and these are documented in the overlay javadoc.<br> the gesture architecture lets us isolate the logic for each different type of operation (marquee, resize, move, etc) and with associated overlays we don't attempt to for example paint drag feedback during a resize operation, etc.<br> the checkin also adds marquee selection (as a second gesture, in addition to the existing drag & drop based move gesture) along with some associated changes in how the root view is treated.<br> as part of isolating the mouse handling and painting related to gestures, painting etc.<br> i also refactored the code quite a bit.<br> layoutcanvas which used to be a large class has been split into a number of new classes, one for each area of responsibility: - the mouse listener and drag & drop code has been moved into a gesturemanager.<br> (a lot of the drop handling code also came from the canvasdroplistener class.<br> - code related to maintaining the set of rendered views, and performing searches in the views, has been moved into a viewhierarchy class.<br> - code related to selection has been moved into a selectionmanager.<br> - various individual painting pieces (outline, hover, etc) have been moved into individual overlay classes such as outlineoverlay, hoveroverlay, selectionoverlay, etc.<br> this also moved associated resource allocation and cleanup into the overlays.<br> - new coordinate classes, controlpoint and layoutpoint, are used instead of ints and plain points to make it really clear which methods require coordinates in the layout (such as the viewhieararchy search methods) and which ones require coordinates in the canvas control (such as paint methods)<br> there are factory methods to automatically construct the right kind of coordinate from different types of mouse events, as well as methods to convert between the two.<br> i also tweaked the visual appearance of selection a bit more, and some other misc cleanup.<br> change-id: i66abdcd36720bebe406b68237e8966d985fb8f	2	-2	 5072[0] commit[0] 83dba505e22985fd2f9414e7c6ef14ce29d31713[0] add[0] gesture[0] support[0] marquee[0] selection[0] and[0] refactoring[0] this[0] checkin[0] adds[0] support[0] for[0] gestures[0] and[0] overlays[0] [[Sentence=-1,1=word max, 1-5]] gestures[0] are[0] sessions[0] of[0] mouse/keyboard[0] activity[0] and[0] this[0] is[0] documented[0] in[0] the[0] javadoc[0] for[0] the[0] new[0] gesture[0] class[0] [[Sentence=-1,1=word max, 1-5]] overlays[0] are[0] units[0] of[0] graphics[0] and[0] these[0] are[0] documented[0] in[0] the[0] overlay[0] javadoc[0] [[Sentence=-1,1=word max, 1-5]] the[0] gesture[0] architecture[0] lets[0] us[0] isolate[-1] the[0] logic[0] for[0] each[0] different[0] type[0] of[0] operation[0] marquee[0] resize[0] move[0] etc[0] and[0] with[0] associated[0] overlays[0] we[0] don't[0] attempt[0] to[0] for[0] example[0] paint[0] drag[0] feedback[0] during[0] a[0] resize[0] operation[0] etc[0] [[Sentence=-2,1=word max, 1-5]] the[0] checkin[0] also[0] adds[0] marquee[0] selection[0] as[0] a[0] second[0] gesture[0] in[0] addition[0] to[0] the[0] existing[0] drag[0] &[0] drop[-1] based[0] move[0] gesture[0] along[0] with[0] some[0] associated[0] changes[0] in[0] how[0] the[0] root[0] view[0] is[0] treated[0] [[Sentence=-2,1=word max, 1-5]] as[0] part[0] of[0] isolating[-1] the[0] mouse[0] handling[0] and[0] painting[0] related[0] to[0] gestures[0] painting[0] etc[0] [[Sentence=-2,1=word max, 1-5]] i[0] also[0] refactored[0] the[0] code[0] quite[0] a[0] bit[0] [[Sentence=-1,1=word max, 1-5]] layoutcanvas[0] which[0] used[0] to[0] be[0] a[0] large[0] class[0] has[0] been[0] split[0] into[0] a[0] number[0] of[0] new[0] classes[0] one[0] for[0] each[0] area[0] of[0] responsibility[0] the[0] mouse[0] listener[0] and[0] drag[0] &[0] drop[-1] code[0] has[0] been[0] moved[0] into[0] a[0] gesturemanager[0] [[Sentence=-2,1=word max, 1-5]] a[0] lot[0] of[0] the[0] drop[-1] handling[0] code[0] also[0] came[0] from[0] the[0] canvasdroplistener[0] class[0] [[Sentence=-2,1=word max, 1-5]] code[0] related[0] to[0] maintaining[0] the[0] set[0] of[0] rendered[0] views[0] and[0] performing[0] searches[0] in[0] the[0] views[0] has[0] been[0] moved[0] into[0] a[0] viewhierarchy[0] class[0] [[Sentence=-1,1=word max, 1-5]] code[0] related[0] to[0] selection[0] has[0] been[0] moved[0] into[0] a[0] selectionmanager[0] [[Sentence=-1,1=word max, 1-5]] various[0] individual[0] painting[0] pieces[0] outline[0] hover[0] etc[0] have[0] been[0] moved[0] into[0] individual[0] overlay[0] classes[0] such[0] as[0] outlineoverlay[0] hoveroverlay[0] selectionoverlay[0] etc[0] [[Sentence=-1,1=word max, 1-5]] this[0] also[0] moved[0] associated[0] resource[0] allocation[0] and[0] cleanup[0] into[0] the[0] overlays[0] [[Sentence=-1,1=word max, 1-5]] new[0] coordinate[0] classes[0] controlpoint[0] and[0] layoutpoint[0] are[0] used[0] instead[0] of[0] ints[0] and[0] plain[0] points[0] to[0] make[0] it[0] really[0] clear[0] which[0] methods[0] require[0] coordinates[0] in[0] the[0] layout[0] such[0] as[0] the[0] viewhieararchy[0] search[0] methods[0] and[0] which[0] ones[0] require[0] coordinates[0] in[0] the[0] canvas[0] control[0] such[0] as[0] paint[0] methods[0] [[Sentence=-1,1=word max, 1-5]] there[0] are[0] factory[0] methods[0] to[0] automatically[0] construct[0] the[0] right[0] kind[1] of[0] coordinate[0] from[0] different[0] types[0] of[0] mouse[0] events[0] as[0] well[0] as[0] methods[0] to[0] convert[0] between[0] the[0] two[0] [[Sentence=-1,2=word max, 1-5]] i[0] also[0] tweaked[0] the[0] visual[0] appearance[0] of[0] selection[0] a[0] bit[0] more[0] and[0] some[0] other[0] misc[0] cleanup[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i666aabdcd36720bebe406b68237e8966d985fb8f/i66abdcd36720bebe406b68237e8966d985fb8f[0][+0.6 MultipleLetters] [[Sentence=-1,2=word max, 1-5]][[[2,-2 max of sentences]]]
5494 commit 315d4e3193144c3dd917b9a73bfcc91dfe931f02 gle2: fix comments, refactor context menu code. simple refactor of the main method populating the dynamic context menu. it was started to grow a bit too much. also added some comments to explain what's going on. change-id: id58779da5082bb454c1bcae914582e4471364a12 	5494 commit 315d4e3193144c3dd917b9a73bfcc91dfe931f02 gle2: fix comments, refactor context menu code.<br> simple refactor of the main method populating the dynamic context menu.<br> it was started to grow a bit too much.<br> also added some comments to explain what's going on.<br> change-id: id58779da5082bb454c1bcae914582e4471364a12	1	-1	 5494[0] commit[0] 315d4e3193144c3dd917b9a73bfcc91dfe931f02[0] gle2[0] fix[0] comments[0] refactor[0] context[0] menu[0] code[0] [[Sentence=-1,1=word max, 1-5]] simple[0] refactor[0] of[0] the[0] main[0] method[0] populating[0] the[0] dynamic[0] context[0] menu[0] [[Sentence=-1,1=word max, 1-5]] it[0] was[0] started[0] to[0] grow[0] a[0] bit[0] too[0] much[0] [[Sentence=-1,1=word max, 1-5]] also[0] added[0] some[0] comments[0] to[0] explain[0] what's[0] going[0] on[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] id58779da5082bb454c1bcae914582e4471364a12[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
5567 commit 99bd6912e7b5b97fc6d4bb787e76b2d9dfffd7ae refactoring and integrating into eclipse change-id: i1fd3c3828fb2474f2f7394ee2831fcd7eb675878 	5567 commit 99bd6912e7b5b97fc6d4bb787e76b2d9dffd7ae refactoring and integrating into eclipse change-id: i1fd3c3828fb2474f2f7394ee2831fcd7eb675878	1	-1	 5567[0] commit[0] 99bd6912e7b5b97fc6d4bb787e76b2d9dfffd7ae/99bd6912e7b5b97fc6d4bb787e76b2d9dffd7ae[0] refactoring[0] and[0] integrating[0] into[0] eclipse[0] change[0] id[0] i1fd3c3828fb2474f2f7394ee2831fcd7eb675878[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
5953 commit 114ca22329320d7f43af219b473d4c2461e82e7d first step of multiple apk support. - new export type project to handle exporting a single app represented by multiple projects (for different minsdkversion for instance). - cleaned-up the current ant tasks and eclipse builder to not deal with apksettings anymore. it's not possible to generate more than one apk in a single pass. the export project will handle this and call out the normal build system to export each variant. make older (deprecated) attribute actually output a warning. - ant rules r3 now with support for multi apk export. lots of clean up, add new properties to be overriden by the multi-apk export task, make older one overrideable too. - better handling of older rules, older tasks, etc... in the setuptask used by the normal build. - add split by abi to apksettings and use it in the new multi apk export. - new custom task for multi-apk export. replaces setuptask for export-type projects. calls out to the project's build.xml after setting/overriding properties. this also override the project's versioncode with a new composite one made of different values. also uses a different build.xml, so added a new template: build.export.template. very much a work in progress. still to do: add other types of apk split, create/update export projects, export the build log, ... also, we need to refactor the normal build rules to avoid so much duplication! change-id: i57a565c60d097a5eabb40108ae1fa8cb209f2380 	5953 commit 114ca22329320d7f43af219b473d4c2461e82e7d first step of multiple apk support.<br> - new export type project to handle exporting a single ap represented by multiple projects (for different minsdkversion for instance)<br> - cleaned-up the current ant tasks and eclipse builder to not deal with apksettings anymore.<br> it's not possible to generate more than one apk in a single pass.<br> the export project will handle this and call out the normal build system to export each variant.<br> make older (deprecated) attribute actually output a warning.<br> - ant rules r3 now with support for multi apk export.<br> lots of clean up, add new properties to be overriden by the multi-apk export task, make older one overrideable too.<br> - better handling of older rules, older tasks, etc.<br> in the setuptask used by the normal build.<br> - add split by abi to apksettings and use it in the new multi apk export.<br> - new custom task for multi-apk export.<br> replaces setuptask for export-type projects.<br> calls out to the project's build.<br>xml after setting/overriding properties.<br> this also override the project's versioncode with a new composite one made of different values.<br> also uses a different build.<br>xml, so added a new template: build.<br>export.<br>template.<br> very much a work in progress.<br> still to do: add other types of apk split, create/update export projects, export the build log, .<br> also, we need to refactor the normal build rules to avoid so much duplication!<br> change-id: i57a565c60d097a5eabb40108ae1fa8cb209f2380	2	-2	 5953[0] commit[0] 114ca22329320d7f43af219b473d4c2461e82e7d[0] first[0] step[0] of[0] multiple[0] apk[0] support[0] [[Sentence=-1,1=word max, 1-5]] new[0] export[0] type[0] project[0] to[0] handle[0] exporting[0] a[0] single[0] app/ap[0] represented[0] by[0] multiple[0] projects[0] for[0] different[0] minsdkversion[0] for[0] instance[0] [[Sentence=-1,1=word max, 1-5]] cleaned[0] up[0] the[0] current[0] ant[0] tasks[0] and[0] eclipse[0] builder[0] to[0] not[0] deal[0] with[0] apksettings[0] anymore[0] [[Sentence=-1,1=word max, 1-5]] it's[0] not[0] possible[0] to[0] generate[0] more[0] than[0] one[0] apk[0] in[0] a[0] single[0] pass[0] [[Sentence=-1,1=word max, 1-5]] the[0] export[0] project[0] will[0] handle[0] this[0] and[0] call[0] out[0] the[0] normal[0] build[0] system[0] to[0] export[0] each[0] variant[0] [[Sentence=-1,1=word max, 1-5]] make[0] older[0] deprecated[0] attribute[0] actually[0] output[0] a[0] warning[0] [[Sentence=-1,1=word max, 1-5]] ant[0] rules[0] r3[0] now[0] with[0] support[0] for[0] multi[0] apk[0] export[0] [[Sentence=-1,1=word max, 1-5]] lots[0] of[0] clean[0] up[0] add[0] new[0] properties[0] to[0] be[0] overriden[0] by[0] the[0] multi[0] apk[0] export[0] task[0] make[0] older[0] one[0] overrideable[0] too[0] [[Sentence=-1,1=word max, 1-5]] better[0] handling[0] of[0] older[0] rules[0] older[0] tasks[0] etc[0] [[Sentence=-1,1=word max, 1-5]] in[0] the[0] setuptask[0] used[0] by[0] the[0] normal[0] build[0] [[Sentence=-1,1=word max, 1-5]] add[0] split[0] by[0] abi[0] to[0] apksettings[0] and[0] use[0] it[0] in[0] the[0] new[0] multi[0] apk[0] export[0] [[Sentence=-1,1=word max, 1-5]] new[0] custom[0] task[0] for[0] multi[0] apk[0] export[0] [[Sentence=-1,1=word max, 1-5]] replaces[0] setuptask[0] for[0] export[0] type[0] projects[0] [[Sentence=-1,1=word max, 1-5]] calls[0] out[0] to[0] the[0] project's[0] build[0] [[Sentence=-1,1=word max, 1-5]] xml[0] after[0] setting/overriding[0] properties[0] [[Sentence=-1,1=word max, 1-5]] this[0] also[0] override[0] the[0] project's[0] versioncode[0] with[0] a[0] new[0] composite[0] one[0] made[0] of[0] different[0] values[1] [[Sentence=-1,2=word max, 1-5]] also[0] uses[0] a[0] different[0] build[0] [[Sentence=-1,1=word max, 1-5]] xml[0] so[0] added[0] a[0] new[0] template[0] build[0] [[Sentence=-1,1=word max, 1-5]] export[0] [[Sentence=-1,1=word max, 1-5]] template[0] [[Sentence=-1,1=word max, 1-5]] very[0] much[0] a[0] work[0] in[0] progress[0] [[Sentence=-1,1=word max, 1-5]] still[0] to[0] do[0] add[0] other[0] types[0] of[0] apk[0] split[0] create/update[0] export[0] projects[0] export[0] the[0] build[0] log[0] [[Sentence=-1,1=word max, 1-5]] also[0] we[0] need[0] to[0] refactor[0] the[0] normal[0] build[0] rules[0] to[0] avoid[-1] so[0] much[0] duplication[0] [[Sentence=-2,1=word max, 1-5]] change[0] id[0] i57a565c60d097a5eabb40108ae1fa8cb209f2380[0] [[Sentence=-1,1=word max, 1-5]][[[2,-2 max of sentences]]]
6441 commit 7a2b0effab69a9c9c94337c1358756cd4c661622 merge: f656beb da2077e am da2077e3: am 4ad5b5f5: adt: refactor in viewelementdescriptor. merge commit 'da2077e394641b54b4d94404829403bc0eff59e4' * commit 'da2077e394641b54b4d94404829403bc0eff59e4': adt: refactor in viewelementdescriptor. 	6441 commit 7a2b0effab69a9c9c94337c1358756cd4c661622 merge: f656beb da2077e am da2077e3: am 4ad5b5f5: adt: refactor in viewelementdescriptor.<br> merge commit 'da2077e394641b54b4d94404829403bc0eff59e4' * commit 'da2077e394641b54b4d94404829403bc0eff59e4': adt: refactor in viewelementdescriptor.	1	-1	 6441[0] commit[0] 7a2b0effab69a9c9c94337c1358756cd4c661622[0] merge[0] f656beb[0] da2077e[0] am[0] da2077e3[0] am[0] 4ad5b5f5[0] adt[0] refactor[0] in[0] viewelementdescriptor[0] [[Sentence=-1,1=word max, 1-5]] merge[0] commit[0] 'da2077e394641b54b4d94404829403bc0eff59e4'[0] commit[0] 'da2077e394641b54b4d94404829403bc0eff59e4'[0] adt[0] refactor[0] in[0] viewelementdescriptor[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
6443 commit da2077e394641b54b4d94404829403bc0eff59e4 merge: 08faf36 4ad5b5f am 4ad5b5f5: adt: refactor in viewelementdescriptor. merge commit '4ad5b5f5933425e4416c5ef4434e0c8c16ccf0a8' into eclair-plus-aosp * commit '4ad5b5f5933425e4416c5ef4434e0c8c16ccf0a8': adt: refactor in viewelementdescriptor. 	6443 commit da2077e394641b54b4d94404829403bc0eff59e4 merge: 08faf36 4ad5b5f am 4ad5b5f5: adt: refactor in viewelementdescriptor.<br> merge commit '4ad5b5f5933425e4416c5ef4434e0c8c16ccf0a8' into eclair-plus-aosp * commit '4ad5b5f5933425e4416c5ef4434e0c8c16ccf0a8': adt: refactor in viewelementdescriptor.	1	-1	 6443[0] commit[0] da2077e394641b54b4d94404829403bc0eff59e4[0] merge[0] 08faf36[0] 4ad5b5f[0] am[0] 4ad5b5f5[0] adt[0] refactor[0] in[0] viewelementdescriptor[0] [[Sentence=-1,1=word max, 1-5]] merge[0] commit[0] '4ad5b5f5933425e4416c5ef4434e0c8c16ccf0a8'[0] into[0] eclair[0] plus[0] aosp[0] commit[0] '4ad5b5f5933425e4416c5ef4434e0c8c16ccf0a8'[0] adt[0] refactor[0] in[0] viewelementdescriptor[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
6445 commit 4ad5b5f5933425e4416c5ef4434e0c8c16ccf0a8 adt: refactor in viewelementdescriptor. this changes the member "canonicalclassname" into "fullclassname" since the value is the fqcn of the java view. change-id: idbfcf665c12c598f680fdf58ecb0ae7820da8bdb 	6445 commit 4ad5b5f5933425e4416c5ef4434e0c8c16ccf0a8 adt: refactor in viewelementdescriptor.<br> this changes the member "canonicalclassname" into "fullclassname" since the value is the fqcn of the java view.<br> change-id: idbfcf665c12c598f680fdf58ecb0ae7820da8bdb	1	-1	 6445[0] commit[0] 4ad5b5f5933425e4416c5ef4434e0c8c16ccf0a8[0] adt[0] refactor[0] in[0] viewelementdescriptor[0] [[Sentence=-1,1=word max, 1-5]] this[0] changes[0] the[0] member[0] canonicalclassname[0] into[0] fullclassname[0] since[0] the[0] value[0] is[0] the[0] fqcn[0] of[0] the[0] java[0] view[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] idbfcf665c12c598f680fdf58ecb0ae7820da8bdb[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
9710 commit 45299317fe7d0dbfca0c5811fe1248d92b1a986f ai 144402: am: cl 144284 am: cl 144283 adt: enhance resource chooser with ability to create new xml strings. that's a first pass. there's a fair bit of refactoring involved, so it's split in two cls. next cl will add more functionality. original author: raphael merged from: //branches/cupcake/... original author: android-build automated import of cl 144402 	9710 commit 45299317fe7d0dbfca0c5811fe1248d92b1a986f ai 14402: am: cl 144284 am: cl 144283 adt: enhance resource chooser with ability to create new xml strings.<br> that's a first pass.<br> there's a fair bit of refactoring involved, so it's split in two cls.<br> next cl will add more functionality.<br> original author: raphael merged from: //branches/cupcake/.<br> original author: android-build automated import of cl 14402	1	-1	 9710[0] commit[0] 45299317fe7d0dbfca0c5811fe1248d92b1a986f[0] ai[0] 144402/14402[0] am[0] cl[0] 144284[0] am[0] cl[0] 144283[0] adt[0] enhance[0] resource[0] chooser[0] with[0] ability[0] to[0] create[0] new[0] xml[0] strings[0] [[Sentence=-1,1=word max, 1-5]] that's[0] a[0] first[0] pass[0] [[Sentence=-1,1=word max, 1-5]] there's[0] a[0] fair[0] bit[0] of[0] refactoring[0] involved[0] so[0] it's[0] split[0] in[0] two[0] cls[0] [[Sentence=-1,1=word max, 1-5]] next[0] cl[0] will[0] add[0] more[0] functionality[0] [[Sentence=-1,1=word max, 1-5]] original[0] author[0] raphael[0] merged[0] from[0] //branches/cupcake/[0] [[Sentence=-1,1=word max, 1-5]] original[0] author[0] android[0] build[0] automated[0] import[0] of[0] cl[0] 144402/14402[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
9724 commit 1d4c7481b53214effc069d4269c4c17f888ff43f ai 144284: am: cl 144283 adt: enhance resource chooser with ability to create new xml strings. that's a first pass. there's a fair bit of refactoring involved, so it's split in two cls. next cl will add more functionality. original author: raphael merged from: //branches/cupcake/... automated import of cl 144284 	9724 commit 1d4c7481b53214effc069d4269c4c17f88ff43f ai 144284: am: cl 144283 adt: enhance resource chooser with ability to create new xml strings.<br> that's a first pass.<br> there's a fair bit of refactoring involved, so it's split in two cls.<br> next cl will add more functionality.<br> original author: raphael merged from: //branches/cupcake/.<br> automated import of cl 144284	1	-1	 9724[0] commit[0] 1d4c7481b53214effc069d4269c4c17f888ff43f/1d4c7481b53214effc069d4269c4c17f88ff43f[0] ai[0] 144284[0] am[0] cl[0] 144283[0] adt[0] enhance[0] resource[0] chooser[0] with[0] ability[0] to[0] create[0] new[0] xml[0] strings[0] [[Sentence=-1,1=word max, 1-5]] that's[0] a[0] first[0] pass[0] [[Sentence=-1,1=word max, 1-5]] there's[0] a[0] fair[0] bit[0] of[0] refactoring[0] involved[0] so[0] it's[0] split[0] in[0] two[0] cls[0] [[Sentence=-1,1=word max, 1-5]] next[0] cl[0] will[0] add[0] more[0] functionality[0] [[Sentence=-1,1=word max, 1-5]] original[0] author[0] raphael[0] merged[0] from[0] //branches/cupcake/[0] [[Sentence=-1,1=word max, 1-5]] automated[0] import[0] of[0] cl[0] 144284[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
9725 commit b6ae62d621b3ce744727fb4cac7e6ae79b524657 ai 144283: adt: enhance resource chooser with ability to create new xml strings. that's a first pass. there's a fair bit of refactoring involved, so it's split in two cls. next cl will add more functionality. bug 1722971 automated import of cl 144283 	9725 commit b6ae62d621b3ce744727fb4cac7e6ae79b524657 ai 144283: adt: enhance resource chooser with ability to create new xml strings.<br> that's a first pass.<br> there's a fair bit of refactoring involved, so it's split in two cls.<br> next cl will add more functionality.<br> bug 1722971 automated import of cl 144283	1	-1	 9725[0] commit[0] b6ae62d621b3ce744727fb4cac7e6ae79b524657[0] ai[0] 144283[0] adt[0] enhance[0] resource[0] chooser[0] with[0] ability[0] to[0] create[0] new[0] xml[0] strings[0] [[Sentence=-1,1=word max, 1-5]] that's[0] a[0] first[0] pass[0] [[Sentence=-1,1=word max, 1-5]] there's[0] a[0] fair[0] bit[0] of[0] refactoring[0] involved[0] so[0] it's[0] split[0] in[0] two[0] cls[0] [[Sentence=-1,1=word max, 1-5]] next[0] cl[0] will[0] add[0] more[0] functionality[0] [[Sentence=-1,1=word max, 1-5]] bug[0] 1722971[0] automated[0] import[0] of[0] cl[0] 144283[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
