Extract Method	Translation	Positive	Negative	EmotionRationale
267 commit 536c754edf40917423d9ef940846a6fec4386fc3 run dashboard queries in parallel if the secondary index is enabled and is using a remote cluster (for example solr or the system behind gerrit-review) running the user's dashboard queries in parallel can reduce overall latency. this refactoring slightly simplifies the code by pushing the logic to check "is:visible" back into andsource, which already supports batch loading change objects for changedata. an alternative implementation to run dashboard queries in parallel is to have the browser send one rest api request for each query. this is a mixed bag. the browser is limited to sending 2-4 requests at once to the same source server. on a browser with a limit of 2 pending requests 3 queries will incur significant latency. the browser may still be loading /#/ and needing to pull in additional assets like images and css. stealing request slots for rest apis contributes to overall page load latency. however, it is simple to load balance at the server side, as each query uses its own thread. change-id: i7bf5e2be8b6cb5e8487a19ecf69c4c184c7ed1ac 	267 commit 536c754edf40917423d9ef940846a6fec4386fc3 run dashboard queries in parallel if the secondary index is enabled and is using a remote cluster (for example solr or the system behind gerrit-review) running the user's dashboard queries in parallel can reduce overall latency.<br> this refactoring slightly simplifies the code by pushing the logic to check "is:visible" back into andsource, which already supports batch loading change objects for changedata.<br> an alternative implementation to run dashboard queries in parallel is to have the browser send one rest api request for each query.<br> this is a mixed bag.<br> the browser is limited to sending 2-4 requests at once to the same source server.<br> on a browser with a limit of 2 pending requests 3 queries will incur significant latency.<br> the browser may still be loading /#/ and needing to pull in additional assets like images and css.<br> stealing request slots for rest apis contributes to overall page load latency.<br> however, it is simple to load balance at the server side, as each query uses its own thread.<br> change-id: i7bf5e2be8b6cb5e8487a19ecf69c4c184c7ed1ac	2	-3	 267[0] commit[0] 536c754edf40917423d9ef940846a6fec4386fc3[0] run[0] dashboard[0] queries[0] in[0] parallel[0] if[0] the[0] secondary[0] index[0] is[0] enabled[0] and[0] is[0] using[0] a[0] remote[0] cluster[0] for[0] example[0] solr[0] or[0] the[0] system[0] behind[0] gerrit[0] review[0] running[0] the[0] user's[0] dashboard[0] queries[0] in[0] parallel[0] can[0] reduce[0] overall[0] latency[0] [[Sentence=-1,1=word max, 1-5]] this[0] refactoring[0] slightly[0] simplifies[0] the[0] code[0] by[0] pushing[0] the[0] logic[0] to[0] check[0] is[0] visible[0] back[0] into[0] andsource[0] which[0] already[0] supports[1] batch[0] loading[0] change[0] objects[0] for[0] changedata[0] [[Sentence=-1,2=word max, 1-5]] an[0] alternative[0] implementation[0] to[0] run[0] dashboard[0] queries[0] in[0] parallel[0] is[0] to[0] have[0] the[0] browser[0] send[0] one[0] rest[0] api[0] request[0] for[0] each[0] query[0] [[Sentence=-1,1=word max, 1-5]] this[0] is[0] a[0] mixed[0] bag[0] [[Sentence=-1,1=word max, 1-5]] the[0] browser[0] is[0] limited[0] to[0] sending[0] 2[0] -4[0] requests[0] at[0] once[0] to[0] the[0] same[0] source[-1] server[0] [[Sentence=-2,1=word max, 1-5]] on[0] a[0] browser[0] with[0] a[0] limit[0] of[0] 2[0] pending[0] requests[0] 3[0] queries[0] will[0] incur[0] significant[0] latency[0] [[Sentence=-1,1=word max, 1-5]] the[0] browser[0] may[0] still[0] be[0] loading[0] /#/[0] and[0] needing[0] to[0] pull[0] in[0] additional[0] assets[0] like[0] images[0] and[0] css[0] [[Sentence=-1,1=word max, 1-5]] stealing[-2] request[0] slots[0] for[0] rest[0] apis[0] contributes[0] to[0] overall[0] page[0] load[0] latency[0] [[Sentence=-3,1=word max, 1-5]] however[0] it[0] is[0] simple[0] to[0] load[0] balance[0] at[0] the[0] server[0] side[0] as[0] each[0] query[0] uses[0] its[0] own[0] thread[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i7bf5e2be8b6cb5e8487a19ecf69c4c184c7ed1ac[0] [[Sentence=-1,1=word max, 1-5]][[[2,-3 max of sentences]]]
917 commit 097b95791517008607f2332e6f4c2be621d6bf3e redesign change screen on new rest api the new screen exists at #/c2/ id  as it is missing a large number of features. the proposal is to include the screen as-is and iterate in tree, similar to the codemirror work. this allows power users to start trying the screen out by editing the url. missing features: - add reviewer(s) - remove reviewer(s) - edit commit message - diff files in two patch sets - dependencies and dependents - download links by url and action (cherry-pick, checkout, etc.) change-id: ie957fb85c873d044c947000f0f0207a66f87c784 	917 commit 097b95791517008607f2332e6f4c2be621d6bf3e redesign change screen on new rest api the new screen exists at #/c2/ id  as it is missing a large number of features.<br> the proposal is to include the screen as-is and iterate in tree, similar to the codemirror work.<br> this allows power users to start trying the screen out by editing the url.<br> missing features: - add reviewer(s) - remove reviewer(s) - edit commit message - diff files in two patch sets - dependencies and dependents - download links by url and action (cherry-pick, checkout, etc.<br> change-id: ie957fb85c873d044c94700f0f0207a66f87c784	1	-1	 917[0] commit[0] 097b95791517008607f2332e6f4c2be621d6bf3e[0] redesign[0] change[0] screen[0] on[0] new[0] rest[0] api[0] the[0] new[0] screen[0] exists[0] at[0] #/c2/[0] id[0] as[0] it[0] is[0] missing[0] a[0] large[0] number[0] of[0] features[0] [[Sentence=-1,1=word max, 1-5]] the[0] proposal[0] is[0] to[0] include[0] the[0] screen[0] as[0] is[0] and[0] iterate[0] in[0] tree[0] similar[0] to[0] the[0] codemirror[0] work[0] [[Sentence=-1,1=word max, 1-5]] this[0] allows[0] power[0] users[0] to[0] start[0] trying[0] the[0] screen[0] out[0] by[0] editing[0] the[0] url[0] [[Sentence=-1,1=word max, 1-5]] missing[0] features[0] add[0] reviewer[0] s[0] remove[0] reviewer[0] s[0] edit[0] commit[0] message[0] diff[0] files[0] in[0] two[0] patch[0] sets[0] dependencies[0] and[0] dependents[0] download[0] links[0] by[0] url[0] and[0] action[0] cherry[0] pick[0] checkout[0] etc[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] ie957fb85c873d044c947000f0f0207a66f87c784/ie957fb85c873d044c94700f0f0207a66f87c784[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
1019 commit 611bdde44fafe299e121161a7e28a283c68cf16c merge: 04cfa92 0dd0c32 merge "refactor plugin doc index page generation to remove duplicate code" 	1019 commit 611bdde44fafe299e121161a7e28a283c68cf16c merge: 04cfa92 0dd0c32 merge "refactor plugin doc index page generation to remove duplicate code"	1	-1	 1019[0] commit[0] 611bdde44fafe299e121161a7e28a283c68cf16c[0] merge[0] 04cfa92[0] 0dd0c32[0] merge[0] refactor[0] plugin[0] doc[0] index[0] page[0] generation[0] to[0] remove[0] duplicate[0] code[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
1021 commit 0dd0c3273bf25a92d37ddbabc7e858698d490eea refactor plugin doc index page generation to remove duplicate code the code to generate the documentation and command lists on plugins' documentation page is duplicated in 2 blocks. refactor it into a method that is reusable to generate both lists. change-id: ibd86e73fc813d80c7267efc6d9a04261800bc11a 	1021 commit 0dd0c3273bf25a92d37ddbabc7e858698d490eea refactor plugin doc index page generation to remove duplicate code the code to generate the documentation and command lists on plugins' documentation page is duplicated in 2 blocks.<br> refactor it into a method that is reusable to generate both lists.<br> change-id: ibd86e73fc813d80c7267efc6d9a04261800bc11a	1	-1	 1021[0] commit[0] 0dd0c3273bf25a92d37ddbabc7e858698d490eea[0] refactor[0] plugin[0] doc[0] index[0] page[0] generation[0] to[0] remove[0] duplicate[0] code[0] the[0] code[0] to[0] generate[0] the[0] documentation[0] and[0] command[0] lists[0] on[0] plugins'[0] documentation[0] page[0] is[0] duplicated[0] in[0] 2[0] blocks[0] [[Sentence=-1,1=word max, 1-5]] refactor[0] it[0] into[0] a[0] method[0] that[0] is[0] reusable[0] to[0] generate[0] both[0] lists[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] ibd86e73fc813d80c7267efc6d9a04261800bc11a[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
1461 commit f8a37ca05ee24f8e27280a310d2181bb2dd17874 implementing replace. previously replace wasn't implemented. also refactored the code to reduce duplication. change-id: iaf33293116a30b30d4d9ee1b22333eaee4da8332 	1461 commit f8a37ca05ee24f8e27280a310d2181bb2dd17874 implementing replace.<br> previously replace wasn't implemented.<br> also refactored the code to reduce duplication.<br> change-id: iaf33293116a30b30d4d9ee1b2233eaee4da8332	1	-1	 1461[0] commit[0] f8a37ca05ee24f8e27280a310d2181bb2dd17874[0] implementing[0] replace[0] [[Sentence=-1,1=word max, 1-5]] previously[0] replace[0] wasn't[0] implemented[0] [[Sentence=-1,1=word max, 1-5]] also[0] refactored[0] the[0] code[0] to[0] reduce[0] duplication[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] iaf33293116a30b30d4d9ee1b22333eaee4da8332/iaf33293116a30b30d4d9ee1b2233eaee4da8332[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
1981 commit 8d256d77161426dbe25396467aa928dc28cf0e04 merge: 0437d69 4c13fe4 merge "refactor type dependent unified diff displaying into separate functions" 	1981 commit 8d256d77161426dbe25396467a928dc28cf0e04 merge: 0437d69 4c13fe4 merge "refactor type dependent unified diff displaying into separate functions"	1	-2	 1981[0] commit[0] 8d256d77161426dbe25396467aa928dc28cf0e04/8d256d77161426dbe25396467a928dc28cf0e04[0] merge[0] 0437d69[0] 4c13fe4[0] merge[0] refactor[0] type[0] dependent[-1] unified[0] diff[0] displaying[0] into[0] separate[0] functions[0] [[Sentence=-2,1=word max, 1-5]][[[1,-2 max of sentences]]]
1985 commit 4c13fe4fbf6f40a2819599a2bc474576f85cb2cb refactor type dependent unified diff displaying into separate functions thereby we can better see the overall flow of control. change-id: i7c49da641cca2b5ec1fd85026f7e9df5a87ba32d 	1985 commit 4c13fe4fbf6f40a2819599a2bc474576f85cb2cb refactor type dependent unified diff displaying into separate functions thereby we can better see the overall flow of control.<br> change-id: i7c49da641cca2b5ec1fd85026f7e9df5a87ba32d	1	-2	 1985[0] commit[0] 4c13fe4fbf6f40a2819599a2bc474576f85cb2cb[0] refactor[0] type[0] dependent[-1] unified[0] diff[0] displaying[0] into[0] separate[0] functions[0] thereby[0] we[0] can[0] better[0] see[0] the[0] overall[0] flow[0] of[0] control[0] [[Sentence=-2,1=word max, 1-5]] change[0] id[0] i7c49da641cca2b5ec1fd85026f7e9df5a87ba32d[0] [[Sentence=-1,1=word max, 1-5]][[[1,-2 max of sentences]]]
3313 commit c13a2fd057459c8a240d3c477e17298c6c019df1 fix: cannot apply review labels when restoring a change over ssh when abandoning a change over ssh, it is possible to apply review labels to the change at the same time: gerrit review --abandon --code-review -1 sha1 however it is not possible to do the same when restoring a change: gerrit review --restore --code-review  2 sha1 the change will be restored, but the given review labels will not be applied. this is because the ssh command implementation applies the review labels before the abandon/restore operation. when restoring a change this does not work because it is not allowed to apply a review label to an abandoned change. refactor the command so that it applies the review labels before the abandon operation, but after the restore operation, thus making it possible to restore a change and apply review labels at the same time. change-id: ief5ca4e329fba6d686fb431f895df08e1a07e884 	3313 commit c13a2fd057459c8a240d3c477e17298c6c019df1 fix: cannot apply review labels when restoring a change over ssh when abandoning a change over ssh, it is possible to apply review labels to the change at the same time: gerrit review -abandon -code-review -1 sha1 however it is not possible to do the same when restoring a change: gerrit review -restore -code-review  2 sha1 the change will be restored, but the given review labels will not be applied.<br> this is because the ssh command implementation applies the review labels before the abandon/restore operation.<br> when restoring a change this does not work because it is not allowed to apply a review label to an abandoned change.<br> refactor the command so that it applies the review labels before the abandon operation, but after the restore operation, thus making it possible to restore a change and apply review labels at the same time.<br> change-id: ief5ca4e329fba6d686fb431f895df08e1a07e884	1	-2	 3313[0] commit[0] c13a2fd057459c8a240d3c477e17298c6c019df1[0] fix[0] cannot[0] apply[0] review[0] labels[0] when[0] restoring[0] a[0] change[0] over[0] ssh[0] when[0] abandoning[-1] a[0] change[0] over[0] ssh[0] it[0] is[0] possible[0] to[0] apply[0] review[0] labels[0] to[0] the[0] change[0] at[0] the[0] same[0] time[0] gerrit[0] review[0] abandon[-1] code[0] review[0] -1[0] sha1[0] however[0] it[0] is[0] not[0] possible[0] to[0] do[0] the[0] same[0] when[0] restoring[0] a[0] change[0] gerrit[0] review[0] restore[0] code[0] review[0] 2[0] sha1[0] the[0] change[0] will[0] be[0] restored[0] but[0] the[0] given[0] review[0] labels[0] will[0] not[0] be[0] applied[0] [[Sentence=-2,1=word max, 1-5]] this[0] is[0] because[0] the[0] ssh[0] command[0] implementation[0] applies[0] the[0] review[0] labels[0] before[0] the[0] abandon/restore[-1] operation[0] [[Sentence=-2,1=word max, 1-5]] when[0] restoring[0] a[0] change[0] this[0] does[0] not[0] work[0] because[0] it[0] is[0] not[0] allowed[0] to[0] apply[0] a[0] review[0] label[0] to[0] an[0] abandoned[-1] change[0] [[Sentence=-2,1=word max, 1-5]] refactor[0] the[0] command[0] so[0] that[0] it[0] applies[0] the[0] review[0] labels[0] before[0] the[0] abandon[-1] operation[0] but[0] after[0] the[0] restore[0] operation[0] thus[0] making[0] it[0] possible[0] to[0] restore[0] a[0] change[0] and[0] apply[0] review[0] labels[0] at[0] the[0] same[0] time[0] [[Sentence=-2,1=word max, 1-5]] change[0] id[0] ief5ca4e329fba6d686fb431f895df08e1a07e884[0] [[Sentence=-1,1=word max, 1-5]][[[1,-2 max of sentences]]]
3703 commit dcebf29c9ed47157b6a16d2312e567e5e20da66d merge: 4d034ff f538b34 merge "refactor the table header in diff view." 	3703 commit dcebf29c9ed47157b6a16d2312e567e5e20da66d merge: 4d034ff f538b34 merge "refactor the table header in diff view.	1	-1	 3703[0] commit[0] dcebf29c9ed47157b6a16d2312e567e5e20da66d[0] merge[0] 4d034ff[0] f538b34[0] merge[0] refactor[0] the[0] table[0] header[0] in[0] diff[0] view[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
3711 commit f538b34fbdc6e64ac33b8ad603a9367196b45ba0 refactor the table header in diff view. refactor the table header in sidebyside view and unified view. this commit is made to prepare for the file comment feature which need each cell in table header accept click event. e.g. in sidybysidy diff view currently the table header is displayed by 'patchtableheader' which in fact is not a table and not in the 'patchcontenttable', in the 'patchtableheader' there are 2 'patchsetselectbox's and their css style is controlled by 'patchtableheadersidebyside.ui.xml'. this refactoring does not use 'patchtableheader' anymore, it just allocate the 'patchsetselectbox' directly in the cells of 'patchcontenttable' header thus in later features of this topic it will be easy to -- prepare seats for icons in line number column header. -- enable the header of 'a' side or 'b' side clickable. -- control the css, now the components are in the cells of table header row after refactoring, the header columns will stand align with the content columns together. for the case of unified view, the header have 2 rows, each row need be clickable and we need a boundary line between these 2 rows to make user be clear which side s/he is clicking on, and once user add file comments on 'a' side we need add a new row between these 2 rows to disply the comment, with this refactor these function will be easy to roll out. change-id: i7502615a64c270321a3be9b6e4853d97b3dc54b3 	3711 commit f538b34fbdc6e64ac33b8ad603a9367196b45ba0 refactor the table header in diff view.<br> refactor the table header in sidebyside view and unified view.<br> this commit is made to prepare for the file comment feature which need each cell in table header accept click event.<br> e.<br>grin�.<br> in sidybysidy diff view currently the table header is displayed by 'patchtableheader' which in fact is not a table and not in the 'patchcontenttable', in the 'patchtableheader' there are 2 'patchsetselectbox's and their css style is controlled by 'patchtableheadersidebyside.<br>ui.<br>xml'.<br> this refactoring does not use 'patchtableheader' anymore, it just allocate the 'patchsetselectbox' directly in the cells of 'patchcontenttable' header thus in later features of this topic it will be easy to - prepare seats for icons in line number column header.<br> - enable the header of 'a' side or 'b' side clickable.<br> - control the css, now the components are in the cells of table header row after refactoring, the header columns will stand align with the content columns together.<br> for the case of unified view, the header have 2 rows, each row need be clickable and we need a boundary line between these 2 rows to make user be clear which side s/he is clicking on, and once user add file comments on 'a' side we need add a new row between these 2 rows to disply the comment, with this refactor these function will be easy to roll out.<br> change-id: i7502615a64c270321a3be9b6e4853d97b3dc54b3	1	-1	 3711[0] commit[0] f538b34fbdc6e64ac33b8ad603a9367196b45ba0[0] refactor[0] the[0] table[0] header[0] in[0] diff[0] view[0] [[Sentence=-1,1=word max, 1-5]] refactor[0] the[0] table[0] header[0] in[0] sidebyside[0] view[0] and[0] unified[0] view[0] [[Sentence=-1,1=word max, 1-5]] this[0] commit[0] is[0] made[0] to[0] prepare[0] for[0] the[0] file[0] comment[0] feature[0] which[0] need[0] each[0] cell[0] in[0] table[0] header[0] accept[0] click[0] event[0] [[Sentence=-1,1=word max, 1-5]] e[0] [[Sentence=-1,1=word max, 1-5]] g[0] [[Sentence=-1,1=word max, 1-5]] in[0] sidybysidy[0] diff[0] view[0] currently[0] the[0] table[0] header[0] is[0] displayed[0] by[0] 'patchtableheader'[0] which[0] in[0] fact[0] is[0] not[0] a[0] table[0] and[0] not[0] in[0] the[0] 'patchcontenttable'[0] in[0] the[0] 'patchtableheader'[0] there[0] are[0] 2[0] 'patchsetselectbox's[0] and[0] their[0] css[0] style[0] is[0] controlled[0] by[0] 'patchtableheadersidebyside[0] [[Sentence=-1,1=word max, 1-5]] ui[0] [[Sentence=-1,1=word max, 1-5]] xml'[0] [[Sentence=-1,1=word max, 1-5]] this[0] refactoring[0] does[0] not[0] use[0] 'patchtableheader'[0] anymore[0] it[0] just[0] allocate[0] the[0] 'patchsetselectbox'[0] directly[0] in[0] the[0] cells[0] of[0] 'patchcontenttable'[0] header[0] thus[0] in[0] later[0] features[0] of[0] this[0] topic[0] it[0] will[0] be[0] easy[0] to[0] prepare[0] seats[0] for[0] icons[0] in[0] line[0] number[0] column[0] header[0] [[Sentence=-1,1=word max, 1-5]] enable[0] the[0] header[0] of[0] 'a'[0] side[0] or[0] 'b'[0] side[0] clickable[0] [[Sentence=-1,1=word max, 1-5]] control[0] the[0] css[0] now[0] the[0] components[0] are[0] in[0] the[0] cells[0] of[0] table[0] header[0] row[0] after[0] refactoring[0] the[0] header[0] columns[0] will[0] stand[0] align[0] with[0] the[0] content[0] columns[0] together[0] [[Sentence=-1,1=word max, 1-5]] for[0] the[0] case[0] of[0] unified[0] view[0] the[0] header[0] have[0] 2[0] rows[0] each[0] row[0] need[0] be[0] clickable[0] and[0] we[0] need[0] a[0] boundary[0] line[0] between[0] these[0] 2[0] rows[0] to[0] make[0] user[0] be[0] clear[0] which[0] side[0] s/he[0] is[0] clicking[0] on[0] and[0] once[0] user[0] add[0] file[0] comments[0] on[0] 'a'[0] side[0] we[0] need[0] add[0] a[0] new[0] row[0] between[0] these[0] 2[0] rows[0] to[0] disply[0] the[0] comment[0] with[0] this[0] refactor[0] these[0] function[0] will[0] be[0] easy[0] to[0] roll[0] out[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i7502615a64c270321a3be9b6e4853d97b3dc54b3[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
3858 commit 8913ca43a4bacad5c32a512bf9341c61dc8241b4 make submitruleevaluator usable for testing prolog rules. for the purpose of testing submit rules the submitruleevaluator needs more flexibility like skipping the submit filters and loading prolog rules from a caller provided input stream. this change is a preparation for refactoring of the test-submit-rule command which currently duplicates most of the code for finding and executing the prolog rules. change-id: i54086590fa5dc5cefdd9c36ca2e8587d374bd988 signed-off-by: sasa zivkov  sasa.zivkov@sap.com  	3858 commit 8913ca43a4bacad5c32a512bf9341c61dc8241b4 make submitruleevaluator usable for testing prolog rules.<br> for the purpose of testing submit rules the submitruleevaluator needs more flexibility like skipping the submit filters and loading prolog rules from a caller provided input stream.<br> this change is a preparation for refactoring of the test-submit-rule command which currently duplicates most of the code for finding and executing the prolog rules.<br> change-id: i54086590fa5dc5cefdd9c36ca2e8587d374bd988 signed-off-by: sasa zivkov  sasa.<br>zivkov@sap.<br>com 	1	-1	 3858[0] commit[0] 8913ca43a4bacad5c32a512bf9341c61dc8241b4[0] make[0] submitruleevaluator[0] usable[0] for[0] testing[0] prolog[0] rules[0] [[Sentence=-1,1=word max, 1-5]] for[0] the[0] purpose[0] of[0] testing[0] submit[0] rules[0] the[0] submitruleevaluator[0] needs[0] more[0] flexibility[0] like[0] skipping[0] the[0] submit[0] filters[0] and[0] loading[0] prolog[0] rules[0] from[0] a[0] caller[0] provided[0] input[0] stream[0] [[Sentence=-1,1=word max, 1-5]] this[0] change[0] is[0] a[0] preparation[0] for[0] refactoring[0] of[0] the[0] test[0] submit[0] rule[0] command[0] which[0] currently[0] duplicates[0] most[0] of[0] the[0] code[0] for[0] finding[0] and[0] executing[0] the[0] prolog[0] rules[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i54086590fa5dc5cefdd9c36ca2e8587d374bd988[0] signed[0] off[0] by[0] sasa[0] zivkov[0] sasa[0] [[Sentence=-1,1=word max, 1-5]] zivkov@sap[0] [[Sentence=-1,1=word max, 1-5]] com[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
3989 commit ba02b61480af0e397dca39c9787947acf4061bcd make use of listmultimap in mergeop this makes the code cleaner and more readable. change-id: i7b6136113baf2ee51e799ba02ac466b6811ca11a signed-off-by: edwin kempin  edwin.kempin@sap.com  	3989 commit ba02b61480af0e397dca39c9787947acf4061bcd make use of listmultimap in mergeop this makes the code cleaner and more readable.<br> change-id: i7b6136113baf2ee51e799ba02ac466b6811ca11a signed-off-by: edwin kempin  edwin.<br>kempin@sap.<br>com 	1	-1	 3989[0] commit[0] ba02b61480af0e397dca39c9787947acf4061bcd[0] make[0] use[0] of[0] listmultimap[0] in[0] mergeop[0] this[0] makes[0] the[0] code[0] cleaner[0] and[0] more[0] readable[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i7b6136113baf2ee51e799ba02ac466b6811ca11a[0] signed[0] off[0] by[0] edwin[0] kempin[0] edwin[0] [[Sentence=-1,1=word max, 1-5]] kempin@sap[0] [[Sentence=-1,1=word max, 1-5]] com[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
4044 commit 633d59b6436b866a24cd3e629f185f453ea5beb0 merge: 659a6b8 680a5f8 merge feature 'control submit type from prolog' * control submit type from prolog: support controlling the submit type for changes from prolog remove unnecessary prolog-to-java conversion from submit filters use locate_helper to replace locate_* predicates changecontrol: extract prolog submit rule evaluation to its own method display submit type in the change info block support changes with different submit types in mergeop make submit strategies re-executeable refactor mergeop: reduce number of member variables, make names consistent refactor mergeop: implement each submit strategy in an own class refactor mergeop: extract utility methods into mergeutil class change-id: i71d4f5757ab96b5eb8456972398a7bb9fa2a7d4c signed-off-by: edwin kempin  edwin.kempin@sap.com  	4044 commit 633d59b6436b866a24cd3e629f185f453ea5beb0 merge: 659a6b8 680a5f8 merge feature 'control submit type from prolog' * control submit type from prolog: support controlling the submit type for changes from prolog remove unnecessary prolog-to-java conversion from submit filters use locate_helper to replace locate_* predicates changecontrol: extract prolog submit rule evaluation to its own method display submit type in the change info block support changes with different submit types in mergeop make submit strategies re-executeable refactor mergeop: reduce number of member variables, make names consistent refactor mergeop: implement each submit strategy in an own class refactor mergeop: extract utility methods into mergeutil class change-id: i71d4f5757ab96b5eb8456972398a7bb9fa2a7d4c signed-off-by: edwin kempin  edwin.<br>kempin@sap.<br>com 	1	-2	 4044[0] commit[0] 633d59b6436b866a24cd3e629f185f453ea5beb0[0] merge[0] 659a6b8[0] 680a5f8[0] merge[0] feature[0] 'control[0] submit[0] type[0] from[0] prolog'[0] control[0] submit[0] type[0] from[0] prolog[0] support[0] controlling[0] the[0] submit[0] type[0] for[0] changes[0] from[0] prolog[0] remove[0] unnecessary[-1] prolog[0] to[0] java[0] conversion[0] from[0] submit[0] filters[0] use[0] locate_helper[0] to[0] replace[0] locate_[0] predicates[0] changecontrol[0] extract[0] prolog[0] submit[0] rule[0] evaluation[0] to[0] its[0] own[0] method[0] display[0] submit[0] type[0] in[0] the[0] change[0] info[0] block[0] support[0] changes[0] with[0] different[0] submit[0] types[0] in[0] mergeop[0] make[0] submit[0] strategies[0] re[0] executeable[0] refactor[0] mergeop[0] reduce[0] number[0] of[0] member[0] variables[0] make[0] names[0] consistent[0] refactor[0] mergeop[0] implement[0] each[0] submit[0] strategy[0] in[0] an[0] own[0] class[0] refactor[0] mergeop[0] extract[0] utility[0] methods[0] into[0] mergeutil[0] [[Sentence=-2,1=word max, 1-5]] kempin@sap[0] [[Sentence=-1,1=word max, 1-5]] com[0] [[Sentence=-1,1=word max, 1-5]][[[1,-2 max of sentences]]]
4069 commit 7e136c540af5a439f67633eb10746f17ea683210 refactor mergeop: implement each submit strategy in an own class this is the second step in the mergeop refactoring. with this change an abstraction for a submit strategy is introduced. there is a new abstract base class that each submit strategy has to extend. by having polymorphism for the submit type the coding for the different submit strategies gets seperated. this makes it much easier to add a new submit strategy because only a clearly defined interface has to be implemented. change-id: i5afe9fdc3e4c5a796cc2be715194effed9e34ddf signed-off-by: edwin kempin  edwin.kempin@sap.com  	4069 commit 7e136c540af5a439f67633eb10746f17ea683210 refactor mergeop: implement each submit strategy in an own class this is the second step in the mergeop refactoring.<br> with this change an abstraction for a submit strategy is introduced.<br> there is a new abstract base class that each submit strategy has to extend.<br> by having polymorphism for the submit type the coding for the different submit strategies gets seperated.<br> this makes it much easier to add a new submit strategy because only a clearly defined interface has to be implemented.<br> change-id: i5afe9fdc3e4c5a796cc2be715194effed9e34ddf signed-off-by: edwin kempin  edwin.<br>kempin@sap.<br>com 	1	-1	 4069[0] commit[0] 7e136c540af5a439f67633eb10746f17ea683210[0] refactor[0] mergeop[0] implement[0] each[0] submit[0] strategy[0] in[0] an[0] own[0] class[0] this[0] is[0] the[0] second[0] step[0] in[0] the[0] mergeop[0] refactoring[0] [[Sentence=-1,1=word max, 1-5]] with[0] this[0] change[0] an[0] abstraction[0] for[0] a[0] submit[0] strategy[0] is[0] introduced[0] [[Sentence=-1,1=word max, 1-5]] there[0] is[0] a[0] new[0] abstract[0] base[0] class[0] that[0] each[0] submit[0] strategy[0] has[0] to[0] extend[0] [[Sentence=-1,1=word max, 1-5]] by[0] having[0] polymorphism[0] for[0] the[0] submit[0] type[0] the[0] coding[0] for[0] the[0] different[0] submit[0] strategies[0] gets[0] seperated[0] [[Sentence=-1,1=word max, 1-5]] this[0] makes[0] it[0] much[0] easier[0] to[0] add[0] a[0] new[0] submit[0] strategy[0] because[0] only[0] a[0] clearly[0] defined[0] interface[0] has[0] to[0] be[0] implemented[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i5afe9fdc3e4c5a796cc2be715194effed9e34ddf[0] signed[0] off[0] by[0] edwin[0] kempin[0] edwin[0] [[Sentence=-1,1=word max, 1-5]] kempin@sap[0] [[Sentence=-1,1=word max, 1-5]] com[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
4246 commit e6298f7216db0ea489cf9e28352ae1d9205cb190 create new patch set references before database records ensure the commit used by a new change or replacement patch set always exists in the git repository by writing the reference first as part of the overall batchrefupdate, then inserting the database records if all of the references stored successfully. this refactoring simplifies some of the logic involved, and lets some jgit backends that benefit from batching references see all updates at once, which may reduce the overall transaction time. change-id: id5a4d8c3d7abd035accc9682714ac782924f0a33 	4246 commit e6298f7216db0ea489cf9e28352ae1d9205cb190 create new patch set references before database records ensure the commit used by a new change or replacement patch set always exists in the git repository by writing the reference first as part of the overall batchrefupdate, then inserting the database records if all of the references stored successfully.<br> this refactoring simplifies some of the logic involved, and lets some jgit backends that benefit from batching references see all updates at once, which may reduce the overall transaction time.<br> change-id: id5a4d8c3d7abd035acc9682714ac782924f0a33	1	-1	 4246[0] commit[0] e6298f7216db0ea489cf9e28352ae1d9205cb190[0] create[0] new[0] patch[0] set[0] references[0] before[0] database[0] records[0] ensure[0] the[0] commit[0] used[0] by[0] a[0] new[0] change[0] or[0] replacement[0] patch[0] set[0] always[0] exists[0] in[0] the[0] git[0] repository[0] by[0] writing[0] the[0] reference[0] first[0] as[0] part[0] of[0] the[0] overall[0] batchrefupdate[0] then[0] inserting[0] the[0] database[0] records[0] if[0] all[0] of[0] the[0] references[0] stored[0] successfully[0] [[Sentence=-1,1=word max, 1-5]] this[0] refactoring[0] simplifies[0] some[0] of[0] the[0] logic[0] involved[0] and[0] lets[0] some[0] jgit[0] backends[0] that[0] benefit[0] from[0] batching[0] references[0] see[0] all[0] updates[0] at[0] once[0] which[0] may[0] reduce[0] the[0] overall[0] transaction[0] time[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] id5a4d8c3d7abd035accc9682714ac782924f0a33/id5a4d8c3d7abd035acc9682714ac782924f0a33[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
4816 commit 47b1119c4bc1d3e352d0e3ec0f2450f7e7da9ce0 merge: 5c9fd14 e3f6a04 merge "refactor ssh commands with sshcommand base class" 	4816 commit 47b119c4bc1d3e352d0e3ec0f2450f7e7da9ce0 merge: 5c9fd14 e3f6a04 merge "refactor ssh commands with sshcommand base class"	1	-1	 4816[0] commit[0] 47b1119c4bc1d3e352d0e3ec0f2450f7e7da9ce0/47b119c4bc1d3e352d0e3ec0f2450f7e7da9ce0[0] merge[0] 5c9fd14[0] e3f6a04[0] merge[0] refactor[0] ssh[0] commands[0] with[0] sshcommand[0] base[0] class[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
4817 commit e3f6a0444bc14fcfda9cd9169c94a096c5dd9f0e refactor ssh commands with sshcommand base class the sshcommand base class extends basecommand and provides the common pattern of calling startthread with a commandrunnable that parses argments and then invokes the real logic. the new annotation @requirescapability can be declared on any concrete implementation of sshcommand to name a capability the caller must have before they can run the contained command. this is enforced inside of the dispatchcommand, which is what handles creating and delegating to any paticular command implementation. @admincommand is replaced by the new @requriescapability annotation, which is more explicitly declaring the administrate server dependency. most existing commands have been ported to this sshcommand base class, cleaning up a lot of the code. a few special cases still exist such as streamevents or scpcommand that are not trivial to port, as their start implementation is well outside of the common pattern. plugin authors should be encouraged to extend from sshcommand for the foreseeable future. i eventually would like to get away from needing to extend this class, and instead use a simpler interface declaration, but that is a much bigger change to make with how dispatchcommand and basecommand are connected together. change-id: i4f1de60c6fdeb207197dfccc135b4d532443d5b2 	4817 commit e3f6a044bc14fcfda9cd9169c94a096c5dd9f0e refactor ssh commands with sshcommand base class the sshcommand base class extends basecommand and provides the common pattern of calling startthread with a commandrunnable that parses argments and then invokes the real logic.<br> the new annotation @requirescapability can be declared on any concrete implementation of sshcommand to name a capability the caller must have before they can run the contained command.<br> this is enforced inside of the dispatchcommand, which is what handles creating and delegating to any paticular command implementation.<br> @admincommand is replaced by the new @requriescapability annotation, which is more explicitly declaring the administrate server dependency.<br> most existing commands have been ported to this sshcommand base class, cleaning up a lot of the code.<br> a few special cases still exist such as streamevents or scpcommand that are not trivial to port, as their start implementation is well outside of the common pattern.<br> plugin authors should be encouraged to extend from sshcommand for the foreseeable future.<br> i eventually would like to get away from needing to extend this class, and instead use a simpler interface declaration, but that is a much bigger change to make with how dispatchcommand and basecommand are connected together.<br> change-id: i4f1de60c6fdeb207197dfcc135b4d532443d5b2	2	-2	 4817[0] commit[0] e3f6a0444bc14fcfda9cd9169c94a096c5dd9f0e/e3f6a044bc14fcfda9cd9169c94a096c5dd9f0e[0] refactor[0] ssh[0] commands[0] with[0] sshcommand[0] base[0] class[0] the[0] sshcommand[0] base[0] class[0] extends[0] basecommand[0] and[0] provides[0] the[0] common[0] pattern[0] of[0] calling[0] startthread[0] with[0] a[0] commandrunnable[0] that[0] parses[0] argments[0] and[0] then[0] invokes[0] the[0] real[0] logic[0] [[Sentence=-1,1=word max, 1-5]] the[0] new[0] annotation[0] @requirescapability[0] can[0] be[0] declared[0] on[0] any[0] concrete[0] implementation[0] of[0] sshcommand[0] to[0] name[0] a[0] capability[0] the[0] caller[0] must[0] have[0] before[0] they[0] can[0] run[0] the[0] contained[0] command[0] [[Sentence=-1,1=word max, 1-5]] this[0] is[0] enforced[-1] inside[0] of[0] the[0] dispatchcommand[0] which[0] is[0] what[0] handles[0] creating[0] and[0] delegating[0] to[0] any[0] paticular[0] command[0] implementation[0] [[Sentence=-2,1=word max, 1-5]] @admincommand[0] is[0] replaced[0] by[0] the[0] new[0] @requriescapability[0] annotation[0] which[0] is[0] more[0] explicitly[0] declaring[0] the[0] administrate[0] server[0] dependency[0] [[Sentence=-1,1=word max, 1-5]] most[0] existing[0] commands[0] have[0] been[0] ported[0] to[0] this[0] sshcommand[0] base[0] class[0] cleaning[0] up[0] a[0] lot[0] of[0] the[0] code[0] [[Sentence=-1,1=word max, 1-5]] a[0] few[0] special[1] cases[0] still[0] exist[0] such[0] as[0] streamevents[0] or[0] scpcommand[0] that[0] are[0] not[0] trivial[-1][NegatedDueToPreviousWord] to[0] port[0] as[0] their[0] start[0] implementation[0] is[0] well[0] outside[0] of[0] the[0] common[0] pattern[0] [[Sentence=-1,2=word max, 1-5]] plugin[0] authors[0] should[0] be[0] encouraged[1] to[0] extend[0] from[0] sshcommand[0] for[0] the[0] foreseeable[0] future[0] [[Sentence=-1,2=word max, 1-5]] i[0] eventually[0] would[0] like[0] to[0] get[0] away[0] from[0] needing[0] to[0] extend[0] this[0] class[0] and[0] instead[0] use[0] a[0] simpler[0] interface[0] declaration[0] but[0] that[0] is[0] a[0] much[0] bigger[0] change[0] to[0] make[0] with[0] how[0] dispatchcommand[0] and[0] basecommand[0] are[0] connected[0] together[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i4f1de60c6fdeb207197dfccc135b4d532443d5b2/i4f1de60c6fdeb207197dfcc135b4d532443d5b2[0] [[Sentence=-1,1=word max, 1-5]][[[2,-2 max of sentences]]]
4925 commit 4b6f8c1ef2a4ee120d5769cf9252cdb13fa37aa3 merge: cb64a4b 1bc7762 merge changes ic8052b4d,i41829d35,ia2d112eb,ieb95a0ed,i38b15303 * changes: refactor ls-projects code to gerrit-server support parsing command line options from a map allow command line parsing to happen on a different object refactor display of --help/-h to be common move parsing of --help/-h to cmdlineparser 	4925 commit 4b6f8c1ef2a4ee120d5769cf9252cdb13fa37a3 merge: cb64a4b 1bc7762 merge changes ic8052b4d,i41829d35,ia2d112eb,ieb95a0ed,i38b15303 * changes: refactor ls-projects code to gerrit-server support parsing command line options from a map allow command line parsing to happen on a different object refactor display of -help/-h to be common move parsing of -help/-h to cmdlineparser	1	-1	 4925[0] commit[0] 4b6f8c1ef2a4ee120d5769cf9252cdb13fa37aa3/4b6f8c1ef2a4ee120d5769cf9252cdb13fa37a3[0] merge[0] cb64a4b[0] 1bc7762[0] merge[0] changes[0] ic8052b4d[0] i41829d35[0] ia2d112eb[0] ieb95a0ed[0] i38b15303[0] changes[0] refactor[0] ls[0] projects[0] code[0] to[0] gerrit[0] server[0] support[0] parsing[0] command[0] line[0] options[0] from[0] a[0] map[0] allow[0] command[0] line[0] parsing[0] to[0] happen[0] on[0] a[0] different[0] object[0] refactor[0] display[0] of[0] help/[0] h[0] to[0] be[0] common[0] move[0] parsing[0] of[0] help/[0] h[0] to[0] cmdlineparser[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
5114 commit 49fe6e31b8ca82cc689990ab78f29a1fc96c5405 add querychanges method to queryprocessor this change refactors some of the logic in the  query  method of query processor into a  querychanges  method. this is useful for client code that simply wants to read the results instead of writing a json or otherwise formatted list of data. specifically, this change is in preparation for a revamped review command that will accept a query string instead of simply a change identifier. change-id: i2798a9ca793ce778e5cc5c1874b22affae741050 	5114 commit 49fe6e31b8ca82cc68990ab78f29a1fc96c5405 add querychanges method to queryprocessor this change refactors some of the logic in the  query  method of query processor into a  querychanges  method.<br> this is useful for client code that simply wants to read the results instead of writing a json or otherwise formatted list of data.<br> specifically, this change is in preparation for a revamped review command that will accept a query string instead of simply a change identifier.<br> change-id: i2798a9ca793ce778e5cc5c1874b22affae741050	2	-1	 5114[0] commit[0] 49fe6e31b8ca82cc689990ab78f29a1fc96c5405/49fe6e31b8ca82cc68990ab78f29a1fc96c5405[0] add[0] querychanges[0] method[0] to[0] queryprocessor[0] this[0] change[0] refactors[0] some[0] of[0] the[0] logic[0] in[0] the[0] query[0] method[0] of[0] query[0] processor[0] into[0] a[0] querychanges[0] method[0] [[Sentence=-1,1=word max, 1-5]] this[0] is[0] useful[1] for[0] client[0] code[0] that[0] simply[0] wants[0] to[0] read[0] the[0] results[0] instead[0] of[0] writing[0] a[0] json[0] or[0] otherwise[0] formatted[0] list[0] of[0] data[0] [[Sentence=-1,2=word max, 1-5]] specifically[0] this[0] change[0] is[0] in[0] preparation[0] for[0] a[0] revamped[0] review[0] command[0] that[0] will[0] accept[0] a[0] query[0] string[0] instead[0] of[0] simply[0] a[0] change[0] identifier[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i2798a9ca793ce778e5cc5c1874b22affae741050[0] [[Sentence=-1,1=word max, 1-5]][[[2,-1 max of sentences]]]
5172 commit 6ada0d28c8cad99ab75218619d5f32229a0685a9 refactor submit logic into gerrit-server this change moves logic that was duplicated over the ssh command and the rpc handler into a submit class in gerrit-server. change-id: i70cf5aa04d091e5652d8bc3e5a254339a80bd6fd 	5172 commit 6ada0d28c8cad99ab75218619d5f3229a0685a9 refactor submit logic into gerrit-server this change moves logic that was duplicated over the ssh command and the rpc handler into a submit class in gerrit-server.<br> change-id: i70cf5a04d091e5652d8bc3e5a254339a80bd6fd	1	-1	 5172[0] commit[0] 6ada0d28c8cad99ab75218619d5f32229a0685a9/6ada0d28c8cad99ab75218619d5f3229a0685a9[0] refactor[0] submit[0] logic[0] into[0] gerrit[0] server[0] this[0] change[0] moves[0] logic[0] that[0] was[0] duplicated[0] over[0] the[0] ssh[0] command[0] and[0] the[0] rpc[0] handler[0] into[0] a[0] submit[0] class[0] in[0] gerrit[0] server[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i70cf5aa04d091e5652d8bc3e5a254339a80bd6fd/i70cf5a04d091e5652d8bc3e5a254339a80bd6fd[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
5239 commit 4f42319588d95ef5154b48bc285d619a279bf901 merge: 3b17e70 f733c97 merge changes i082ab755,i789c9a09 * changes: create project through web interface create project refactoring 	5239 commit 4f42319588d95ef5154b48bc285d619a279bf901 merge: 3b17e70 f733c97 merge changes i082ab755,i789c9a09 * changes: create project through web interface create project refactoring	1	-1	 5239[0] commit[0] 4f42319588d95ef5154b48bc285d619a279bf901[0] merge[0] 3b17e70[0] f733c97[0] merge[0] changes[0] i082ab755[0] i789c9a09[0] changes[0] create[0] project[0] through[0] web[0] interface[0] create[0] project[0] refactoring[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
5406 commit 79ccba19359598877479b952b87aced943f4d481 merge: 4e560dc 77c684b merge branch 'dev-spearce' * dev-spearce: (33 commits) use transactions to handle comments when possible avoid opening extra reviewdb connection in patchsetinfofactory minor orm cleanups to support other backends add command to output a protobuf message file for the db support gwtorm 1.2 fix reference of database t  to schemafactory t  support velocity 1.5 move replication queue binding out of gerritglobalmodule remove static initialization of velocity move workqueue out of gerritglobalmodule support auth.type   custom_extension extract git /p/ module configuration make websession an abstract interface move gitrepositorymanager setup out of schemamodule move smtpemailsender to its own module make address, emailheader visible to other emailsenders disable ssh keys in the web ui if sshd is disabled refactor how we tie the ssh objects into the http injector daemon: allow httpd without sshd allow sshd.listenaddress   off to disable the daemon ... conflicts: gerrit-httpd/src/main/java/com/google/gerrit/httpd/gitwebconfig.java gerrit-server/src/main/java/com/google/gerrit/server/schema/schemamodule.java change-id: if957ce2eeb9b1de4ed2b134b0db129c336900442 	5406 commit 79ccba19359598877479b952b87aced943f4d481 merge: 4e560dc 77c684b merge branch 'dev-spearce' * dev-spearce: (33 commits) use transactions to handle comments when possible avoid opening extra reviewdb connection in patchsetinfofactory minor orm cleanups to support other backends add command to output a protobuf message file for the db support gwtorm 1.2 fix reference of database t  to schemafactory t  support velocity 1.5 move replication queue binding out of gerritglobalmodule remove static initialization of velocity move workqueue out of gerritglobalmodule support auth.<br>type   custom_extension extract git /p/ module configuration make websession an abstract interface move gitrepositorymanager setup out of schemamodule move smtpemailsender to its own module make address, emailheader visible to other emailsenders disable ssh keys in the web ui if sshd is disabled refactor how we tie the ssh objects into the http injector daemon: allow httpd without sshd allow sshd.<br>listenaddress   off to disable the daemon .<br> conflicts: gerrit-httpd/src/main/java/com/google/gerrit/httpd/gitwebconfig.<br>java gerrit-server/src/main/java/com/google/gerrit/server/schema/schemamodule.<br>java change-id: if957ce2eeb9b1de4ed2b134b0db129c336900442	1	-2	 5406[0] commit[0] 79ccba19359598877479b952b87aced943f4d481[0] merge[0] 4e560dc[0] 77c684b[0] merge[0] branch[0] 'dev[0] spearce'[0] dev[0] spearce[0] (33[0] commits[0] use[0] transactions[0] to[0] handle[0] comments[0] when[0] possible[0] avoid[-1] opening[0] extra[0] reviewdb[0] connection[0] in[0] patchsetinfofactory[0] minor[0] orm[0] cleanups[0] to[0] support[0] other[0] backends[0] add[0] command[0] to[0] output[0] a[0] protobuf[0] message[0] file[0] for[0] the[0] db[0] support[0] gwtorm[0] 1[0] .2[0] fix[0] reference[0] of[0] database[0] t[0] to[0] schemafactory[0] t[0] support[0] velocity[0] 1[0] .5[0] move[0] replication[0] queue[0] binding[0] out[0] of[0] gerritglobalmodule[0] remove[0] static[0] initialization[0] of[0] velocity[0] move[0] workqueue[0] out[0] of[0] gerritglobalmodule[0] support[0] auth[0] [[Sentence=-2,1=word max, 1-5]] type[0] custom_extension[0] extract[0] git[0] /p/[0] module[0] configuration[0] make[0] websession[0] an[0] abstract[0] interface[0] move[0] gitrepositorymanager[0] setup[0] out[0] of[0] schemamodule[0] move[0] smtpemailsender[0] to[0] its[0] own[0] module[0] make[0] address[0] emailheader[0] visible[0] to[0] other[0] emailsenders[0] disable[0] ssh[0] keys[0] in[0] the[0] web[0] ui[0] if[0] sshd[0] is[0] disabled[0] refactor[0] how[0] we[0] tie[0] the[0] ssh[0] objects[0] into[0] the[0] http[0] injector[0] daemon[0] allow[0] httpd[0] without[0] sshd[0] allow[0] sshd[0] [[Sentence=-1,1=word max, 1-5]] listenaddress[0] off[0] to[0] disable[0] the[0] daemon[0] [[Sentence=-1,1=word max, 1-5]] conflicts[0] gerrit[0] httpd/src/main/java/com/google/gerrit/httpd/gitwebconfig[0] [[Sentence=-1,1=word max, 1-5]] java[0] gerrit[0] server/src/main/java/com/google/gerrit/server/schema/schemamodule[0] [[Sentence=-1,1=word max, 1-5]] java[0] change[0] id[0] if957ce2eeb9b1de4ed2b134b0db129c336900442[0] [[Sentence=-1,1=word max, 1-5]][[[1,-2 max of sentences]]]
5433 commit cf6c62366f9d628fe2d7581526727e7cbaa81c8c don't rely on ehcache cacheconfiguration clone() its cleaner to not rely on cloning the cache configuration. instead just refactor out the code to configure the cache to a new method and always build a new configuration object. change-id: ide3359eacb3768fef7cd08b14307e6bdbffb378e signed-off-by: shawn o. pearce  sop@google.com  	5433 commit cf6c62366f9d628fe2d7581526727e7cba81c8c don't rely on ehcache cacheconfiguration clone( its cleaner to not rely on cloning the cache configuration.<br> instead just refactor out the code to configure the cache to a new method and always build a new configuration object.<br> change-id: ide3359eacb3768fef7cd08b14307e6bdbffb378e signed-off-by: shawn o.<br> pearce  sop@google.<br>com 	1	-1	 5433[0] commit[0] cf6c62366f9d628fe2d7581526727e7cbaa81c8c/cf6c62366f9d628fe2d7581526727e7cba81c8c[0] don't[0] rely[0] on[0] ehcache[0] cacheconfiguration[0] clone[0] its[0] cleaner[0] to[0] not[0] rely[0] on[0] cloning[0] the[0] cache[0] configuration[0] [[Sentence=-1,1=word max, 1-5]] instead[0] just[0] refactor[0] out[0] the[0] code[0] to[0] configure[0] the[0] cache[0] to[0] a[0] new[0] method[0] and[0] always[0] build[0] a[0] new[0] configuration[0] object[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] ide3359eacb3768fef7cd08b14307e6bdbffb378e[0] signed[0] off[0] by[0] shawn[0] o[0] [[Sentence=-1,1=word max, 1-5]] pearce[0] sop@google[0] [[Sentence=-1,1=word max, 1-5]] com[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
5604 commit 2b63c6cf09663d96b7a661b89d856d4cce809b6f merge: 827c735 0c1abdb merge changes ied06561c,idff421e1,iaf12bab5,i2b744f5a * changes: add permission_sort cache to remember sort orderings reuse cached refcontrol data in functionstate refactor how permissions are matched by projectcontrol, refcontrol cache effective capabilities to improve lookup performance 	5604 commit 2b63c6cf09663d96b7a661b89d856d4cce809b6f merge: 827c735 0c1abdb merge changes ied06561c,idff421e1,iaf12bab5,i2b744f5a * changes: add permission_sort cache to remember sort orderings reuse cached refcontrol data in functionstate refactor how permissions are matched by projectcontrol, refcontrol cache effective capabilities to improve lookup performance	2	-1	 5604[0] commit[0] 2b63c6cf09663d96b7a661b89d856d4cce809b6f[0] merge[0] 827c735[0] 0c1abdb[0] merge[0] changes[0] ied06561c[0] idff421e1[0] iaf12bab5[0] i2b744f5a[0] changes[0] add[0] permission_sort[0] cache[0] to[0] remember[0] sort[0] orderings[0] reuse[0] cached[0] refcontrol[0] data[0] in[0] functionstate[0] refactor[0] how[0] permissions[0] are[0] matched[0] by[0] projectcontrol[0] refcontrol[0] cache[0] effective[0] capabilities[0] to[0] improve[1] lookup[0] performance[0] [[Sentence=-1,2=word max, 1-5]][[[2,-1 max of sentences]]]
5608 commit bee0aeafa1ca9552e4caf82ae0cbf7adaf71c4cd refactor how permissions are matched by projectcontrol, refcontrol accesssections are now matched onto references using pre-compiled sectionmatcher objects. these matchers are built in the projectstate on demand, and cached until the projectstate itself is discarded from memory. this saves the pattern.compile() costs, as well as some basic conditionals to determine which type of reference pattern the section uses, providing a small speed up to access rule evaluation. projectcontrol and refcontrol now stores all permissions that belong to the project or reference, rather than only the ones relevant for their currentuser. this allows the control objects to provide cached data for other users, such as when changecontrol needs to build a different copy of itself for each reviewer listed on the change. projectcontrol caches refcontrols it builds, making it easier for callers like receivecommits or visiblereffilter to deal with a lot of lookups for the same common reference name within a single project access request. this comes at a cost of memory, but should be an improvement in response time. project ownership checks are now handled by projectstate, relying on the cached localowners data instead of looking at the owner permission on "refs/*". the cached localowners is already built up from the "refs/*" data during projectstate's constructor, so doing it dynamically via refcontrol inside of projectcontrol was really quite wasteful. change-id: iaf12bab55d41217363cc05ba024f452d03bc21df 	5608 commit bee0aeafa1ca9552e4caf82ae0cbf7adaf71c4cd refactor how permissions are matched by projectcontrol, refcontrol accessections are now matched onto references using pre-compiled sectionmatcher objects.<br> these matchers are built in the projectstate on demand, and cached until the projectstate itself is discarded from memory.<br> this saves the pattern.<br>compile( costs, as well as some basic conditionals to determine which type of reference pattern the section uses, providing a small speed up to access rule evaluation.<br> projectcontrol and refcontrol now stores all permissions that belong to the project or reference, rather than only the ones relevant for their currentuser.<br> this allows the control objects to provide cached data for other users, such as when changecontrol needs to build a different copy of itself for each reviewer listed on the change.<br> projectcontrol caches refcontrols it builds, making it easier for callers like receivecommits or visiblereffilter to deal with a lot of lookups for the same common reference name within a single project access request.<br> this comes at a cost of memory, but should be an improvement in response time.<br> project ownership checks are now handled by projectstate, relying on the cached localowners data instead of looking at the owner permission on "refs/*<br> the cached localowners is already built up from the "refs/* data during projectstate's constructor, so doing it dynamically via refcontrol inside of projectcontrol was really quite wasteful.<br> change-id: iaf12bab55d41217363cc05ba024f452d03bc21df	2	-2	 5608[0] commit[0] bee0aeafa1ca9552e4caf82ae0cbf7adaf71c4cd[0] refactor[0] how[0] permissions[0] are[0] matched[0] by[0] projectcontrol[0] refcontrol[0] accesssections/accessections[0] are[0] now[0] matched[0] onto[0] references[0] using[0] pre[0] compiled[0] sectionmatcher[0] objects[0] [[Sentence=-1,1=word max, 1-5]] these[0] matchers[0] are[0] built[0] in[0] the[0] projectstate[0] on[0] demand[0] and[0] cached[0] until[0] the[0] projectstate[0] itself[0] is[0] discarded[0] from[0] memory[0] [[Sentence=-1,1=word max, 1-5]] this[0] saves[1] the[0] pattern[0] [[Sentence=-1,2=word max, 1-5]] compile[0] costs[0] as[0] well[0] as[0] some[0] basic[0] conditionals[0] to[0] determine[0] which[0] type[0] of[0] reference[0] pattern[0] the[0] section[0] uses[0] providing[0] a[0] small[0] speed[0] up[0] to[0] access[0] rule[0] evaluation[0] [[Sentence=-1,1=word max, 1-5]] projectcontrol[0] and[0] refcontrol[0] now[0] stores[0] all[0] permissions[0] that[0] belong[0] to[0] the[0] project[0] or[0] reference[0] rather[0] than[0] only[0] the[0] ones[0] relevant[0] for[0] their[0] currentuser[0] [[Sentence=-1,1=word max, 1-5]] this[0] allows[0] the[0] control[0] objects[0] to[0] provide[0] cached[0] data[0] for[0] other[0] users[0] such[0] as[0] when[0] changecontrol[0] needs[0] to[0] build[0] a[0] different[0] copy[0] of[0] itself[0] for[0] each[0] reviewer[0] listed[0] on[0] the[0] change[0] [[Sentence=-1,1=word max, 1-5]] projectcontrol[0] caches[0] refcontrols[0] it[0] builds[0] making[0] it[0] easier[0] for[0] callers[0] like[0] receivecommits[0] or[0] visiblereffilter[0] to[0] deal[0] with[0] a[0] lot[0] of[0] lookups[0] for[0] the[0] same[0] common[0] reference[0] name[0] within[0] a[0] single[0] project[0] access[0] request[0] [[Sentence=-1,1=word max, 1-5]] this[0] comes[0] at[0] a[0] cost[0] of[0] memory[0] but[0] should[0] be[0] an[0] improvement[1] in[0] response[0] time[0] [[Sentence=-1,2=word max, 1-5]] project[0] ownership[0] checks[0] are[0] now[0] handled[0] by[0] projectstate[0] relying[0] on[0] the[0] cached[0] localowners[0] data[0] instead[0] of[0] looking[0] at[0] the[0] owner[0] permission[0] on[0] refs/[0] [[Sentence=-1,1=word max, 1-5]] the[0] cached[0] localowners[0] is[0] already[0] built[0] up[0] from[0] the[0] refs/[0] data[0] during[0] projectstate's[0] constructor[0] so[0] doing[0] it[0] dynamically[0] via[0] refcontrol[0] inside[0] of[0] projectcontrol[0] was[0] really[0] quite[0] wasteful[-1] [[Sentence=-2,1=word max, 1-5]] change[0] id[0] iaf12bab55d41217363cc05ba024f452d03bc21df[0] [[Sentence=-1,1=word max, 1-5]][[[2,-2 max of sentences]]]
5631 commit 8e6bede46de3859c2369a2c87e7a4234b042132f merge: f013fb1 7887a15 merge "minor refactor of updatedchange steps in changeutil" 	5631 commit 8e6bede46de3859c2369a2c87e7a4234b042132f merge: f013fb1 7887a15 merge "minor refactor of updatedchange steps in changeutil"	1	-1	 5631[0] commit[0] 8e6bede46de3859c2369a2c87e7a4234b042132f[0] merge[0] f013fb1[0] 7887a15[0] merge[0] minor[0] refactor[0] of[0] updatedchange[0] steps[0] in[0] changeutil[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
5633 commit 7887a15cd253198a764bb18ba11b33424f75b667 minor refactor of updatedchange steps in changeutil use a common function to set the changemessage and update the approvals cache after updating a change. change-id: i019ce22f819e6d46acc5be4d2ed78b7cccb54ae0 	5633 commit 7887a15cd253198a764bb18ba11b33424f75b667 minor refactor of updatedchange steps in changeutil use a common function to set the changemessage and update the approvals cache after updating a change.<br> change-id: i019ce22f819e6d46acc5be4d2ed78b7ccb54ae0	1	-1	 5633[0] commit[0] 7887a15cd253198a764bb18ba11b33424f75b667[0] minor[0] refactor[0] of[0] updatedchange[0] steps[0] in[0] changeutil[0] use[0] a[0] common[0] function[0] to[0] set[0] the[0] changemessage[0] and[0] update[0] the[0] approvals[0] cache[0] after[0] updating[0] a[0] change[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i019ce22f819e6d46acc5be4d2ed78b7cccb54ae0/i019ce22f819e6d46acc5be4d2ed78b7ccb54ae0[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
5648 commit c9d673a6461349e6c728f41165209b8fd024a9e0 merge: 333b21c 7234862 merge "refactor error messages in changecontrol cansubmit()" 	5648 commit c9d673a6461349e6c728f41165209b8fd024a9e0 merge: 33b21c 7234862 merge "refactor error messages in changecontrol cansubmit(	1	-1	 5648[0] commit[0] c9d673a6461349e6c728f41165209b8fd024a9e0[0] merge[0] 333b21c/33b21c[0] 7234862[0] merge[0] refactor[0] error[0] messages[0] in[0] changecontrol[0] cansubmit[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
5650 commit 72348627804bdadae9b8e6b5bcb0296c11134f1e refactor error messages in changecontrol cansubmit() this method has many escape clauses for errors which all do a lot of work constructing return statuses and error messages. add some helper methods to perform some of this common error handling since much of it is similar or the same. change-id: id9ef81c6c5840f7cf0dcf06c874ea868c85b91ab 	5650 commit 72348627804bdadae9b8e6b5bcb0296c1134f1e refactor error messages in changecontrol cansubmit( this method has many escape clauses for errors which all do a lot of work constructing return statuses and error messages.<br> add some helper methods to perform some of this common error handling since much of it is similar or the same.<br> change-id: id9ef81c6c5840f7cf0dcf06c874ea868c85b91ab	1	-1	 5650[0] commit[0] 72348627804bdadae9b8e6b5bcb0296c11134f1e/72348627804bdadae9b8e6b5bcb0296c1134f1e[0] refactor[0] error[0] messages[0] in[0] changecontrol[0] cansubmit[0] this[0] method[0] has[0] many[0] escape[0] clauses[0] for[0] errors[0] which[0] all[0] do[0] a[0] lot[0] of[0] work[0] constructing[0] return[0] statuses[0] and[0] error[0] messages[0] [[Sentence=-1,1=word max, 1-5]] add[0] some[0] helper[0] methods[0] to[0] perform[0] some[0] of[0] this[0] common[0] error[0] handling[0] since[0] much[0] of[0] it[0] is[0] similar[0] or[0] the[0] same[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] id9ef81c6c5840f7cf0dcf06c874ea868c85b91ab[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
5714 commit 8979aa21fc2260822c23c366c20a077a99e90da4 ls-projects: refactor --tree support to shorten code i found the old way this was organized harder to read. since i am about to add a bunch of new logic to filter around permissions only projects, lets move the showtree related stuff earlier so its out of the way before we get to the filtering and branch output. change-id: i2f4fc6a0fb1d9919048649c89bcc7e60a3bc64bc 	5714 commit 8979a21fc2260822c23c366c20a077a99e90da4 ls-projects: refactor -tree support to shorten code i found the old way this was organized harder to read.<br> since i am about to add a bunch of new logic to filter around permissions only projects, lets move the showtree related stuff earlier so its out of the way before we get to the filtering and branch output.<br> change-id: i2f4fc6a0fb1d9919048649c89bcc7e60a3bc64bc	1	-1	 5714[0] commit[0] 8979aa21fc2260822c23c366c20a077a99e90da4/8979a21fc2260822c23c366c20a077a99e90da4[0] ls[0] projects[0] refactor[0] tree[0] support[0] to[0] shorten[0] code[0] i[0] found[0] the[0] old[0] way[0] this[0] was[0] organized[0] harder[0] to[0] read[0] [[Sentence=-1,1=word max, 1-5]] since[0] i[0] am[0] about[0] to[0] add[0] a[0] bunch[0] of[0] new[0] logic[0] to[0] filter[0] around[0] permissions[0] only[0] projects[0] lets[0] move[0] the[0] showtree[0] related[0] stuff[0] earlier[0] so[0] its[0] out[0] of[0] the[0] way[0] before[0] we[0] get[0] to[0] the[0] filtering[0] and[0] branch[0] output[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i2f4fc6a0fb1d9919048649c89bcc7e60a3bc64bc[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
6132 commit f9b89eedc10c620ecfd3e5ac705b08547ab4eb89 merge: 46d492f fff6b5d merge changes ie8a3ae1f,i7f97aa1e * changes: refactor class mywatchestable out of mywatchedprojectsscreen refactor widget creation in watch ui into a separate function 	6132 commit f9b89eedc10c620ecfd3e5ac705b08547ab4eb89 merge: 46d492f ff6b5d merge changes ie8a3ae1f,i7f97a1e * changes: refactor class mywatchestable out of mywatchedprojectsscreen refactor widget creation in watch ui into a separate function	1	-1	 6132[0] commit[0] f9b89eedc10c620ecfd3e5ac705b08547ab4eb89[0] merge[0] 46d492f[0] fff6b5d/ff6b5d[0] merge[0] changes[0] ie8a3ae1f[0] i7f97aa1e/i7f97a1e[0] changes[0] refactor[0] class[0] mywatchestable[0] out[0] of[0] mywatchedprojectsscreen[0] refactor[0] widget[0] creation[0] in[0] watch[0] ui[0] into[0] a[0] separate[0] function[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
6136 commit 8100029b4450a4ba301948eb75a11832e9f463e6 refactor settingspanel to use a listenable object create a listenableaccountdiffpreference and use it from the patchscriptsettingspanel so that the patschscreen can listen directly to the data model for changes instead of the patchscriptsettingspanel. change-id: i52fb415fcbc1ed15a453840ebde0de8b8d8f6710 	6136 commit 810029b4450a4ba301948eb75a11832e9f463e6 refactor settingspanel to use a listenable object create a listenableaccountdiffpreference and use it from the patchscriptsettingspanel so that the patschscreen can listen directly to the data model for changes instead of the patchscriptsettingspanel.<br> change-id: i52fb415fcbc1ed15a453840ebde0de8b8d8f6710	1	-1	 6136[0] commit[0] 8100029b4450a4ba301948eb75a11832e9f463e6/810029b4450a4ba301948eb75a11832e9f463e6[0] refactor[0] settingspanel[0] to[0] use[0] a[0] listenable[0] object[0] create[0] a[0] listenableaccountdiffpreference[0] and[0] use[0] it[0] from[0] the[0] patchscriptsettingspanel[0] so[0] that[0] the[0] patschscreen[0] can[0] listen[0] directly[0] to[0] the[0] data[0] model[0] for[0] changes[0] instead[0] of[0] the[0] patchscriptsettingspanel[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i52fb415fcbc1ed15a453840ebde0de8b8d8f6710[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
6150 commit 91259f6b66cb031a8cb89b59f493f019bcabf537 split several functions in mywatchedprojectsscreen refactor two functions out of deletechecked(): remove(set accountprojectwatch.key  ids) and set accountprojectwatch.key  getcheckedids() this should help clarify how deletechecked() works and make maintenance a bit easier since it is now possible to override each of the methods separately. also factor out the populatewatches() function. change-id: ia1bff8e628be5ed8e911b23b0b2e7bc1133d12f6 	6150 commit 91259f6b66cb031a8cb89b59f493f019bcabf537 split several functions in mywatchedprojectsscreen refactor two functions out of deletecheckeddeletechecked remove(set accountprojectwatch.<br>key  ids) and set accountprojectwatch.<br>key  getcheckedids( this should help clarify how deletechecked( works and make maintenance a bit easier since it is now possible to override each of the methods separately.<br> also factor out the populatewatches( function.<br> change-id: ia1bff8e628be5ed8e911b23b0b2e7bc1133d12f6	1	-2	 6150[0] commit[0] 91259f6b66cb031a8cb89b59f493f019bcabf537[0] split[0] several[0] functions[0] in[0] mywatchedprojectsscreen[0] refactor[0] two[0] functions[0] out[0] of[0] deletechecked[0][-1 Emoticon] remove[0] set[0] accountprojectwatch[0] [[Sentence=-2,1=word max, 1-5]] key[0] ids[0] and[0] set[0] accountprojectwatch[0] [[Sentence=-1,1=word max, 1-5]] key[0] getcheckedids[0] this[0] should[0] help[0] clarify[0] how[0] deletechecked[0] works[0] and[0] make[0] maintenance[0] a[0] bit[0] easier[0] since[0] it[0] is[0] now[0] possible[0] to[0] override[0] each[0] of[0] the[0] methods[0] separately[0] [[Sentence=-1,1=word max, 1-5]] also[0] factor[0] out[0] the[0] populatewatches[0] function[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] ia1bff8e628be5ed8e911b23b0b2e7bc1133d12f6[0] [[Sentence=-1,1=word max, 1-5]][[[1,-2 max of sentences]]]
6152 commit 5702f7958eca6bd1f702d6ef6905fdd9caa6ef34 refactor widget creation in watch ui into a separate function refactor out the widget creation in mywatchedprojectsscreen into a separate function. this makes a clean separation between business logic and layout logic. also renamed the table widget to reduce naming conflicts between widgets and data structures. change-id: i7f97aa1e0db550653e270a6ec1d78b9399b48b1e 	6152 commit 5702f7958eca6bd1f702d6ef6905fdd9ca6ef34 refactor widget creation in watch ui into a separate function refactor out the widget creation in mywatchedprojectsscreen into a separate function.<br> this makes a clean separation between business logic and layout logic.<br> also renamed the table widget to reduce naming conflicts between widgets and data structures.<br> change-id: i7f97a1e0db550653e270a6ec1d78b9399b48b1e	1	-1	 6152[0] commit[0] 5702f7958eca6bd1f702d6ef6905fdd9caa6ef34/5702f7958eca6bd1f702d6ef6905fdd9ca6ef34[0] refactor[0] widget[0] creation[0] in[0] watch[0] ui[0] into[0] a[0] separate[0] function[0] refactor[0] out[0] the[0] widget[0] creation[0] in[0] mywatchedprojectsscreen[0] into[0] a[0] separate[0] function[0] [[Sentence=-1,1=word max, 1-5]] this[0] makes[0] a[0] clean[0] separation[0] between[0] business[0] logic[0] and[0] layout[0] logic[0] [[Sentence=-1,1=word max, 1-5]] also[0] renamed[0] the[0] table[0] widget[0] to[0] reduce[0] naming[0] conflicts[0] between[0] widgets[0] and[0] data[0] structures[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i7f97aa1e0db550653e270a6ec1d78b9399b48b1e/i7f97a1e0db550653e270a6ec1d78b9399b48b1e[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
6297 commit 27f432a38d60731f9aa571f188abaa968474e62e merge: e6784e9 dc8df35 merge "refactor complex logic out of formatters into getters." 	6297 commit 27f432a38d60731f9a571f188aba968474e62e merge: e6784e9 dc8df35 merge "refactor complex logic out of formatters into getters.	2	-1	 6297[0] commit[0] 27f432a38d60731f9aa571f188abaa968474e62e/27f432a38d60731f9a571f188aba968474e62e[0][+0.6 MultipleLetters] merge[0] e6784e9[0] dc8df35[0] merge[0] refactor[0] complex[0] logic[0] out[0] of[0] formatters[0] into[0] getters[0] [[Sentence=-1,2=word max, 1-5]][[[2,-1 max of sentences]]]
6298 commit dc8df3553dbdc23e1e7625bd99b596b4a9acc94b refactor complex logic out of formatters into getters. create 2 new getters via refactoring: getsshhost() and getemailregistrationtoken() and use them in formatters. change-id: i7f9bc24521b38222c80ed3f57fcbf8de032a6203 	6298 commit dc8df3553dbdc23e1e7625bd99b596b4a9acc94b refactor complex logic out of formatters into getters.<br> create 2 new getters via refactoring: getsshost( and getemailregistrationtoken( and use them in formatters.<br> change-id: i7f9bc24521b3822c80ed3f57fcbf8de032a6203	1	-1	 6298[0] commit[0] dc8df3553dbdc23e1e7625bd99b596b4a9acc94b[0] refactor[0] complex[0] logic[0] out[0] of[0] formatters[0] into[0] getters[0] [[Sentence=-1,1=word max, 1-5]] create[0] 2[0] new[0] getters[0] via[0] refactoring[0] getsshhost/getsshost[0] and[0] getemailregistrationtoken[0] and[0] use[0] them[0] in[0] formatters[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i7f9bc24521b38222c80ed3f57fcbf8de032a6203/i7f9bc24521b3822c80ed3f57fcbf8de032a6203[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
6600 commit 293a3e2f254de802902acd4fb880070099f65882 refactor and add to streaming events schema combine changes, accounts, and patchsets into their own trees in the serialized json. also add more fields including change numbers, owners for the change, canonical url to the change, and description of the approval type. change-id: i23b75896bc34fa8695105eff68142e974f1067c8 	6600 commit 293a3e2f254de802902acd4fb880070099f65882 refactor and add to streaming events schema combine changes, accounts, and patchsets into their own trees in the serialized json.<br> also add more fields including change numbers, owners for the change, canonical url to the change, and description of the approval type.<br> change-id: i23b75896bc34fa8695105eff68142e974f1067c8	1	-1	 6600[0] commit[0] 293a3e2f254de802902acd4fb880070099f65882[0] refactor[0] and[0] add[0] to[0] streaming[0] events[0] schema[0] combine[0] changes[0] accounts[0] and[0] patchsets[0] into[0] their[0] own[0] trees[0] in[0] the[0] serialized[0] json[0] [[Sentence=-1,1=word max, 1-5]] also[0] add[0] more[0] fields[0] including[0] change[0] numbers[0] owners[0] for[0] the[0] change[0] canonical[0] url[0] to[0] the[0] change[0] and[0] description[0] of[0] the[0] approval[0] type[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i23b75896bc34fa8695105eff68142e974f1067c8[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
6727 commit 4039675ad5f802b8327eb7f9acb452acce62103c refactor the ssh session state we want to split the session state apart from the actual connection so we can implement a "set uid" feature later, where the user running a command may not match the original authentication. change-id: i0c9d31b4f5f04849e1c4a171243f0f376056c2c8 signed-off-by: shawn o. pearce  sop@google.com  	6727 commit 4039675ad5f802b8327eb7f9acb452acce62103c refactor the ssh session state we want to split the session state apart from the actual connection so we can implement a "set uid" feature later, where the user running a command may not match the original authentication.<br> change-id: i0c9d31b4f5f04849e1c4a171243f0f376056c2c8 signed-off-by: shawn o.<br> pearce  sop@google.<br>com 	1	-1	 6727[0] commit[0] 4039675ad5f802b8327eb7f9acb452acce62103c[0] refactor[0] the[0] ssh[0] session[0] state[0] we[0] want[0] to[0] split[0] the[0] session[0] state[0] apart[0] from[0] the[0] actual[0] connection[0] so[0] we[0] can[0] implement[0] a[0] set[0] uid[0] feature[0] later[0] where[0] the[0] user[0] running[0] a[0] command[0] may[0] not[0] match[0] the[0] original[0] authentication[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i0c9d31b4f5f04849e1c4a171243f0f376056c2c8[0] signed[0] off[0] by[0] shawn[0] o[0] [[Sentence=-1,1=word max, 1-5]] pearce[0] sop@google[0] [[Sentence=-1,1=word max, 1-5]] com[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
6926 commit f0b848506f032a878af498bcb42ed71ff7dfbfad launcher: refactor how we return the status code to the shell instead of doing a direct system.exit() use return to return the exit code to the caller, which is the true main method for the application. this simplifies the calling strategy considerably. change-id: i3b056579726a56bd9a1ab7186265dc5c5ebeeacc signed-off-by: shawn o. pearce  sop@google.com  	6926 commit f0b848506f032a878af498bcb42ed71ff7dfbfad launcher: refactor how we return the status code to the shell instead of doing a direct system.<br>exit( use return to return the exit code to the caller, which is the true main method for the application.<br> this simplifies the calling strategy considerably.<br> change-id: i3b056579726a56bd9a1ab7186265dc5c5ebeeac signed-off-by: shawn o.<br> pearce  sop@google.<br>com 	2	-2	 6926[0] commit[0] f0b848506f032a878af498bcb42ed71ff7dfbfad[0] launcher[0] refactor[0] how[0] we[0] return[0] the[0] status[0] code[0] to[0] the[0] shell[0] instead[0] of[0] doing[0] a[0] direct[0] system[0] [[Sentence=-1,1=word max, 1-5]] exit[-1] use[0] return[0] to[0] return[0] the[0] exit[-1] code[0] to[0] the[0] caller[0] which[0] is[0] the[0] true[1] main[0] method[0] for[0] the[0] application[0] [[Sentence=-2,2=word max, 1-5]] this[0] simplifies[0] the[0] calling[0] strategy[0] considerably[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i3b056579726a56bd9a1ab7186265dc5c5ebeeacc/i3b056579726a56bd9a1ab7186265dc5c5ebeeac[0] signed[0] off[0] by[0] shawn[0] o[0] [[Sentence=-1,1=word max, 1-5]] pearce[0] sop@google[0] [[Sentence=-1,1=word max, 1-5]] com[0] [[Sentence=-1,1=word max, 1-5]][[[2,-2 max of sentences]]]
7092 commit f127957799cc081468b409a405075f6960df4fab daemon: remove unnecessary requirement of httpservletrequest brad pointed out that  java -jar gerrit.war daemon  failed because httpservletrequest was not in the classpath. this was an unfortunate dependency caused by gerritglobalmodule setting up the canonicalweburl with a bytecode reference to an optional provider httpservletrequest . although the provider could be supplied as null, the bytecode did not load and verify because the httpservletrequest was not available in the classpath. by refactoring the global module to require the caller to supply the binding for the canonicalweburl, we can avoid needing to reference the httpservletrequest from code intended to run in the daemon mode. in the future we should refactor the build process so that pure daemon code does not have visiblity at compile time to the servlet api, thus making this sort of error visible at compile time, rather than finding it late at runtime. unfortunately this requires creating several poms in the maven build. bug: gerrit-281 change-id: ibea06bfca8f6b2186ee2f6eff297d25318d6c418 signed-off-by: shawn o. pearce  sop@google.com  cc: brad larson  bklarson@gmail.com  	7092 commit f127957799cc081468b409a405075f6960df4fab daemon: remove unnecessary requirement of httpservletrequest brad pointed out that  java -jar gerrit.<br>war daemon  failed because httpservletrequest was not in the classpath.<br> this was an unfortunate dependency caused by gerritglobalmodule setting up the canonicalweburl with a bytecode reference to an optional provider httpservletrequest .<br> although the provider could be supplied as null, the bytecode did not load and verify because the httpservletrequest was not available in the classpath.<br> by refactoring the global module to require the caller to supply the binding for the canonicalweburl, we can avoid needing to reference the httpservletrequest from code intended to run in the daemon mode.<br> in the future we should refactor the build process so that pure daemon code does not have visiblity at compile time to the servlet api, thus making this sort of error visible at compile time, rather than finding it late at runtime.<br> unfortunately this requires creating several poms in the maven build.<br> bug: gerrit-281 change-id: ibea06bfca8f6b2186ee2f6eff297d25318d6c418 signed-off-by: shawn o.<br> pearce  sop@google.<br>com  c: brad larson  bklarson@gmail.<br>com 	1	-3	 7092[0] commit[0] f127957799cc081468b409a405075f6960df4fab[0] daemon[0] remove[0] unnecessary[-1] requirement[0] of[0] httpservletrequest[0] brad[0] pointed[0] out[0] that[0] java[0] jar[0] gerrit[0] [[Sentence=-2,1=word max, 1-5]] war[-2] daemon[0] failed[0] because[0] httpservletrequest[0] was[0] not[0] in[0] the[0] classpath[0] [[Sentence=-3,1=word max, 1-5]] this[0] was[0] an[0] unfortunate[-1] dependency[0] caused[0] by[0] gerritglobalmodule[0] setting[0] up[0] the[0] canonicalweburl[0] with[0] a[0] bytecode[0] reference[0] to[0] an[0] optional[0] provider[0] httpservletrequest[0] [[Sentence=-2,1=word max, 1-5]] although[0] the[0] provider[0] could[0] be[0] supplied[0] as[0] null[0] the[0] bytecode[0] did[0] not[0] load[0] and[0] verify[0] because[0] the[0] httpservletrequest[0] was[0] not[0] available[0] in[0] the[0] classpath[0] [[Sentence=-1,1=word max, 1-5]] by[0] refactoring[0] the[0] global[0] module[0] to[0] require[0] the[0] caller[0] to[0] supply[0] the[0] binding[0] for[0] the[0] canonicalweburl[0] we[0] can[0] avoid[-1] needing[0] to[0] reference[0] the[0] httpservletrequest[0] from[0] code[0] intended[0] to[0] run[0] in[0] the[0] daemon[0] mode[0] [[Sentence=-2,1=word max, 1-5]] in[0] the[0] future[0] we[0] should[0] refactor[0] the[0] build[0] process[0] so[0] that[0] pure[0] daemon[0] code[0] does[0] not[0] have[0] visiblity[0] at[0] compile[0] time[0] to[0] the[0] servlet[0] api[0] thus[0] making[0] this[0] sort[0] of[0] error[0] visible[0] at[0] compile[0] time[0] rather[0] than[0] finding[0] it[0] late[0] at[0] runtime[0] [[Sentence=-1,1=word max, 1-5]] unfortunately[-1] this[0] requires[0] creating[0] several[0] poms[0] in[0] the[0] maven[0] build[0] [[Sentence=-2,1=word max, 1-5]] bug[0] gerrit[0] -281[0] change[0] id[0] ibea06bfca8f6b2186ee2f6eff297d25318d6c418[0] signed[0] off[0] by[0] shawn[0] o[0] [[Sentence=-1,1=word max, 1-5]] pearce[0] sop@google[0] [[Sentence=-1,1=word max, 1-5]] com[0] cc/c[0] brad[0] larson[0] bklarson@gmail[0] [[Sentence=-1,1=word max, 1-5]] com[0] [[Sentence=-1,1=word max, 1-5]][[[1,-3 max of sentences]]]
7159 commit d4aa0cc9991a25e501d8fb7e9cdcdaf0a2656ca5 fix project owner permissions and refactor project admin service project owner permission were slightly broken in 2.0.19 as they required the owner to have read permission on their own project in order to use the branches panel to manage the branches. this was wrong, and not what we had intended to have happen. this refactoring pulls all of the individual rpc methods out of the projectadminserviceimpl into their own per-request classes, taking only their exact dependencies as injections from guice. we also now use the projectcontrol everywhere to manage access. branch creation and deletion checks are now performed in projectcontrol for both web and ssh interfaces. this allows a user who has ssh access to create or delete branches in a project to also use the web ui, even though they are not a project owner. currently the user must know (or guess) the project info page url however to gain access to the web ui if they are not listed as an owner for that project. like before however, project owners do not have create or delete branch access over ssh unless they specifically grant themselves this permission. this is intentional and is meant to reduce the risk of a branch being created or deleted remotely over ssh due to a typo while using "git push". change-id: i2d350f870817fdf51a7db4c644c7f47ecb2f6171 signed-off-by: shawn o. pearce  sop@google.com  	7159 commit d4a0cc991a25e501d8fb7e9cdcdaf0a2656ca5 fix project owner permissions and refactor project admin service project owner permission were slightly broken in 2.0.19 as they required the owner to have read permission on their own project in order to use the branches panel to manage the branches.<br> this was wrong, and not what we had intended to have happen.<br> this refactoring pulls all of the individual rpc methods out of the projectadminserviceimpl into their own per-request classes, taking only their exact dependencies as injections from guice.<br> we also now use the projectcontrol everywhere to manage access.<br> branch creation and deletion checks are now performed in projectcontrol for both web and ssh interfaces.<br> this allows a user who has ssh access to create or delete branches in a project to also use the web ui, even though they are not a project owner.<br> currently the user must know (or guess) the project info page url however to gain access to the web ui if they are not listed as an owner for that project.<br> like before however, project owners do not have create or delete branch access over ssh unless they specifically grant themselves this permission.<br> this is intentional and is meant to reduce the risk of a branch being created or deleted remotely over ssh due to a typo while using "git push"<br> change-id: i2d350f870817fdf51a7db4c644c7f47ecb2f6171 signed-off-by: shawn o.<br> pearce  sop@google.<br>com 	2	-2	 7159[0] commit[0] d4aa0cc9991a25e501d8fb7e9cdcdaf0a2656ca5/d4a0cc991a25e501d8fb7e9cdcdaf0a2656ca5[0][+0.6 MultipleLetters] fix[0] project[0] owner[0] permissions[0] and[0] refactor[0] project[0] admin[0] service[0] project[0] owner[0] permission[0] were[0] slightly[0] broken[-1][--1 LastWordBoosterStrength] in[0] 2[0] .0[0] .19[0] as[0] they[0] required[0] the[0] owner[0] to[0] have[0] read[0] permission[0] on[0] their[0] own[0] project[0] in[0] order[0] to[0] use[0] the[0] branches[0] panel[0] to[0] manage[0] the[0] branches[0] [[Sentence=-1,2=word max, 1-5]] this[0] was[0] wrong[0] and[0] not[0] what[0] we[0] had[0] intended[0] to[0] have[0] happen[0] [[Sentence=-1,1=word max, 1-5]] this[0] refactoring[0] pulls[0] all[0] of[0] the[0] individual[0] rpc[0] methods[0] out[0] of[0] the[0] projectadminserviceimpl[0] into[0] their[0] own[0] per[0] request[0] classes[0] taking[0] only[0] their[0] exact[0] dependencies[0] as[0] injections[0] from[0] guice[0] [[Sentence=-1,1=word max, 1-5]] we[0] also[0] now[0] use[0] the[0] projectcontrol[0] everywhere[0] to[0] manage[0] access[0] [[Sentence=-1,1=word max, 1-5]] branch[0] creation[0] and[0] deletion[0] checks[0] are[0] now[0] performed[0] in[0] projectcontrol[0] for[0] both[0] web[0] and[0] ssh[0] interfaces[0] [[Sentence=-1,1=word max, 1-5]] this[0] allows[0] a[0] user[0] who[0] has[0] ssh[0] access[0] to[0] create[0] or[0] delete[0] branches[0] in[0] a[0] project[0] to[0] also[0] use[0] the[0] web[0] ui[0] even[0] though[0] they[0] are[0] not[0] a[0] project[0] owner[0] [[Sentence=-1,1=word max, 1-5]] currently[0] the[0] user[0] must[0] know[0] or[0] guess[0] the[0] project[0] info[0] page[0] url[0] however[0] to[0] gain[0] access[0] to[0] the[0] web[0] ui[0] if[0] they[0] are[0] not[0] listed[0] as[0] an[0] owner[0] for[0] that[0] project[0] [[Sentence=-1,1=word max, 1-5]] like[0] before[0] however[0] project[0] owners[0] do[0] not[0] have[0] create[0] or[0] delete[0] branch[0] access[0] over[0] ssh[0] unless[0] they[0] specifically[0] grant[0] themselves[0] this[0] permission[0] [[Sentence=-1,1=word max, 1-5]] this[0] is[0] intentional[0] and[0] is[0] meant[0] to[0] reduce[0] the[0] risk[-1] of[0] a[0] branch[0] being[0] created[0] or[0] deleted[0] remotely[0] over[0] ssh[0] due[0] to[0] a[0] typo[0] while[0] using[0] git[0] push[0] [[Sentence=-2,1=word max, 1-5]] change[0] id[0] i2d350f870817fdf51a7db4c644c7f47ecb2f6171[0] signed[0] off[0] by[0] shawn[0] o[0] [[Sentence=-1,1=word max, 1-5]] pearce[0] sop@google[0] [[Sentence=-1,1=word max, 1-5]] com[0] [[Sentence=-1,1=word max, 1-5]][[[2,-2 max of sentences]]]
7419 commit 5013c9c13352b405a8c782500bdd968d204e6f27 refactor command thread creation logic into basecommand the thread creation is now optional, permitting dispatchcommand to not use it, while other subclasses do take advantage of it being available. error handling for the thread is now consistently handled in one spot, ensuring we get errors back in the client and in the log. signed-off-by: shawn o. pearce  sop@google.com  	7419 commit 5013c9c13352b405a8c782500bdd968d204e6f27 refactor command thread creation logic into basecommand the thread creation is now optional, permitting dispatchcommand to not use it, while other subclasses do take advantage of it being available.<br> error handling for the thread is now consistently handled in one spot, ensuring we get errors back in the client and in the log.<br> signed-off-by: shawn o.<br> pearce  sop@google.<br>com 	1	-1	 7419[0] commit[0] 5013c9c13352b405a8c782500bdd968d204e6f27[0] refactor[0] command[0] thread[0] creation[0] logic[0] into[0] basecommand[0] the[0] thread[0] creation[0] is[0] now[0] optional[0] permitting[0] dispatchcommand[0] to[0] not[0] use[0] it[0] while[0] other[0] subclasses[0] do[0] take[0] advantage[0] of[0] it[0] being[0] available[0] [[Sentence=-1,1=word max, 1-5]] error[0] handling[0] for[0] the[0] thread[0] is[0] now[0] consistently[0] handled[0] in[0] one[0] spot[0] ensuring[0] we[0] get[0] errors[0] back[0] in[0] the[0] client[0] and[0] in[0] the[0] log[0] [[Sentence=-1,1=word max, 1-5]] signed[0] off[0] by[0] shawn[0] o[0] [[Sentence=-1,1=word max, 1-5]] pearce[0] sop@google[0] [[Sentence=-1,1=word max, 1-5]] com[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
7420 commit 80cc01fe773e345f0156ea62bd63b71ce11b5bd4 refactor command handling to support subcommands in guice this simplifies the way commands are managed, by allowing a dispatchcommand to be used to delegate functionality into a new subcommand during command line parsing. signed-off-by: shawn o. pearce  sop@google.com  	7420 commit 80cc01fe773e345f0156ea62bd63b71ce11b5bd4 refactor command handling to support subcommands in guice this simplifies the way commands are managed, by allowing a dispatchcommand to be used to delegate functionality into a new subcommand during command line parsing.<br> signed-off-by: shawn o.<br> pearce  sop@google.<br>com 	1	-1	 7420[0] commit[0] 80cc01fe773e345f0156ea62bd63b71ce11b5bd4[0] refactor[0] command[0] handling[0] to[0] support[0] subcommands[0] in[0] guice[0] this[0] simplifies[0] the[0] way[0] commands[0] are[0] managed[0] by[0] allowing[0] a[0] dispatchcommand[0] to[0] be[0] used[0] to[0] delegate[0] functionality[0] into[0] a[0] new[0] subcommand[0] during[0] command[0] line[0] parsing[0] [[Sentence=-1,1=word max, 1-5]] signed[0] off[0] by[0] shawn[0] o[0] [[Sentence=-1,1=word max, 1-5]] pearce[0] sop@google[0] [[Sentence=-1,1=word max, 1-5]] com[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
7633 commit 57b4db7eec526e0d0df9355695f2a80d7316c301 refactor submitter to personident mapping in mergeop this permits us to reuse the logic for other contexts where we want to convert from the one to the other. signed-off-by: shawn o. pearce  sop@google.com  	7633 commit 57b4db7eec526e0d0df9355695f2a80d7316c301 refactor submitter to personident mapping in mergeop this permits us to reuse the logic for other contexts where we want to convert from the one to the other.<br> signed-off-by: shawn o.<br> pearce  sop@google.<br>com 	1	-1	 7633[0] commit[0] 57b4db7eec526e0d0df9355695f2a80d7316c301[0] refactor[0] submitter[0] to[0] personident[0] mapping[0] in[0] mergeop[0] this[0] permits[0] us[0] to[0] reuse[0] the[0] logic[0] for[0] other[0] contexts[0] where[0] we[0] want[0] to[0] convert[0] from[0] the[0] one[0] to[0] the[0] other[0] [[Sentence=-1,1=word max, 1-5]] signed[0] off[0] by[0] shawn[0] o[0] [[Sentence=-1,1=word max, 1-5]] pearce[0] sop@google[0] [[Sentence=-1,1=word max, 1-5]] com[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
7701 commit f83977e83afade199727b686649e0026a65ca54a refactor workqueue to support task inspection by extending the scheduledthreadpoolexecutor we are able to apply a decoration to the tasks before they are added to the queue, giving us the ability to pull them out at a later point in time and get any data we want, in particular, the input runnable. signed-off-by: shawn o. pearce  sop@google.com  	7701 commit f83977e83afade199727b686649e0026a65ca54a refactor workqueue to support task inspection by extending the scheduledthreadpoolexecutor we are able to apply a decoration to the tasks before they are added to the queue, giving us the ability to pull them out at a later point in time and get any data we want, in particular, the input runnable.<br> signed-off-by: shawn o.<br> pearce  sop@google.<br>com 	1	-1	 7701[0] commit[0] f83977e83afade199727b686649e0026a65ca54a[0] refactor[0] workqueue[0] to[0] support[0] task[0] inspection[0] by[0] extending[0] the[0] scheduledthreadpoolexecutor[0] we[0] are[0] able[0] to[0] apply[0] a[0] decoration[0] to[0] the[0] tasks[0] before[0] they[0] are[0] added[0] to[0] the[0] queue[0] giving[0] us[0] the[0] ability[0] to[0] pull[0] them[0] out[0] at[0] a[0] later[0] point[0] in[0] time[0] and[0] get[0] any[0] data[0] we[0] want[0] in[0] particular[0] the[0] input[0] runnable[0] [[Sentence=-1,1=word max, 1-5]] signed[0] off[0] by[0] shawn[0] o[0] [[Sentence=-1,1=word max, 1-5]] pearce[0] sop@google[0] [[Sentence=-1,1=word max, 1-5]] com[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
7702 commit 2fed965927e603220bf78ebc1b7083ab79013e88 refactor pushqueue.scheduleupdate to be smaller methods its a lot easier to follow what happens here by using small, self contained methods with clear return types and responsibilities. signed-off-by: shawn o. pearce  sop@google.com  	7702 commit 2fed965927e603220bf78ebc1b7083ab79013e88 refactor pushqueue.<br>scheduleupdate to be smaller methods its a lot easier to follow what happens here by using small, self contained methods with clear return types and responsibilities.<br> signed-off-by: shawn o.<br> pearce  sop@google.<br>com 	1	-1	 7702[0] commit[0] 2fed965927e603220bf78ebc1b7083ab79013e88[0] refactor[0] pushqueue[0] [[Sentence=-1,1=word max, 1-5]] scheduleupdate[0] to[0] be[0] smaller[0] methods[0] its[0] a[0] lot[0] easier[0] to[0] follow[0] what[0] happens[0] here[0] by[0] using[0] small[0] self[0] contained[0] methods[0] with[0] clear[0] return[0] types[0] and[0] responsibilities[0] [[Sentence=-1,1=word max, 1-5]] signed[0] off[0] by[0] shawn[0] o[0] [[Sentence=-1,1=word max, 1-5]] pearce[0] sop@google[0] [[Sentence=-1,1=word max, 1-5]] com[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
7852 commit 6b1ed4c1e126806f3afe38302139cd05ef9aeb48 refactor gerrit flush-caches to just flush everything in ehcache most caches under ehcache control should be flushed when we receive a "gerrit flush-caches" command. so dump them all, except the one "diff" cache that we want to retain no matter what. this way we will automatically flush any other caches that may be configured by the server, without needing to edit this code. signed-off-by: shawn o. pearce  sop@google.com  	7852 commit 6b1ed4c1e126806f3afe38302139cd05ef9aeb48 refactor gerrit flush-caches to just flush everything in ehcache most caches under ehcache control should be flushed when we receive a "gerrit flush-caches" command.<br> so dump them all, except the one "diff" cache that we want to retain no matter what.<br> this way we will automatically flush any other caches that may be configured by the server, without needing to edit this code.<br> signed-off-by: shawn o.<br> pearce  sop@google.<br>com 	1	-1	 7852[0] commit[0] 6b1ed4c1e126806f3afe38302139cd05ef9aeb48[0] refactor[0] gerrit[0] flush[0] caches[0] to[0] just[0] flush[0] everything[0] in[0] ehcache[0] most[0] caches[0] under[0] ehcache[0] control[0] should[0] be[0] flushed[0] when[0] we[0] receive[0] a[0] gerrit[0] flush[0] caches[0] command[0] [[Sentence=-1,1=word max, 1-5]] so[0] dump[0] them[0] all[0] except[0] the[0] one[0] diff[0] cache[0] that[0] we[0] want[0] to[0] retain[0] no[0] matter[0] what[0] [[Sentence=-1,1=word max, 1-5]] this[0] way[0] we[0] will[0] automatically[0] flush[0] any[0] other[0] caches[0] that[0] may[0] be[0] configured[0] by[0] the[0] server[0] without[0] needing[0] to[0] edit[0] this[0] code[0] [[Sentence=-1,1=word max, 1-5]] signed[0] off[0] by[0] shawn[0] o[0] [[Sentence=-1,1=word max, 1-5]] pearce[0] sop@google[0] [[Sentence=-1,1=word max, 1-5]] com[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
8171 commit 43473176853da388bf3a699d89c33e19e5302eb8 refactor read access testing to reuse for other function types this paves the way for git based ssh commands operating on a project to test other types of approval categories beyond the basic "read" category used for coarse-grained access controls. signed-off-by: shawn o. pearce  sop@google.com  	8171 commit 43473176853da388bf3a699d89c33e19e5302eb8 refactor read access testing to reuse for other function types this paves the way for git based ssh commands operating on a project to test other types of approval categories beyond the basic "read" category used for coarse-grained access controls.<br> signed-off-by: shawn o.<br> pearce  sop@google.<br>com 	1	-2	 8171[0] commit[0] 43473176853da388bf3a699d89c33e19e5302eb8[0] refactor[0] read[0] access[0] testing[0] to[0] reuse[0] for[0] other[0] function[0] types[0] this[0] paves[0] the[0] way[0] for[0] git[0] based[0] ssh[0] commands[0] operating[0] on[0] a[0] project[0] to[0] test[0] other[0] types[0] of[0] approval[0] categories[0] beyond[0] the[0] basic[0] read[0] category[0] used[0] for[0] coarse[-1] grained[0] access[0] controls[0] [[Sentence=-2,1=word max, 1-5]] signed[0] off[0] by[0] shawn[0] o[0] [[Sentence=-1,1=word max, 1-5]] pearce[0] sop@google[0] [[Sentence=-1,1=word max, 1-5]] com[0] [[Sentence=-1,1=word max, 1-5]][[[1,-2 max of sentences]]]
8323 commit 9a2a97d6aa5fb9dfaed1a0870e0bdaa38ff803a5 refactor the entire login panel to avoid reloading the module its significantly faster if the open id login panel is part of the same application, and simply inserts itself into the sign in dialog rather than loading through a separate html host page. we also now remember (at the user's option) the last openid url the user successfully logged in with, so it can be presented in future sign-in attempts. this helps in case the user forgets which provider they have used, or which account at that provider. signed-off-by: shawn o. pearce  sop@google.com  	8323 commit 9a2a97d6a5fb9dfaed1a0870e0bda38ff803a5 refactor the entire login panel to avoid reloading the module its significantly faster if the open id login panel is part of the same application, and simply inserts itself into the sign in dialog rather than loading through a separate html host page.<br> we also now remember (at the user's option) the last openid url the user successfully logged in with, so it can be presented in future sign-in attempts.<br> this helps in case the user forgets which provider they have used, or which account at that provider.<br> signed-off-by: shawn o.<br> pearce  sop@google.<br>com 	2	-2	 8323[0] commit[0] 9a2a97d6aa5fb9dfaed1a0870e0bdaa38ff803a5/9a2a97d6a5fb9dfaed1a0870e0bda38ff803a5[0][+0.6 MultipleLetters] refactor[0] the[0] entire[0] login[0] panel[0] to[0] avoid[-1] reloading[0] the[0] module[0] its[0] significantly[0] faster[0] if[0] the[0] open[0] id[0] login[0] panel[0] is[0] part[0] of[0] the[0] same[0] application[0] and[0] simply[0] inserts[0] itself[0] into[0] the[0] sign[0] in[0] dialog[0] rather[0] than[0] loading[0] through[0] a[0] separate[0] html[0] host[0] page[0] [[Sentence=-2,2=word max, 1-5]] we[0] also[0] now[0] remember[0] at[0] the[0] user's[0] option[0] the[0] last[0] openid[0] url[0] the[0] user[0] successfully[0] logged[0] in[0] with[0] so[0] it[0] can[0] be[0] presented[0] in[0] future[0] sign[0] in[0] attempts[0] [[Sentence=-1,1=word max, 1-5]] this[0] helps[0] in[0] case[0] the[0] user[0] forgets[0] which[0] provider[0] they[0] have[0] used[0] or[0] which[0] account[0] at[0] that[0] provider[0] [[Sentence=-1,1=word max, 1-5]] signed[0] off[0] by[0] shawn[0] o[0] [[Sentence=-1,1=word max, 1-5]] pearce[0] sop@google[0] [[Sentence=-1,1=word max, 1-5]] com[0] [[Sentence=-1,1=word max, 1-5]][[[2,-2 max of sentences]]]
8546 commit 47c5e2ca876b80600b88e76aa1a88760f7810d9f refactor changetable so much of its ui is reusable signed-off-by: shawn o. pearce  sop@google.com  	8546 commit 47c5e2ca876b80600b88e76a1a88760f7810d9f refactor changetable so much of its ui is reusable signed-off-by: shawn o.<br> pearce  sop@google.<br>com 	1	-1	 8546[0] commit[0] 47c5e2ca876b80600b88e76aa1a88760f7810d9f/47c5e2ca876b80600b88e76a1a88760f7810d9f[0] refactor[0] changetable[0] so[0] much[0] of[0] its[0] ui[0] is[0] reusable[0] signed[0] off[0] by[0] shawn[0] o[0] [[Sentence=-1,1=word max, 1-5]] pearce[0] sop@google[0] [[Sentence=-1,1=word max, 1-5]] com[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
8560 commit b7e97311e007acf4aa65adbc49a1af8a8670a889 refactor database access code into a general baseserviceimplementation this makes writing the service methods easier, as each method uses a custom implementation of the action class. signed-off-by: shawn o. pearce  sop@google.com  	8560 commit b7e97311e007acf4a65adbc49a1af8a8670a889 refactor database access code into a general baseserviceimplementation this makes writing the service methods easier, as each method uses a custom implementation of the action class.<br> signed-off-by: shawn o.<br> pearce  sop@google.<br>com 	1	-1	 8560[0] commit[0] b7e97311e007acf4aa65adbc49a1af8a8670a889/b7e97311e007acf4a65adbc49a1af8a8670a889[0] refactor[0] database[0] access[0] code[0] into[0] a[0] general[0] baseserviceimplementation[0] this[0] makes[0] writing[0] the[0] service[0] methods[0] easier[0] as[0] each[0] method[0] uses[0] a[0] custom[0] implementation[0] of[0] the[0] action[0] class[0] [[Sentence=-1,1=word max, 1-5]] signed[0] off[0] by[0] shawn[0] o[0] [[Sentence=-1,1=word max, 1-5]] pearce[0] sop@google[0] [[Sentence=-1,1=word max, 1-5]] com[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
8562 commit d5a22550a2eaed35a08fe544c0e3e0de98321ed9 refactor the "current account id lookup" to a common rpcutil this way we aren't duplicating code in each service implementation to obtain the account.id from the cookie. instead we rely upon the account object in our gerrit module, or we rely upon the thread local inside of the jsonservlet to give us the current gerritcall. signed-off-by: shawn o. pearce  sop@google.com  	8562 commit d5a22550a2eaed35a08fe544c0e3e0de98321ed9 refactor the "current account id lookup" to a common rpcutil this way we aren't duplicating code in each service implementation to obtain the account.<br>id from the cookie.<br> instead we rely upon the account object in our gerrit module, or we rely upon the thread local inside of the jsonservlet to give us the current gerritcall.<br> signed-off-by: shawn o.<br> pearce  sop@google.<br>com 	1	-1	 8562[0] commit[0] d5a22550a2eaed35a08fe544c0e3e0de98321ed9[0] refactor[0] the[0] current[0] account[0] id[0] lookup[0] to[0] a[0] common[0] rpcutil[0] this[0] way[0] we[0] aren't[0] duplicating[0] code[0] in[0] each[0] service[0] implementation[0] to[0] obtain[0] the[0] account[0] [[Sentence=-1,1=word max, 1-5]] id[0] from[0] the[0] cookie[0] [[Sentence=-1,1=word max, 1-5]] instead[0] we[0] rely[0] upon[0] the[0] account[0] object[0] in[0] our[0] gerrit[0] module[0] or[0] we[0] rely[0] upon[0] the[0] thread[0] local[0] inside[0] of[0] the[0] jsonservlet[0] to[0] give[0] us[0] the[0] current[0] gerritcall[0] [[Sentence=-1,1=word max, 1-5]] signed[0] off[0] by[0] shawn[0] o[0] [[Sentence=-1,1=word max, 1-5]] pearce[0] sop@google[0] [[Sentence=-1,1=word max, 1-5]] com[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
