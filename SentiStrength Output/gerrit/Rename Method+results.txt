Rename Method	Translation	Positive	Negative	EmotionRationale
124 commit cc00e0056991355b8780bebd221acf3baf1f55e7 refactor refcontroltest refactor refcontroltest for extracting out reusable code for the following up commit id12dbec23a7. change-id: i4b9ea23b83de648910a07a162ae1c30820d0136b 	124 commit cc00e0056991355b8780bebd221acf3baf1f55e7 refactor refcontroltest refactor refcontroltest for extracting out reusable code for the following up commit id12dbec23a7.<br> change-id: i4b9ea23b83de648910a07a162ae1c30820d0136b	1	-1	 124[0] commit[0] cc00e0056991355b8780bebd221acf3baf1f55e7[0] refactor[0] refcontroltest[0] refactor[0] refcontroltest[0] for[0] extracting[0] out[0] reusable[0] code[0] for[0] the[0] following[0] up[0] commit[0] id12dbec23a7[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i4b9ea23b83de648910a07a162ae1c30820d0136b[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
267 commit 536c754edf40917423d9ef940846a6fec4386fc3 run dashboard queries in parallel if the secondary index is enabled and is using a remote cluster (for example solr or the system behind gerrit-review) running the user's dashboard queries in parallel can reduce overall latency. this refactoring slightly simplifies the code by pushing the logic to check "is:visible" back into andsource, which already supports batch loading change objects for changedata. an alternative implementation to run dashboard queries in parallel is to have the browser send one rest api request for each query. this is a mixed bag. the browser is limited to sending 2-4 requests at once to the same source server. on a browser with a limit of 2 pending requests 3 queries will incur significant latency. the browser may still be loading /#/ and needing to pull in additional assets like images and css. stealing request slots for rest apis contributes to overall page load latency. however, it is simple to load balance at the server side, as each query uses its own thread. change-id: i7bf5e2be8b6cb5e8487a19ecf69c4c184c7ed1ac 	267 commit 536c754edf40917423d9ef940846a6fec4386fc3 run dashboard queries in parallel if the secondary index is enabled and is using a remote cluster (for example solr or the system behind gerrit-review) running the user's dashboard queries in parallel can reduce overall latency.<br> this refactoring slightly simplifies the code by pushing the logic to check "is:visible" back into andsource, which already supports batch loading change objects for changedata.<br> an alternative implementation to run dashboard queries in parallel is to have the browser send one rest api request for each query.<br> this is a mixed bag.<br> the browser is limited to sending 2-4 requests at once to the same source server.<br> on a browser with a limit of 2 pending requests 3 queries will incur significant latency.<br> the browser may still be loading /#/ and needing to pull in additional assets like images and css.<br> stealing request slots for rest apis contributes to overall page load latency.<br> however, it is simple to load balance at the server side, as each query uses its own thread.<br> change-id: i7bf5e2be8b6cb5e8487a19ecf69c4c184c7ed1ac	2	-3	 267[0] commit[0] 536c754edf40917423d9ef940846a6fec4386fc3[0] run[0] dashboard[0] queries[0] in[0] parallel[0] if[0] the[0] secondary[0] index[0] is[0] enabled[0] and[0] is[0] using[0] a[0] remote[0] cluster[0] for[0] example[0] solr[0] or[0] the[0] system[0] behind[0] gerrit[0] review[0] running[0] the[0] user's[0] dashboard[0] queries[0] in[0] parallel[0] can[0] reduce[0] overall[0] latency[0] [[Sentence=-1,1=word max, 1-5]] this[0] refactoring[0] slightly[0] simplifies[0] the[0] code[0] by[0] pushing[0] the[0] logic[0] to[0] check[0] is[0] visible[0] back[0] into[0] andsource[0] which[0] already[0] supports[1] batch[0] loading[0] change[0] objects[0] for[0] changedata[0] [[Sentence=-1,2=word max, 1-5]] an[0] alternative[0] implementation[0] to[0] run[0] dashboard[0] queries[0] in[0] parallel[0] is[0] to[0] have[0] the[0] browser[0] send[0] one[0] rest[0] api[0] request[0] for[0] each[0] query[0] [[Sentence=-1,1=word max, 1-5]] this[0] is[0] a[0] mixed[0] bag[0] [[Sentence=-1,1=word max, 1-5]] the[0] browser[0] is[0] limited[0] to[0] sending[0] 2[0] -4[0] requests[0] at[0] once[0] to[0] the[0] same[0] source[-1] server[0] [[Sentence=-2,1=word max, 1-5]] on[0] a[0] browser[0] with[0] a[0] limit[0] of[0] 2[0] pending[0] requests[0] 3[0] queries[0] will[0] incur[0] significant[0] latency[0] [[Sentence=-1,1=word max, 1-5]] the[0] browser[0] may[0] still[0] be[0] loading[0] /#/[0] and[0] needing[0] to[0] pull[0] in[0] additional[0] assets[0] like[0] images[0] and[0] css[0] [[Sentence=-1,1=word max, 1-5]] stealing[-2] request[0] slots[0] for[0] rest[0] apis[0] contributes[0] to[0] overall[0] page[0] load[0] latency[0] [[Sentence=-3,1=word max, 1-5]] however[0] it[0] is[0] simple[0] to[0] load[0] balance[0] at[0] the[0] server[0] side[0] as[0] each[0] query[0] uses[0] its[0] own[0] thread[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i7bf5e2be8b6cb5e8487a19ecf69c4c184c7ed1ac[0] [[Sentence=-1,1=word max, 1-5]][[[2,-3 max of sentences]]]
2581 commit 8e169522b46302c04af565ab8842e4764ac69c40 merge: 3801a8f 0795c58 merge "refactor magic branch values into magicbranchinput" 	2581 commit 8e169522b46302c04af565ab8842e4764ac69c40 merge: 3801a8f 0795c58 merge "refactor magic branch values into magicbranchinput"	2	-1	 2581[0] commit[0] 8e169522b46302c04af565ab8842e4764ac69c40[0] merge[0] 3801a8f[0] 0795c58[0] merge[0] refactor[0] magic[0] branch[0] values[1] into[0] magicbranchinput[0] [[Sentence=-1,2=word max, 1-5]][[[2,-1 max of sentences]]]
2587 commit 0795c58a31aa106800e951427b7d19ffb540ab87 refactor magic branch values into magicbranchinput perform a simple refactoring of receivecommits to move input data related to the single pending magic branch operation into a single inner class. this makes it clear several fields are actually tied to the one magic branch we are processing in this invocation. the refactoring supports a future change to add argument parsing to a refspec. the magic branch's refspec will get split further to supply option values into the magicbranchinput, probably by using args4j and @option annotations within the input class. change-id: i3ad5808ed6c484d29a591121cf4d09e9521a61d7 	2587 commit 0795c58a31a106800e951427b7d19ffb540ab87 refactor magic branch values into magicbranchinput perform a simple refactoring of receivecommits to move input data related to the single pending magic branch operation into a single inner class.<br> this makes it clear several fields are actually tied to the one magic branch we are processing in this invocation.<br> the refactoring supports a future change to add argument parsing to a refspec.<br> the magic branch's refspec will get split further to supply option values into the magicbranchinput, probably by using args4j and @option annotations within the input class.<br> change-id: i3ad5808ed6c484d29a591121cf4d09e9521a61d7	2	-2	 2587[0] commit[0] 0795c58a31aa106800e951427b7d19ffb540ab87/0795c58a31a106800e951427b7d19ffb540ab87[0] refactor[0] magic[0] branch[0] values[1] into[0] magicbranchinput[0] perform[0] a[0] simple[0] refactoring[0] of[0] receivecommits[0] to[0] move[0] input[0] data[0] related[0] to[0] the[0] single[0] pending[0] magic[0] branch[0] operation[0] into[0] a[0] single[0] inner[0] class[0] [[Sentence=-1,2=word max, 1-5]] this[0] makes[0] it[0] clear[0] several[0] fields[0] are[0] actually[0] tied[0] to[0] the[0] one[0] magic[0] branch[0] we[0] are[0] processing[0] in[0] this[0] invocation[0] [[Sentence=-1,1=word max, 1-5]] the[0] refactoring[0] supports[1] a[0] future[0] change[0] to[0] add[0] argument[-1] parsing[0] to[0] a[0] refspec[0] [[Sentence=-2,2=word max, 1-5]] the[0] magic[0] branch's[0] refspec[0] will[0] get[0] split[0] further[0] to[0] supply[0] option[0] values[1] into[0] the[0] magicbranchinput[0] probably[0] by[0] using[0] args4j[0] and[0] @option[0] annotations[0] within[0] the[0] input[0] class[0] [[Sentence=-1,2=word max, 1-5]] change[0] id[0] i3ad5808ed6c484d29a591121cf4d09e9521a61d7[0] [[Sentence=-1,1=word max, 1-5]][[[2,-2 max of sentences]]]
4816 commit 47b1119c4bc1d3e352d0e3ec0f2450f7e7da9ce0 merge: 5c9fd14 e3f6a04 merge "refactor ssh commands with sshcommand base class" 	4816 commit 47b119c4bc1d3e352d0e3ec0f2450f7e7da9ce0 merge: 5c9fd14 e3f6a04 merge "refactor ssh commands with sshcommand base class"	1	-1	 4816[0] commit[0] 47b1119c4bc1d3e352d0e3ec0f2450f7e7da9ce0/47b119c4bc1d3e352d0e3ec0f2450f7e7da9ce0[0] merge[0] 5c9fd14[0] e3f6a04[0] merge[0] refactor[0] ssh[0] commands[0] with[0] sshcommand[0] base[0] class[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
4817 commit e3f6a0444bc14fcfda9cd9169c94a096c5dd9f0e refactor ssh commands with sshcommand base class the sshcommand base class extends basecommand and provides the common pattern of calling startthread with a commandrunnable that parses argments and then invokes the real logic. the new annotation @requirescapability can be declared on any concrete implementation of sshcommand to name a capability the caller must have before they can run the contained command. this is enforced inside of the dispatchcommand, which is what handles creating and delegating to any paticular command implementation. @admincommand is replaced by the new @requriescapability annotation, which is more explicitly declaring the administrate server dependency. most existing commands have been ported to this sshcommand base class, cleaning up a lot of the code. a few special cases still exist such as streamevents or scpcommand that are not trivial to port, as their start implementation is well outside of the common pattern. plugin authors should be encouraged to extend from sshcommand for the foreseeable future. i eventually would like to get away from needing to extend this class, and instead use a simpler interface declaration, but that is a much bigger change to make with how dispatchcommand and basecommand are connected together. change-id: i4f1de60c6fdeb207197dfccc135b4d532443d5b2 	4817 commit e3f6a044bc14fcfda9cd9169c94a096c5dd9f0e refactor ssh commands with sshcommand base class the sshcommand base class extends basecommand and provides the common pattern of calling startthread with a commandrunnable that parses argments and then invokes the real logic.<br> the new annotation @requirescapability can be declared on any concrete implementation of sshcommand to name a capability the caller must have before they can run the contained command.<br> this is enforced inside of the dispatchcommand, which is what handles creating and delegating to any paticular command implementation.<br> @admincommand is replaced by the new @requriescapability annotation, which is more explicitly declaring the administrate server dependency.<br> most existing commands have been ported to this sshcommand base class, cleaning up a lot of the code.<br> a few special cases still exist such as streamevents or scpcommand that are not trivial to port, as their start implementation is well outside of the common pattern.<br> plugin authors should be encouraged to extend from sshcommand for the foreseeable future.<br> i eventually would like to get away from needing to extend this class, and instead use a simpler interface declaration, but that is a much bigger change to make with how dispatchcommand and basecommand are connected together.<br> change-id: i4f1de60c6fdeb207197dfcc135b4d532443d5b2	2	-2	 4817[0] commit[0] e3f6a0444bc14fcfda9cd9169c94a096c5dd9f0e/e3f6a044bc14fcfda9cd9169c94a096c5dd9f0e[0] refactor[0] ssh[0] commands[0] with[0] sshcommand[0] base[0] class[0] the[0] sshcommand[0] base[0] class[0] extends[0] basecommand[0] and[0] provides[0] the[0] common[0] pattern[0] of[0] calling[0] startthread[0] with[0] a[0] commandrunnable[0] that[0] parses[0] argments[0] and[0] then[0] invokes[0] the[0] real[0] logic[0] [[Sentence=-1,1=word max, 1-5]] the[0] new[0] annotation[0] @requirescapability[0] can[0] be[0] declared[0] on[0] any[0] concrete[0] implementation[0] of[0] sshcommand[0] to[0] name[0] a[0] capability[0] the[0] caller[0] must[0] have[0] before[0] they[0] can[0] run[0] the[0] contained[0] command[0] [[Sentence=-1,1=word max, 1-5]] this[0] is[0] enforced[-1] inside[0] of[0] the[0] dispatchcommand[0] which[0] is[0] what[0] handles[0] creating[0] and[0] delegating[0] to[0] any[0] paticular[0] command[0] implementation[0] [[Sentence=-2,1=word max, 1-5]] @admincommand[0] is[0] replaced[0] by[0] the[0] new[0] @requriescapability[0] annotation[0] which[0] is[0] more[0] explicitly[0] declaring[0] the[0] administrate[0] server[0] dependency[0] [[Sentence=-1,1=word max, 1-5]] most[0] existing[0] commands[0] have[0] been[0] ported[0] to[0] this[0] sshcommand[0] base[0] class[0] cleaning[0] up[0] a[0] lot[0] of[0] the[0] code[0] [[Sentence=-1,1=word max, 1-5]] a[0] few[0] special[1] cases[0] still[0] exist[0] such[0] as[0] streamevents[0] or[0] scpcommand[0] that[0] are[0] not[0] trivial[-1][NegatedDueToPreviousWord] to[0] port[0] as[0] their[0] start[0] implementation[0] is[0] well[0] outside[0] of[0] the[0] common[0] pattern[0] [[Sentence=-1,2=word max, 1-5]] plugin[0] authors[0] should[0] be[0] encouraged[1] to[0] extend[0] from[0] sshcommand[0] for[0] the[0] foreseeable[0] future[0] [[Sentence=-1,2=word max, 1-5]] i[0] eventually[0] would[0] like[0] to[0] get[0] away[0] from[0] needing[0] to[0] extend[0] this[0] class[0] and[0] instead[0] use[0] a[0] simpler[0] interface[0] declaration[0] but[0] that[0] is[0] a[0] much[0] bigger[0] change[0] to[0] make[0] with[0] how[0] dispatchcommand[0] and[0] basecommand[0] are[0] connected[0] together[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i4f1de60c6fdeb207197dfccc135b4d532443d5b2/i4f1de60c6fdeb207197dfcc135b4d532443d5b2[0] [[Sentence=-1,1=word max, 1-5]][[[2,-2 max of sentences]]]
5320 commit 2c18a8882393c1603aba65fad21d5bd84e906e4d changecontrol visibility takes draft into account isvisible() in changecontrol now considers whether or not the change is a draft. as reviewdb is needed to see whether or not a user has visibility for a certain change, this change also refactors most uses of isvisible() to also pass in reviewdb. as a bonus, much of the notification routines seem to work as wanted, due to the new visibility checks. change-id: i4c3b068413e4db30edb23f498f61048142cb6713 	5320 commit 2c18a882393c1603aba65fad21d5bd84e906e4d changecontrol visibility takes draft into account isvisible( in changecontrol now considers whether or not the change is a draft.<br> as reviewdb is needed to see whether or not a user has visibility for a certain change, this change also refactors most uses of isvisible( to also pass in reviewdb.<br> as a bonus, much of the notification routines seem to work as wanted, due to the new visibility checks.<br> change-id: i4c3b068413e4db30edb23f498f61048142cb6713	1	-1	 5320[0] commit[0] 2c18a8882393c1603aba65fad21d5bd84e906e4d/2c18a882393c1603aba65fad21d5bd84e906e4d[0] changecontrol[0] visibility[0] takes[0] draft[0] into[0] account[0] isvisible[0] in[0] changecontrol[0] now[0] considers[0] whether[0] or[0] not[0] the[0] change[0] is[0] a[0] draft[0] [[Sentence=-1,1=word max, 1-5]] as[0] reviewdb[0] is[0] needed[0] to[0] see[0] whether[0] or[0] not[0] a[0] user[0] has[0] visibility[0] for[0] a[0] certain[0] change[0] this[0] change[0] also[0] refactors[0] most[0] uses[0] of[0] isvisible[0] to[0] also[0] pass[0] in[0] reviewdb[0] [[Sentence=-1,1=word max, 1-5]] as[0] a[0] bonus[0] much[0] of[0] the[0] notification[0] routines[0] seem[0] to[0] work[0] as[0] wanted[0] due[0] to[0] the[0] new[0] visibility[0] checks[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i4c3b068413e4db30edb23f498f61048142cb6713[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
6247 commit 248853a517e631cf7ce2fcd0be95ce3ba5af4faf refactor the way hooks are run pulling the hooks into a proper named task class makes it easier to name the hook while its scheduled in the execution queue, or for an admin to see what hook might be wedged in the hook queue. we also get slightly better error reporting. change-id: i8ce82c39d9dbc7c7c4994a1a1419447bf7a4d8c8 signed-off-by: shawn o. pearce  sop@google.com  	6247 commit 248853a517e631cf7ce2fcd0be95ce3ba5af4faf refactor the way hooks are run pulling the hooks into a proper named task class makes it easier to name the hook while its scheduled in the execution queue, or for an admin to see what hook might be wedged in the hook queue.<br> we also get slightly better error reporting.<br> change-id: i8ce82c39d9dbc7c7c4994a1a1419447bf7a4d8c8 signed-off-by: shawn o.<br> pearce  sop@google.<br>com 	1	-1	 6247[0] commit[0] 248853a517e631cf7ce2fcd0be95ce3ba5af4faf[0] refactor[0] the[0] way[0] hooks[0] are[0] run[0] pulling[0] the[0] hooks[0] into[0] a[0] proper[0] named[0] task[0] class[0] makes[0] it[0] easier[0] to[0] name[0] the[0] hook[0] while[0] its[0] scheduled[0] in[0] the[0] execution[0] queue[0] or[0] for[0] an[0] admin[0] to[0] see[0] what[0] hook[0] might[0] be[0] wedged[0] in[0] the[0] hook[0] queue[0] [[Sentence=-1,1=word max, 1-5]] we[0] also[0] get[0] slightly[0] better[0] error[0] reporting[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i8ce82c39d9dbc7c7c4994a1a1419447bf7a4d8c8[0] signed[0] off[0] by[0] shawn[0] o[0] [[Sentence=-1,1=word max, 1-5]] pearce[0] sop@google[0] [[Sentence=-1,1=word max, 1-5]] com[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
6600 commit 293a3e2f254de802902acd4fb880070099f65882 refactor and add to streaming events schema combine changes, accounts, and patchsets into their own trees in the serialized json. also add more fields including change numbers, owners for the change, canonical url to the change, and description of the approval type. change-id: i23b75896bc34fa8695105eff68142e974f1067c8 	6600 commit 293a3e2f254de802902acd4fb880070099f65882 refactor and add to streaming events schema combine changes, accounts, and patchsets into their own trees in the serialized json.<br> also add more fields including change numbers, owners for the change, canonical url to the change, and description of the approval type.<br> change-id: i23b75896bc34fa8695105eff68142e974f1067c8	1	-1	 6600[0] commit[0] 293a3e2f254de802902acd4fb880070099f65882[0] refactor[0] and[0] add[0] to[0] streaming[0] events[0] schema[0] combine[0] changes[0] accounts[0] and[0] patchsets[0] into[0] their[0] own[0] trees[0] in[0] the[0] serialized[0] json[0] [[Sentence=-1,1=word max, 1-5]] also[0] add[0] more[0] fields[0] including[0] change[0] numbers[0] owners[0] for[0] the[0] change[0] canonical[0] url[0] to[0] the[0] change[0] and[0] description[0] of[0] the[0] approval[0] type[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i23b75896bc34fa8695105eff68142e974f1067c8[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
6910 commit f91d8c018145f3bb9c8a170d5a59e6e102e9796e fix committer identity on cherry-pick instead of storing " san account-1000371@unknown " for the committer email address store the preferred email from the user account. we broke this behavior back when i refactored the way personident was created from an identifieduser instance. bug: issue 356 change-id: ia12446db165041e6aa1bc2222171b0d9296dc9b7 signed-off-by: shawn o. pearce  sop@google.com  	6910 commit f91d8c018145f3bb9c8a170d5a59e6e102e9796e fix committer identity on cherry-pick instead of storing " san account-100371@unknown " for the committer email address store the preferred email from the user account.<br> we broke this behavior back when i refactored the way personident was created from an identifieduser instance.<br> bug: issue 356 change-id: ia12446db165041e6a1bc22171b0d9296dc9b7 signed-off-by: shawn o.<br> pearce  sop@google.<br>com 	2	-2	 6910[0] commit[0] f91d8c018145f3bb9c8a170d5a59e6e102e9796e[0] fix[0] committer[0] identity[0] on[0] cherry[0] pick[0] instead[0] of[0] storing[0] san[0] account[0] -1000371@unknown/-100371@unknown[0] for[0] the[0] committer[0] email[0] address[0] store[0] the[0] preferred[0] email[0] from[0] the[0] user[0] account[0] [[Sentence=-1,1=word max, 1-5]] we[0] broke[-1] this[0] behavior[0] back[0] when[0] i[0] refactored[0] the[0] way[0] personident[0] was[0] created[0] from[0] an[0] identifieduser[0] instance[0] [[Sentence=-2,1=word max, 1-5]] bug[0] issue[0] 356[0] change[0] id[0] ia12446db165041e6aa1bc2222171b0d9296dc9b7/ia12446db165041e6a1bc22171b0d9296dc9b7[0][+0.6 MultipleLetters] signed[0] off[0] by[0] shawn[0] o[0] [[Sentence=-1,2=word max, 1-5]] pearce[0] sop@google[0] [[Sentence=-1,1=word max, 1-5]] com[0] [[Sentence=-1,1=word max, 1-5]][[[2,-2 max of sentences]]]
7159 commit d4aa0cc9991a25e501d8fb7e9cdcdaf0a2656ca5 fix project owner permissions and refactor project admin service project owner permission were slightly broken in 2.0.19 as they required the owner to have read permission on their own project in order to use the branches panel to manage the branches. this was wrong, and not what we had intended to have happen. this refactoring pulls all of the individual rpc methods out of the projectadminserviceimpl into their own per-request classes, taking only their exact dependencies as injections from guice. we also now use the projectcontrol everywhere to manage access. branch creation and deletion checks are now performed in projectcontrol for both web and ssh interfaces. this allows a user who has ssh access to create or delete branches in a project to also use the web ui, even though they are not a project owner. currently the user must know (or guess) the project info page url however to gain access to the web ui if they are not listed as an owner for that project. like before however, project owners do not have create or delete branch access over ssh unless they specifically grant themselves this permission. this is intentional and is meant to reduce the risk of a branch being created or deleted remotely over ssh due to a typo while using "git push". change-id: i2d350f870817fdf51a7db4c644c7f47ecb2f6171 signed-off-by: shawn o. pearce  sop@google.com  	7159 commit d4a0cc991a25e501d8fb7e9cdcdaf0a2656ca5 fix project owner permissions and refactor project admin service project owner permission were slightly broken in 2.0.19 as they required the owner to have read permission on their own project in order to use the branches panel to manage the branches.<br> this was wrong, and not what we had intended to have happen.<br> this refactoring pulls all of the individual rpc methods out of the projectadminserviceimpl into their own per-request classes, taking only their exact dependencies as injections from guice.<br> we also now use the projectcontrol everywhere to manage access.<br> branch creation and deletion checks are now performed in projectcontrol for both web and ssh interfaces.<br> this allows a user who has ssh access to create or delete branches in a project to also use the web ui, even though they are not a project owner.<br> currently the user must know (or guess) the project info page url however to gain access to the web ui if they are not listed as an owner for that project.<br> like before however, project owners do not have create or delete branch access over ssh unless they specifically grant themselves this permission.<br> this is intentional and is meant to reduce the risk of a branch being created or deleted remotely over ssh due to a typo while using "git push"<br> change-id: i2d350f870817fdf51a7db4c644c7f47ecb2f6171 signed-off-by: shawn o.<br> pearce  sop@google.<br>com 	2	-2	 7159[0] commit[0] d4aa0cc9991a25e501d8fb7e9cdcdaf0a2656ca5/d4a0cc991a25e501d8fb7e9cdcdaf0a2656ca5[0][+0.6 MultipleLetters] fix[0] project[0] owner[0] permissions[0] and[0] refactor[0] project[0] admin[0] service[0] project[0] owner[0] permission[0] were[0] slightly[0] broken[-1][--1 LastWordBoosterStrength] in[0] 2[0] .0[0] .19[0] as[0] they[0] required[0] the[0] owner[0] to[0] have[0] read[0] permission[0] on[0] their[0] own[0] project[0] in[0] order[0] to[0] use[0] the[0] branches[0] panel[0] to[0] manage[0] the[0] branches[0] [[Sentence=-1,2=word max, 1-5]] this[0] was[0] wrong[0] and[0] not[0] what[0] we[0] had[0] intended[0] to[0] have[0] happen[0] [[Sentence=-1,1=word max, 1-5]] this[0] refactoring[0] pulls[0] all[0] of[0] the[0] individual[0] rpc[0] methods[0] out[0] of[0] the[0] projectadminserviceimpl[0] into[0] their[0] own[0] per[0] request[0] classes[0] taking[0] only[0] their[0] exact[0] dependencies[0] as[0] injections[0] from[0] guice[0] [[Sentence=-1,1=word max, 1-5]] we[0] also[0] now[0] use[0] the[0] projectcontrol[0] everywhere[0] to[0] manage[0] access[0] [[Sentence=-1,1=word max, 1-5]] branch[0] creation[0] and[0] deletion[0] checks[0] are[0] now[0] performed[0] in[0] projectcontrol[0] for[0] both[0] web[0] and[0] ssh[0] interfaces[0] [[Sentence=-1,1=word max, 1-5]] this[0] allows[0] a[0] user[0] who[0] has[0] ssh[0] access[0] to[0] create[0] or[0] delete[0] branches[0] in[0] a[0] project[0] to[0] also[0] use[0] the[0] web[0] ui[0] even[0] though[0] they[0] are[0] not[0] a[0] project[0] owner[0] [[Sentence=-1,1=word max, 1-5]] currently[0] the[0] user[0] must[0] know[0] or[0] guess[0] the[0] project[0] info[0] page[0] url[0] however[0] to[0] gain[0] access[0] to[0] the[0] web[0] ui[0] if[0] they[0] are[0] not[0] listed[0] as[0] an[0] owner[0] for[0] that[0] project[0] [[Sentence=-1,1=word max, 1-5]] like[0] before[0] however[0] project[0] owners[0] do[0] not[0] have[0] create[0] or[0] delete[0] branch[0] access[0] over[0] ssh[0] unless[0] they[0] specifically[0] grant[0] themselves[0] this[0] permission[0] [[Sentence=-1,1=word max, 1-5]] this[0] is[0] intentional[0] and[0] is[0] meant[0] to[0] reduce[0] the[0] risk[-1] of[0] a[0] branch[0] being[0] created[0] or[0] deleted[0] remotely[0] over[0] ssh[0] due[0] to[0] a[0] typo[0] while[0] using[0] git[0] push[0] [[Sentence=-2,1=word max, 1-5]] change[0] id[0] i2d350f870817fdf51a7db4c644c7f47ecb2f6171[0] signed[0] off[0] by[0] shawn[0] o[0] [[Sentence=-1,1=word max, 1-5]] pearce[0] sop@google[0] [[Sentence=-1,1=word max, 1-5]] com[0] [[Sentence=-1,1=word max, 1-5]][[[2,-2 max of sentences]]]
7300 commit e8690ef4321127573e04539e96df564e80545e6a declare caches in guice rather than hardcoded in cachemanagerprovider this refactoring makes caches easier to declare, as we now define them as guice injections just like any other entity. each of the cache k,v  instances is actually a proxy to the real ehcache, thus allowing us to construct our object graph, discover the full set of caches we need, and then start the cache provider with only what we discovered was loaded. signed-off-by: shawn o. pearce  sop@google.com  	7300 commit e8690ef4321127573e04539e96df564e80545e6a declare caches in guice rather than hardcoded in cachemanagerprovider this refactoring makes caches easier to declare, as we now define them as guice injections just like any other entity.<br> each of the cache k,v  instances is actually a proxy to the real ehcache, thus allowing us to construct our object graph, discover the full set of caches we need, and then start the cache provider with only what we discovered was loaded.<br> signed-off-by: shawn o.<br> pearce  sop@google.<br>com 	1	-1	 7300[0] commit[0] e8690ef4321127573e04539e96df564e80545e6a[0] declare[0] caches[0] in[0] guice[0] rather[0] than[0] hardcoded[0] in[0] cachemanagerprovider[0] this[0] refactoring[0] makes[0] caches[0] easier[0] to[0] declare[0] as[0] we[0] now[0] define[0] them[0] as[0] guice[0] injections[0] just[0] like[0] any[0] other[0] entity[0] [[Sentence=-1,1=word max, 1-5]] each[0] of[0] the[0] cache[0] k[0] v[0] instances[0] is[0] actually[0] a[0] proxy[0] to[0] the[0] real[0] ehcache[0] thus[0] allowing[0] us[0] to[0] construct[0] our[0] object[0] graph[0] discover[0] the[0] full[0] set[0] of[0] caches[0] we[0] need[0] and[0] then[0] start[0] the[0] cache[0] provider[0] with[0] only[0] what[0] we[0] discovered[0] was[0] loaded[0] [[Sentence=-1,1=word max, 1-5]] signed[0] off[0] by[0] shawn[0] o[0] [[Sentence=-1,1=word max, 1-5]] pearce[0] sop@google[0] [[Sentence=-1,1=word max, 1-5]] com[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
7376 commit 22483737d884889532ee9c0bce928da8b7b901aa refactor ssh command permission checks to use currentuser this is a step in the direction of whacking the static decision logic used by baseserviceimplementation and making it based on the project and current user concepts instead. signed-off-by: shawn o. pearce  sop@google.com  	7376 commit 22483737d884889532ee9c0bce928da8b7b901a refactor ssh command permission checks to use currentuser this is a step in the direction of whacking the static decision logic used by baseserviceimplementation and making it based on the project and current user concepts instead.<br> signed-off-by: shawn o.<br> pearce  sop@google.<br>com 	1	-1	 7376[0] commit[0] 22483737d884889532ee9c0bce928da8b7b901aa/22483737d884889532ee9c0bce928da8b7b901a[0] refactor[0] ssh[0] command[0] permission[0] checks[0] to[0] use[0] currentuser[0] this[0] is[0] a[0] step[0] in[0] the[0] direction[0] of[0] whacking[0] the[0] static[0] decision[0] logic[0] used[0] by[0] baseserviceimplementation[0] and[0] making[0] it[0] based[0] on[0] the[0] project[0] and[0] current[0] user[0] concepts[0] instead[0] [[Sentence=-1,1=word max, 1-5]] signed[0] off[0] by[0] shawn[0] o[0] [[Sentence=-1,1=word max, 1-5]] pearce[0] sop@google[0] [[Sentence=-1,1=word max, 1-5]] com[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
7382 commit 30e2c69fc29e27ca5b842ee9322e31a2ccff0697 refactor changedetailservice to use injected database handle rather than trying to manage the scope of the database handle manually within the application code we now manage it through the guice request scope. this makes the depencency a bit more clear and frees this code up to be better refactored when we later can't rely on a reviewdb handle. signed-off-by: shawn o. pearce  sop@google.com  	7382 commit 30e2c69fc29e27ca5b842ee9322e31a2ccff0697 refactor changedetailservice to use injected database handle rather than trying to manage the scope of the database handle manually within the application code we now manage it through the guice request scope.<br> this makes the depencency a bit more clear and frees this code up to be better refactored when we later can't rely on a reviewdb handle.<br> signed-off-by: shawn o.<br> pearce  sop@google.<br>com 	1	-1	 7382[0] commit[0] 30e2c69fc29e27ca5b842ee9322e31a2ccff0697[0] refactor[0] changedetailservice[0] to[0] use[0] injected[0] database[0] handle[0] rather[0] than[0] trying[0] to[0] manage[0] the[0] scope[0] of[0] the[0] database[0] handle[0] manually[0] within[0] the[0] application[0] code[0] we[0] now[0] manage[0] it[0] through[0] the[0] guice[0] request[0] scope[0] [[Sentence=-1,1=word max, 1-5]] this[0] makes[0] the[0] depencency[0] a[0] bit[0] more[0] clear[0] and[0] frees[0] this[0] code[0] up[0] to[0] be[0] better[0] refactored[0] when[0] we[0] later[0] can't[0] rely[0] on[0] a[0] reviewdb[0] handle[0] [[Sentence=-1,1=word max, 1-5]] signed[0] off[0] by[0] shawn[0] o[0] [[Sentence=-1,1=word max, 1-5]] pearce[0] sop@google[0] [[Sentence=-1,1=word max, 1-5]] com[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
7419 commit 5013c9c13352b405a8c782500bdd968d204e6f27 refactor command thread creation logic into basecommand the thread creation is now optional, permitting dispatchcommand to not use it, while other subclasses do take advantage of it being available. error handling for the thread is now consistently handled in one spot, ensuring we get errors back in the client and in the log. signed-off-by: shawn o. pearce  sop@google.com  	7419 commit 5013c9c13352b405a8c782500bdd968d204e6f27 refactor command thread creation logic into basecommand the thread creation is now optional, permitting dispatchcommand to not use it, while other subclasses do take advantage of it being available.<br> error handling for the thread is now consistently handled in one spot, ensuring we get errors back in the client and in the log.<br> signed-off-by: shawn o.<br> pearce  sop@google.<br>com 	1	-1	 7419[0] commit[0] 5013c9c13352b405a8c782500bdd968d204e6f27[0] refactor[0] command[0] thread[0] creation[0] logic[0] into[0] basecommand[0] the[0] thread[0] creation[0] is[0] now[0] optional[0] permitting[0] dispatchcommand[0] to[0] not[0] use[0] it[0] while[0] other[0] subclasses[0] do[0] take[0] advantage[0] of[0] it[0] being[0] available[0] [[Sentence=-1,1=word max, 1-5]] error[0] handling[0] for[0] the[0] thread[0] is[0] now[0] consistently[0] handled[0] in[0] one[0] spot[0] ensuring[0] we[0] get[0] errors[0] back[0] in[0] the[0] client[0] and[0] in[0] the[0] log[0] [[Sentence=-1,1=word max, 1-5]] signed[0] off[0] by[0] shawn[0] o[0] [[Sentence=-1,1=word max, 1-5]] pearce[0] sop@google[0] [[Sentence=-1,1=word max, 1-5]] com[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
7420 commit 80cc01fe773e345f0156ea62bd63b71ce11b5bd4 refactor command handling to support subcommands in guice this simplifies the way commands are managed, by allowing a dispatchcommand to be used to delegate functionality into a new subcommand during command line parsing. signed-off-by: shawn o. pearce  sop@google.com  	7420 commit 80cc01fe773e345f0156ea62bd63b71ce11b5bd4 refactor command handling to support subcommands in guice this simplifies the way commands are managed, by allowing a dispatchcommand to be used to delegate functionality into a new subcommand during command line parsing.<br> signed-off-by: shawn o.<br> pearce  sop@google.<br>com 	1	-1	 7420[0] commit[0] 80cc01fe773e345f0156ea62bd63b71ce11b5bd4[0] refactor[0] command[0] handling[0] to[0] support[0] subcommands[0] in[0] guice[0] this[0] simplifies[0] the[0] way[0] commands[0] are[0] managed[0] by[0] allowing[0] a[0] dispatchcommand[0] to[0] be[0] used[0] to[0] delegate[0] functionality[0] into[0] a[0] new[0] subcommand[0] during[0] command[0] line[0] parsing[0] [[Sentence=-1,1=word max, 1-5]] signed[0] off[0] by[0] shawn[0] o[0] [[Sentence=-1,1=word max, 1-5]] pearce[0] sop@google[0] [[Sentence=-1,1=word max, 1-5]] com[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
7905 commit 4e331fcf549d7ee235c64d00de4015e0d2a707a9 refactor ui construction to be more consistent across screens most screen implementations used some form of an initui method that was invoked during the first onload invocation. we now use that in all screen implementations. signed-off-by: shawn o. pearce  sop@google.com  	7905 commit 4e331fcf549d7ee235c64d00de4015e0d2a707a9 refactor ui construction to be more consistent across screens most screen implementations used some form of an initui method that was invoked during the first onload invocation.<br> we now use that in all screen implementations.<br> signed-off-by: shawn o.<br> pearce  sop@google.<br>com 	1	-1	 7905[0] commit[0] 4e331fcf549d7ee235c64d00de4015e0d2a707a9[0] refactor[0] ui[0] construction[0] to[0] be[0] more[0] consistent[0] across[0] screens[0] most[0] screen[0] implementations[0] used[0] some[0] form[0] of[0] an[0] initui[0] method[0] that[0] was[0] invoked[0] during[0] the[0] first[0] onload[0] invocation[0] [[Sentence=-1,1=word max, 1-5]] we[0] now[0] use[0] that[0] in[0] all[0] screen[0] implementations[0] [[Sentence=-1,1=word max, 1-5]] signed[0] off[0] by[0] shawn[0] o[0] [[Sentence=-1,1=word max, 1-5]] pearce[0] sop@google[0] [[Sentence=-1,1=word max, 1-5]] com[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
