Rename Method	Translation	Positive	Negative	EmotionRationale
3155 commit 4f6065b4fa65c698bf05fc654034a4ed65338533 refactoring most tests remove standalone test from junit wildcard 	3155 commit 4f6065b4fa65c698bf05fc654034a4ed65338533 refactoring most tests remove standalone test from junit wildcard	1	-1	 3155[0] commit[0] 4f6065b4fa65c698bf05fc654034a4ed65338533[0] refactoring[0] most[0] tests[0] remove[0] standalone[0] test[0] from[0] junit[0] wildcard[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
4443 commit e62b76d2cc7ed993eec015c937b035f0d30ef9f7 big refactor of the router console update subsystem, in preparation for implementing out-of-console updaters like i2psnark. - add new update interfaces in net.i2p.update - all update implementations moved to routerconsole update/ - implement an updatemanager that registers with the routercontext - updatemanager handles multiple types of things to update (router, plugins, news, ...) and methods of updating (http, ...) - updatemanager maintains list of installed, downloaded, and available versions of everything - define updaters that can check for a new version and/or download an item - individual updaters register with the updatemanager obtained from i2pappcontext, identifying the type of update item and update method they can handle. - updaters need only core libs, no router.jar or routerconsole access required. - all checks and updates are initiated via the updatemanager. - all status on checks and updates in-progress or completed are obtained from the updatemanager. no more use of system properties to broadcast update state. - all update and checker tasks are intantiated on demand and threaded; no more static references left over. - split out the runners and checkers from the handlers and make the inheritance more sane. - no more permanent newsfetcher thread; run on the simplescheduler queue and thread a checker task only to fetch the news. - no more static newsfetcher instance in routerconsole. all helper methods that are still required are moved to newshelper. the updatemanager implements the policy for when to check and download. all requests go through the updatemanager. for each update type, there's several parts: - the xxxupdatehandler implements the updater - the xxxupdatechecker implements the updatetask for checking - the xxxupdaterunner implements the updatetask for downloading new and moved classes: web/ update/ ---- ------- new consoleupdatemanager.java new pluginupdatechecker.java from pluginupdatechecker pluginupdatechecker -  pluginupdatehandler.java pluginupdatehandler.java -  pluginupdaterunner new unsignedupdatehandler.java unsignedupdatehandler -  unsignedupdaterunner.java new unsignedupdatechecker from newsfetcher updatehandler.java remains new updatehandler.java new updaterunner.java from updatehandler move newshandler from newsfetcher new newsfetcher new newstimertask new dummyhandler initial checkin. unfinished, untested, unpolished. 	443 commit e62b76d2cc7ed993eec015c937b035f0d30ef9f7 big refactor of the router console update subsystem, in preparation for implementing out-of-console updaters like i2psnark.<br> - add new update interfaces in net.<br>i2p.<br>update - all update implementations moved to routerconsole update/ - implement an updatemanager that registers with the routercontext - updatemanager handles multiple types of things to update (router, plugins, news, .<br> and methods of updating (http, .<br> - updatemanager maintains list of installed, downloaded, and available versions of everything - define updaters that can check for a new version and/or download an item - individual updaters register with the updatemanager obtained from i2pappcontext, identifying the type of update item and update method they can handle.<br> - updaters need only core libs, no router.<br>jar or routerconsole access required.<br> - all checks and updates are initiated via the updatemanager.<br> - all status on checks and updates in-progress or completed are obtained from the updatemanager.<br> no more use of system properties to broadcast update state.<br> - all update and checker tasks are intantiated on demand and threaded; no more static references left over.<br> - split out the runners and checkers from the handlers and make the inheritance more sane.<br> - no more permanent newsfetcher thread; run on the simplescheduler queue and thread a checker task only to fetch the news.<br> - no more static newsfetcher instance in routerconsole.<br> all helper methods that are still required are moved to newshelper.<br> the updatemanager implements the policy for when to check and download.<br> all requests go through the updatemanager.<br> for each update type, there's several parts: - the xupdatehandler implements the updater - the xupdatechecker implements the updatetask for checking - the xupdaterunner implements the updatetask for downloading new and moved classes: web/ update/ - - new consoleupdatemanager.<br>java new pluginupdatechecker.<br>java from pluginupdatechecker pluginupdatechecker -  pluginupdatehandler.<br>java pluginupdatehandler.<br>java -  pluginupdaterunner new unsignedupdatehandler.<br>java unsignedupdatehandler -  unsignedupdaterunner.<br>java new unsignedupdatechecker from newsfetcher updatehandler.<br>java remains new updatehandler.<br>java new updaterunner.<br>java from updatehandler move newshandler from newsfetcher new newsfetcher new newstimertask new dummyhandler initial checkin.<br> unfinished, untested, unpolished.	1	-1	 4443/443[0] commit[0] e62b76d2cc7ed993eec015c937b035f0d30ef9f7[0] big[0] refactor[0] of[0] the[0] router[0] console[0] update[0] subsystem[0] in[0] preparation[0] for[0] implementing[0] out[0] of[0] console[0] updaters[0] like[0] i2psnark[0] [[Sentence=-1,1=word max, 1-5]] add[0] new[0] update[0] interfaces[0] in[0] net[0] [[Sentence=-1,1=word max, 1-5]] i2p[0] [[Sentence=-1,1=word max, 1-5]] update[0] all[0] update[0] implementations[0] moved[0] to[0] routerconsole[0] update/[0] implement[0] an[0] updatemanager[0] that[0] registers[0] with[0] the[0] routercontext[0] updatemanager[0] handles[0] multiple[0] types[0] of[0] things[0] to[0] update[0] router[0] plugins[0] news[0] [[Sentence=-1,1=word max, 1-5]] and[0] methods[0] of[0] updating[0] http[0] [[Sentence=-1,1=word max, 1-5]] updatemanager[0] maintains[0] list[0] of[0] installed[0] downloaded[0] and[0] available[0] versions[0] of[0] everything[0] define[0] updaters[0] that[0] can[0] check[0] for[0] a[0] new[0] version[0] and/or[0] download[0] an[0] item[0] individual[0] updaters[0] register[0] with[0] the[0] updatemanager[0] obtained[0] from[0] i2pappcontext[0] identifying[0] the[0] type[0] of[0] update[0] item[0] and[0] update[0] method[0] they[0] can[0] handle[0] [[Sentence=-1,1=word max, 1-5]] updaters[0] need[0] only[0] core[0] libs[0] no[0] router[0] [[Sentence=-1,1=word max, 1-5]] jar[0] or[0] routerconsole[0] access[0] required[0] [[Sentence=-1,1=word max, 1-5]] all[0] checks[0] and[0] updates[0] are[0] initiated[0] via[0] the[0] updatemanager[0] [[Sentence=-1,1=word max, 1-5]] all[0] status[0] on[0] checks[0] and[0] updates[0] in[0] progress[0] or[0] completed[0] are[0] obtained[0] from[0] the[0] updatemanager[0] [[Sentence=-1,1=word max, 1-5]] no[0] more[0] use[0] of[0] system[0] properties[0] to[0] broadcast[0] update[0] state[0] [[Sentence=-1,1=word max, 1-5]] all[0] update[0] and[0] checker[0] tasks[0] are[0] intantiated[0] on[0] demand[0] and[0] threaded[0] no[0] more[0] static[0] references[0] left[0] over[0] [[Sentence=-1,1=word max, 1-5]] split[0] out[0] the[0] runners[0] and[0] checkers[0] from[0] the[0] handlers[0] and[0] make[0] the[0] inheritance[0] more[0] sane[0] [[Sentence=-1,1=word max, 1-5]] no[0] more[0] permanent[0] newsfetcher[0] thread[0] run[0] on[0] the[0] simplescheduler[0] queue[0] and[0] thread[0] a[0] checker[0] task[0] only[0] to[0] fetch[0] the[0] news[0] [[Sentence=-1,1=word max, 1-5]] no[0] more[0] static[0] newsfetcher[0] instance[0] in[0] routerconsole[0] [[Sentence=-1,1=word max, 1-5]] all[0] helper[0] methods[0] that[0] are[0] still[0] required[0] are[0] moved[0] to[0] newshelper[0] [[Sentence=-1,1=word max, 1-5]] the[0] updatemanager[0] implements[0] the[0] policy[0] for[0] when[0] to[0] check[0] and[0] download[0] [[Sentence=-1,1=word max, 1-5]] all[0] requests[0] go[0] through[0] the[0] updatemanager[0] [[Sentence=-1,1=word max, 1-5]] for[0] each[0] update[0] type[0] there's[0] several[0] parts[0] the[0] xxxupdatehandler/xupdatehandler[0] implements[0] the[0] updater[0] the[0] xxxupdatechecker/xupdatechecker[0] implements[0] the[0] updatetask[0] for[0] checking[0] the[0] xxxupdaterunner/xupdaterunner[0] implements[0] the[0] updatetask[0] for[0] downloading[0] new[0] and[0] moved[0] classes[0] web/[0] update/[0] new[0] consoleupdatemanager[0] [[Sentence=-1,1=word max, 1-5]] java[0] new[0] pluginupdatechecker[0] [[Sentence=-1,1=word max, 1-5]] java[0] from[0] pluginupdatechecker[0] pluginupdatechecker[0] pluginupdatehandler[0] [[Sentence=-1,1=word max, 1-5]] java[0] pluginupdatehandler[0] [[Sentence=-1,1=word max, 1-5]] java[0] pluginupdaterunner[0] new[0] unsignedupdatehandler[0] [[Sentence=-1,1=word max, 1-5]] java[0] unsignedupdatehandler[0] unsignedupdaterunner[0] [[Sentence=-1,1=word max, 1-5]] java[0] new[0] unsignedupdatechecker[0] from[0] newsfetcher[0] updatehandler[0] [[Sentence=-1,1=word max, 1-5]] java[0] remains[0] new[0] updatehandler[0] [[Sentence=-1,1=word max, 1-5]] java[0] new[0] updaterunner[0] [[Sentence=-1,1=word max, 1-5]] java[0] from[0] updatehandler[0] move[0] newshandler[0] from[0] newsfetcher[0] new[0] newsfetcher[0] new[0] newstimertask[0] new[0] dummyhandler[0] initial[0] checkin[0] [[Sentence=-1,1=word max, 1-5]] unfinished[0] untested[0] unpolished[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
4554 commit 0f321f1597f68ef14cc13c20289fcabc1a4cede6 - refactor tracker map 	4554 commit 0f321f1597f68ef14cc13c20289fcabc1a4cede6 - refactor tracker map	1	-1	 4554[0] commit[0] 0f321f1597f68ef14cc13c20289fcabc1a4cede6[0] refactor[0] tracker[0] map[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
9698 commit 0b599c45ec3535be180970daf01c0043b44d60bb refactored code. piles of pedantic lock checks to ensure we don't get deadlocked, it's ugly. 	9698 commit 0b599c45ec3535be180970daf01c0043b44d60bb refactored code.<br> piles of pedantic lock checks to ensure we don't get deadlocked, it's ugly.	1	-3	 9698[0] commit[0] 0b599c45ec3535be180970daf01c0043b44d60bb[0] refactored[0] code[0] [[Sentence=-1,1=word max, 1-5]] piles[0] of[0] pedantic[0] lock[0] checks[0] to[0] ensure[0] we[0] don't[0] get[0] deadlocked[0] it's[0] ugly[-2] [[Sentence=-3,1=word max, 1-5]][[[1,-3 max of sentences]]]
10304 commit 79f934fe1748699b2e8cd3f34a162819037c3783 2006-02-16 jrandom * bugfix to the i2ptunnel web config to properly accept i2cp port settings * initial sucker refactoring to simplify reuse of the html parsing * beginnings of hooks to push imported rss/atom out to remote syndie archives automatically (though not enabled currently) * further ssu peer test cleanup 	10304 commit 79f934fe1748699b2e8cd3f34a162819037c3783 2006-02-16 jrandom * bugfix to the i2ptunnel web config to properly accept i2cp port settings * initial sucker refactoring to simplify reuse of the html parsing * beginnings of hooks to push imported rss/atom out to remote syndie archives automatically (though not enabled currently) * further ssu peer test cleanup	1	-2	 10304[0] commit[0] 79f934fe1748699b2e8cd3f34a162819037c3783[0] 2006[0] -02[0] -16[0] jrandom[0] bugfix[0] to[0] the[0] i2ptunnel[0] web[0] config[0] to[0] properly[0] accept[0] i2cp[0] port[0] settings[0] initial[0] sucker[-1] refactoring[0] to[0] simplify[0] reuse[0] of[0] the[0] html[0] parsing[0] beginnings[0] of[0] hooks[0] to[0] push[0] imported[0] rss/atom[0] out[0] to[0] remote[0] syndie[0] archives[0] automatically[0] though[0] not[0] enabled[0] currently[0] further[0] ssu[0] peer[0] test[0] cleanup[0] [[Sentence=-2,1=word max, 1-5]][[[1,-2 max of sentences]]]
