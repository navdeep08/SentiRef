Extract Method	Translation	Positive	Negative	EmotionRationale
3150 commit 7a891b5c83357dbeea2bbe4a5335ae685501e21c don't read through http response headers more than necessary. this refactoring changes httpengine to prefer the parsed response headers over the raw response headers. i'll do likewise for the request headers in a follow-up change. change-id: iab8329a836d14b3ac7bb0abe190e0a8fa7cc0694 	3150 commit 7a891b5c83357dbeea2bbe4a5335ae685501e21c don't read through http response headers more than necessary.<br> this refactoring changes httpengine to prefer the parsed response headers over the raw response headers.<br> i'll do likewise for the request headers in a follow-up change.<br> change-id: iab8329a836d14b3ac7bb0abe190e0a8fa7cc0694	1	-1	 3150[0] commit[0] 7a891b5c83357dbeea2bbe4a5335ae685501e21c[0] don't[0] read[0] through[0] http[0] response[0] headers[0] more[0] than[0] necessary[0] [[Sentence=-1,1=word max, 1-5]] this[0] refactoring[0] changes[0] httpengine[0] to[0] prefer[0] the[0] parsed[0] response[0] headers[0] over[0] the[0] raw[0] response[0] headers[0] [[Sentence=-1,1=word max, 1-5]] i'll[0] do[0] likewise[0] for[0] the[0] request[0] headers[0] in[0] a[0] follow[0] up[0] change[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] iab8329a836d14b3ac7bb0abe190e0a8fa7cc0694[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
3249 commit 9531eea15052eccc004b5f853ab4452becf7a8ab test that headers aren't accidentally transferred across requests. we used to have a bug where we'd only ever add headers. so if a request was redirected from a.com to b.com to c.com, then c.com would be able to see cookies from the other two hosts. this was fixed by the httpengine refactor, but tests haven't been added until now. change-id: i01588fe9662aae7404fef4d4b2c4f0468e7c670d http://b/3180373 	3249 commit 9531eea15052ecc004b5f853ab4452becf7a8ab test that headers aren't accidentally transferred across requests.<br> we used to have a bug where we'd only ever add headers.<br> so if a request was redirected from a.<br>com to b.<br>com to c.<br>com, then c.<br>com would be able to see cookies from the other two hosts.<br> this was fixed by the httpengine refactor, but tests haven't been added until now.<br> change-id: i01588fe9662ae7404fef4d4b2c4f0468e7c670d http://b/3180373	2	-1	 3249[0] commit[0] 9531eea15052eccc004b5f853ab4452becf7a8ab/9531eea15052ecc004b5f853ab4452becf7a8ab[0] test[0] that[0] headers[0] aren't[0] accidentally[-1][NegatedDueToPreviousWord] transferred[0] across[0] requests[0] [[Sentence=-1,2=word max, 1-5]] we[0] used[0] to[0] have[0] a[0] bug[0] where[0] we'd[0] only[0] ever[0] add[0] headers[0] [[Sentence=-1,1=word max, 1-5]] so[0] if[0] a[0] request[0] was[0] redirected[0] from[0] a[0] [[Sentence=-1,1=word max, 1-5]] com[0] to[0] b[0] [[Sentence=-1,1=word max, 1-5]] com[0] to[0] c[0] [[Sentence=-1,1=word max, 1-5]] com[0] then[0] c[0] [[Sentence=-1,1=word max, 1-5]] com[0] would[0] be[0] able[0] to[0] see[0] cookies[0] from[0] the[0] other[0] two[0] hosts[0] [[Sentence=-1,1=word max, 1-5]] this[0] was[0] fixed[0] by[0] the[0] httpengine[0] refactor[0] but[0] tests[0] haven't[0] been[0] added[0] until[0] now[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i01588fe9662aae7404fef4d4b2c4f0468e7c670d/i01588fe9662ae7404fef4d4b2c4f0468e7c670d[0] http[0] ://b/3180373[0] [[Sentence=-1,1=word max, 1-5]][[[2,-1 max of sentences]]]
3408 commit e9af8901fc4ed7c05d085e2e492f5dcc857f0146 samplingprofilerintegration and samplingprofiler improvements (2/3) summary: frameworks/base - fix profiling to collect data beyond the first snapshot - avoid many small files, accumulate data over process lifetime libcore: - add support for vm specific sampling, trying to cut down overhead - added support for converting snapshot files to text format - fixed race in profiler when stopping dalvik - added vmstack.setthreadstacktrace interface for filling a stack trace into an existing stacktraceelement[] details: frameworks/base changed snapshots from text to binary hprof format (bumping version to 3) changed from one file per snapshot to one file per process lifetime. restart profiling after snapshot. core/java/com/android/internal/os/samplingprofilerintegration.java add quick test in maybesnapshot to avoid doing work when the samplingprofilerintegration is disabled. make maybesnapshot private. remove unneeded memory allocation in handlelowmemory. core/java/android/app/activitythread.java libcore added threadsampler interface. this allows vm specific thread sampling optimizations. the portable version continues to use thread.getstacktrace(). dalvik/src/main/java/dalvik/system/profiler/threadsampler.java dalvik/src/main/java/dalvik/system/profiler/portablethreadsampler.java dalvik/src/main/java/dalvik/system/profiler/samplingprofiler.java add vmstack.setthreadstacktrace and use in new dalvikthreadsampler to avoid allocating a full stack trace when only a limited depth is desired. dalvik/src/main/java/dalvik/system/profiler/dalvikthreadsampler.java dalvik/src/main/java/dalvik/system/vmstack.java refactored binaryhprof.readmagic out of binaryhprofreader so it can be used by hprofbinarytoascii converter to probing file types. added magic number constant to be shared between readmagic and binaryhprofwriter. dalvik/src/main/java/dalvik/system/profiler/binaryhprof.java dalvik/src/main/java/dalvik/system/profiler/binaryhprofreader.java dalvik/src/main/java/dalvik/system/profiler/binaryhprofwriter.java dalvik/src/main/java/dalvik/system/profiler/hprofbinarytoascii.java removed unneeded hprofwriter interface. changed to simpler static interface to write hprofdata to binary and text formats. dalvik/src/main/java/dalvik/system/profiler/hprofwriter.java dalvik/src/main/java/dalvik/system/profiler/asciihprofwriter.java dalvik/src/main/java/dalvik/system/profiler/binaryhprofwriter.java dalvik/src/test/java/dalvik/system/profiler/samplingprofilertest.java added support for reading snapshot files created by samplingprofilerintegration by stripping the text header to allow easier conversion to the text format. dalvik/src/main/java/dalvik/system/profiler/hprofbinarytoascii.java fixed race between sampler and samplingprofiler.stop. samplingprofiler.stop previously simply called the sampler's timertask.cancel method, but this does not wait for a currently running sampler to finish. the timertask documentation says the only reliable way to do this is to have the run() cancel itself, so that is what is now done, with new code to ensure that samplingprofiler.stop does not return until the sampler has been terminated. dalvik/src/main/java/dalvik/system/profiler/samplingprofiler.java dalvik refactored vmstack_getthreadstacktrace to create helper gettracebuf used to implement new vmstack_setthreadstacktrace. the new version interface fills an existing stacktraceelement[], avoid allocating unnecessary stacktraceelements. vm/native/dalvik_system_vmstack.c refactor dvmgetstacktraceraw to create dvmsetstacktraceraw which fills in an existing, potentially smaller, stacktraceelement[]. vm/exception.c vm/exception.h change stack depths to be unsigned to avoid signed/unsigned comparison warnings. vm/ddm.c vm/exception.c vm/exception.h change-id: id65df6e72b7c727a0c8af15dbf6943297c591541 	3408 commit e9af8901fc4ed7c05d085e2e492f5dcc857f0146 samplingprofilerintegration and samplingprofiler improvements (2/3) summary: frameworks/base - fix profiling to collect data beyond the first snapshot - avoid many small files, accumulate data over process lifetime libcore: - add support for vm specific sampling, trying to cut down overhead - added support for converting snapshot files to text format - fixed race in profiler when stopping dalvik - added vmstack.<br>setthreadstacktrace interface for filling a stack trace into an existing stacktraceelement[] details: frameworks/base changed snapshots from text to binary hprof format (bumping version to 3) changed from one file per snapshot to one file per process lifetime.<br> restart profiling after snapshot.<br> core/java/com/android/internal/os/samplingprofilerintegration.<br>java add quick test in maybesnapshot to avoid doing work when the samplingprofilerintegration is disabled.<br> make maybesnapshot private.<br> remove unneeded memory allocation in handlelowmemory.<br> core/java/android/app/activitythread.<br>java libcore added threadsampler interface.<br> this allows vm specific thread sampling optimizations.<br> the portable version continues to use thread.<br>getstacktrace(<br> dalvik/src/main/java/dalvik/system/profiler/threadsampler.<br>java dalvik/src/main/java/dalvik/system/profiler/portablethreadsampler.<br>java dalvik/src/main/java/dalvik/system/profiler/samplingprofiler.<br>java add vmstack.<br>setthreadstacktrace and use in new dalvikthreadsampler to avoid allocating a full stack trace when only a limited depth is desired.<br> dalvik/src/main/java/dalvik/system/profiler/dalvikthreadsampler.<br>java dalvik/src/main/java/dalvik/system/vmstack.<br>java refactored binaryhprof.<br>readmagic out of binaryhprofreader so it can be used by hprofbinarytoasci converter to probing file types.<br> added magic number constant to be shared between readmagic and binaryhprofwriter.<br> dalvik/src/main/java/dalvik/system/profiler/binaryhprof.<br>java dalvik/src/main/java/dalvik/system/profiler/binaryhprofreader.<br>java dalvik/src/main/java/dalvik/system/profiler/binaryhprofwriter.<br>java dalvik/src/main/java/dalvik/system/profiler/hprofbinarytoasci.<br>java removed unneeded hprofwriter interface.<br> changed to simpler static interface to write hprofdata to binary and text formats.<br> dalvik/src/main/java/dalvik/system/profiler/hprofwriter.<br>java dalvik/src/main/java/dalvik/system/profiler/ascihprofwriter.<br>java dalvik/src/main/java/dalvik/system/profiler/binaryhprofwriter.<br>java dalvik/src/test/java/dalvik/system/profiler/samplingprofilertest.<br>java added support for reading snapshot files created by samplingprofilerintegration by stripping the text header to allow easier conversion to the text format.<br> dalvik/src/main/java/dalvik/system/profiler/hprofbinarytoasci.<br>java fixed race between sampler and samplingprofiler.<br>stop.<br> samplingprofiler.<br>stop previously simply called the sampler's timertask.<br>cancel method, but this does not wait for a currently running sampler to finish.<br> the timertask documentation says the only reliable way to do this is to have the run( cancel itself, so that is what is now done, with new code to ensure that samplingprofiler.<br>stop does not return until the sampler has been terminated.<br> dalvik/src/main/java/dalvik/system/profiler/samplingprofiler.<br>java dalvik refactored vmstack_getthreadstacktrace to create helper gettracebuf used to implement new vmstack_setthreadstacktrace.<br> the new version interface fills an existing stacktraceelement[], avoid allocating unnecessary stacktraceelements.<br> vm/native/dalvik_system_vmstack.<br>c refactor dvmgetstacktraceraw to create dvmsetstacktraceraw which fills in an existing, potentially smaller, stacktraceelement[].<br> vm/exception.<br>c vm/exception.<br>h change stack depths to be unsigned to avoid signed/unsigned comparison warnings.<br> vm/ddm.<br>c vm/exception.<br>c vm/exception.<br>h change-id: id65df6e72b7c727a0c8af15dbf6943297c591541	2	-2	 3408[0] commit[0] e9af8901fc4ed7c05d085e2e492f5dcc857f0146[0] samplingprofilerintegration[0] and[0] samplingprofiler[0] improvements[1] (2/3[0] summary[0] frameworks/base[0] fix[0] profiling[0] to[0] collect[0] data[0] beyond[0] the[0] first[0] snapshot[0] avoid[-1] many[0] small[0] files[0] accumulate[0] data[0] over[0] process[0] lifetime[0] libcore[0] add[0] support[0] for[0] vm[0] specific[0] sampling[0] trying[0] to[0] cut[0] down[0] overhead[0] added[0] support[0] for[0] converting[0] snapshot[0] files[0] to[0] text[0] format[0] fixed[0] race[0] in[0] profiler[0] when[0] stopping[0] dalvik[0] added[0] vmstack[0] [[Sentence=-2,2=word max, 1-5]] setthreadstacktrace[0] interface[0] for[0] filling[0] a[0] stack[0] trace[0] into[0] an[0] existing[0] stacktraceelement[][0] details[0] frameworks/base[0] changed[0] snapshots[0] from[0] text[0] to[0] binary[0] hprof[0] format[0] bumping[0] version[0] to[0] 3[0] changed[0] from[0] one[0] file[0] per[0] snapshot[0] to[0] one[0] file[0] per[0] process[0] lifetime[0] [[Sentence=-1,1=word max, 1-5]] restart[0] profiling[0] after[0] snapshot[0] [[Sentence=-1,1=word max, 1-5]] core/java/com/android/internal/os/samplingprofilerintegration[0] [[Sentence=-1,1=word max, 1-5]] java[0] add[0] quick[0] test[0] in[0] maybesnapshot[0] to[0] avoid[-1] doing[0] work[0] when[0] the[0] samplingprofilerintegration[0] is[0] disabled[0] [[Sentence=-2,1=word max, 1-5]] make[0] maybesnapshot[0] private[0] [[Sentence=-1,1=word max, 1-5]] remove[0] unneeded[0] memory[0] allocation[0] in[0] handlelowmemory[0] [[Sentence=-1,1=word max, 1-5]] core/java/android/app/activitythread[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore[0] added[0] threadsampler[0] interface[0] [[Sentence=-1,1=word max, 1-5]] this[0] allows[0] vm[0] specific[0] thread[0] sampling[0] optimizations[0] [[Sentence=-1,1=word max, 1-5]] the[0] portable[0] version[0] continues[0] to[0] use[0] thread[0] [[Sentence=-1,1=word max, 1-5]] getstacktrace[0] [[Sentence=-1,1=word max, 1-5]] dalvik/src/main/java/dalvik/system/profiler/threadsampler[0] [[Sentence=-1,1=word max, 1-5]] java[0] dalvik/src/main/java/dalvik/system/profiler/portablethreadsampler[0] [[Sentence=-1,1=word max, 1-5]] java[0] dalvik/src/main/java/dalvik/system/profiler/samplingprofiler[0] [[Sentence=-1,1=word max, 1-5]] java[0] add[0] vmstack[0] [[Sentence=-1,1=word max, 1-5]] setthreadstacktrace[0] and[0] use[0] in[0] new[0] dalvikthreadsampler[0] to[0] avoid[-1] allocating[0] a[0] full[0] stack[0] trace[0] when[0] only[0] a[0] limited[0] depth[0] is[0] desired[0] [[Sentence=-2,1=word max, 1-5]] dalvik/src/main/java/dalvik/system/profiler/dalvikthreadsampler[0] [[Sentence=-1,1=word max, 1-5]] java[0] dalvik/src/main/java/dalvik/system/vmstack[0] [[Sentence=-1,1=word max, 1-5]] java[0] refactored[0] binaryhprof[0] [[Sentence=-1,1=word max, 1-5]] readmagic[0] out[0] of[0] binaryhprofreader[0] so[0] it[0] can[0] be[0] used[0] by[0] hprofbinarytoascii/hprofbinarytoasci[0] converter[0] to[0] probing[0] file[0] types[0] [[Sentence=-1,1=word max, 1-5]] added[0] magic[0] number[0] constant[0] to[0] be[0] shared[0] between[0] readmagic[0] and[0] binaryhprofwriter[0] [[Sentence=-1,1=word max, 1-5]] dalvik/src/main/java/dalvik/system/profiler/binaryhprof[0] [[Sentence=-1,1=word max, 1-5]] java[0] dalvik/src/main/java/dalvik/system/profiler/binaryhprofreader[0] [[Sentence=-1,1=word max, 1-5]] java[0] dalvik/src/main/java/dalvik/system/profiler/binaryhprofwriter[0] [[Sentence=-1,1=word max, 1-5]] java[0] dalvik/src/main/java/dalvik/system/profiler/hprofbinarytoascii/dalvik/src/main/java/dalvik/system/profiler/hprofbinarytoasci[0] [[Sentence=-1,1=word max, 1-5]] java[0] removed[0] unneeded[0] hprofwriter[0] interface[0] [[Sentence=-1,1=word max, 1-5]] changed[0] to[0] simpler[0] static[0] interface[0] to[0] write[0] hprofdata[0] to[0] binary[0] and[0] text[0] formats[0] [[Sentence=-1,1=word max, 1-5]] dalvik/src/main/java/dalvik/system/profiler/hprofwriter[0] [[Sentence=-1,1=word max, 1-5]] java[0] dalvik/src/main/java/dalvik/system/profiler/asciihprofwriter/dalvik/src/main/java/dalvik/system/profiler/ascihprofwriter[0] [[Sentence=-1,1=word max, 1-5]] java[0] dalvik/src/main/java/dalvik/system/profiler/binaryhprofwriter[0] [[Sentence=-1,1=word max, 1-5]] java[0] dalvik/src/test/java/dalvik/system/profiler/samplingprofilertest[0] [[Sentence=-1,1=word max, 1-5]] java[0] added[0] support[0] for[0] reading[0] snapshot[0] files[0] created[0] by[0] samplingprofilerintegration[0] by[0] stripping[0] the[0] text[0] header[0] to[0] allow[0] easier[0] conversion[0] to[0] the[0] text[0] format[0] [[Sentence=-1,1=word max, 1-5]] dalvik/src/main/java/dalvik/system/profiler/hprofbinarytoascii/dalvik/src/main/java/dalvik/system/profiler/hprofbinarytoasci[0] [[Sentence=-1,1=word max, 1-5]] java[0] fixed[0] race[0] between[0] sampler[0] and[0] samplingprofiler[0] [[Sentence=-1,1=word max, 1-5]] stop[0] [[Sentence=-1,1=word max, 1-5]] samplingprofiler[0] [[Sentence=-1,1=word max, 1-5]] stop[0] previously[0] simply[0] called[0] the[0] sampler's[0] timertask[0] [[Sentence=-1,1=word max, 1-5]] cancel[-1] method[0] but[0] this[0] does[0] not[0] wait[0] for[0] a[0] currently[0] running[0] sampler[0] to[0] finish[0] [[Sentence=-2,1=word max, 1-5]] the[0] timertask[0] documentation[0] says[0] the[0] only[0] reliable[0] way[0] to[0] do[0] this[0] is[0] to[0] have[0] the[0] run[0] cancel[-1] itself[0] so[0] that[0] is[0] what[0] is[0] now[0] done[0] with[0] new[0] code[0] to[0] ensure[0] that[0] samplingprofiler[0] [[Sentence=-2,1=word max, 1-5]] stop[0] does[0] not[0] return[0] until[0] the[0] sampler[0] has[0] been[0] terminated[0] [[Sentence=-1,1=word max, 1-5]] dalvik/src/main/java/dalvik/system/profiler/samplingprofiler[0] [[Sentence=-1,1=word max, 1-5]] java[0] dalvik[0] refactored[0] vmstack_getthreadstacktrace[0] to[0] create[0] helper[0] gettracebuf[0] used[0] to[0] implement[0] new[0] vmstack_setthreadstacktrace[0] [[Sentence=-1,1=word max, 1-5]] the[0] new[0] version[0] interface[0] fills[0] an[0] existing[0] stacktraceelement[][0] avoid[-1] allocating[0] unnecessary[-1] stacktraceelements[0] [[Sentence=-2,1=word max, 1-5]] vm/native/dalvik_system_vmstack[0] [[Sentence=-1,1=word max, 1-5]] c[0] refactor[0] dvmgetstacktraceraw[0] to[0] create[0] dvmsetstacktraceraw[0] which[0] fills[0] in[0] an[0] existing[0] potentially[0] smaller[0] stacktraceelement[][0] [[Sentence=-1,1=word max, 1-5]] vm/exception[0] [[Sentence=-1,1=word max, 1-5]] c[0] vm/exception[0] [[Sentence=-1,1=word max, 1-5]] h[0] change[0] stack[0] depths[0] to[0] be[0] unsigned[0] to[0] avoid[-1] signed/unsigned[0] comparison[0] warnings[0] [[Sentence=-2,1=word max, 1-5]] vm/ddm[0] [[Sentence=-1,1=word max, 1-5]] c[0] vm/exception[0] [[Sentence=-1,1=word max, 1-5]] c[0] vm/exception[0] [[Sentence=-1,1=word max, 1-5]] h[0] change[0] id[0] id65df6e72b7c727a0c8af15dbf6943297c591541[0] [[Sentence=-1,1=word max, 1-5]][[[2,-2 max of sentences]]]
4333 commit d7fd1b88b89ca762afe5609d84a8eedfb611cbe1 adding binary hprof support to samplingprofiler samplingprofiler refactored: - hprofdata is now a separate class, the common data structure - samplingprofiler uses hprofdata as its runtime format - asciihprofwriter refactored from profiler, takes an hprofdata - new binaryhprofwriter to output hprofdata in binary format - new binaryhprofreader can recreate hprofdata from binary file - new hprofbinarytoascii command line tool to convert formats dalvik/src/main/java/dalvik/system/samplingprofiler.java samplingprofilertest expanded to cover new hprofdata class directly. includes testing of conversion from various hand constructed hprofdata to ascii and binary formats as well as from binary back to hprofdata with out loss of data. dalvik/src/test/java/dalvik/system/samplingprofilertest.java change-id: i6fe06f5dbdbf2f0bf2de228d9761f84d75290ba7 	433 commit d7fd1b88b89ca762afe5609d84a8eedfb611cbe1 adding binary hprof support to samplingprofiler samplingprofiler refactored: - hprofdata is now a separate class, the common data structure - samplingprofiler uses hprofdata as its runtime format - ascihprofwriter refactored from profiler, takes an hprofdata - new binaryhprofwriter to output hprofdata in binary format - new binaryhprofreader can recreate hprofdata from binary file - new hprofbinarytoasci command line tool to convert formats dalvik/src/main/java/dalvik/system/samplingprofiler.<br>java samplingprofilertest expanded to cover new hprofdata class directly.<br> includes testing of conversion from various hand constructed hprofdata to asci and binary formats as well as from binary back to hprofdata with out loss of data.<br> dalvik/src/test/java/dalvik/system/samplingprofilertest.<br>java change-id: i6fe06f5dbdbf2f0bf2de228d9761f84d75290ba7	1	-3	 4333/433[0] commit[0] d7fd1b88b89ca762afe5609d84a8eedfb611cbe1[0] adding[0] binary[0] hprof[0] support[0] to[0] samplingprofiler[0] samplingprofiler[0] refactored[0] hprofdata[0] is[0] now[0] a[0] separate[0] class[0] the[0] common[0] data[0] structure[0] samplingprofiler[0] uses[0] hprofdata[0] as[0] its[0] runtime[0] format[0] asciihprofwriter/ascihprofwriter[0] refactored[0] from[0] profiler[0] takes[0] an[0] hprofdata[0] new[0] binaryhprofwriter[0] to[0] output[0] hprofdata[0] in[0] binary[0] format[0] new[0] binaryhprofreader[0] can[0] recreate[0] hprofdata[0] from[0] binary[0] file[0] new[0] hprofbinarytoascii/hprofbinarytoasci[0] command[0] line[0] tool[0] to[0] convert[0] formats[0] dalvik/src/main/java/dalvik/system/samplingprofiler[0] [[Sentence=-1,1=word max, 1-5]] java[0] samplingprofilertest[0] expanded[0] to[0] cover[0] new[0] hprofdata[0] class[0] directly[0] [[Sentence=-1,1=word max, 1-5]] includes[0] testing[0] of[0] conversion[0] from[0] various[0] hand[0] constructed[0] hprofdata[0] to[0] ascii/asci[0] and[0] binary[0] formats[0] as[0] well[0] as[0] from[0] binary[0] back[0] to[0] hprofdata[0] with[0] out[0] loss[-2] of[0] data[0] [[Sentence=-3,1=word max, 1-5]] dalvik/src/test/java/dalvik/system/samplingprofilertest[0] [[Sentence=-1,1=word max, 1-5]] java[0] change[0] id[0] i6fe06f5dbdbf2f0bf2de228d9761f84d75290ba7[0] [[Sentence=-1,1=word max, 1-5]][[[1,-3 max of sentences]]]
4579 commit 6c78b7b94c232063ec559436b48b33751373ecf1 toward ec tls support summary: - javax.net.ssl tests are now working on the ri - keymanager can now handle ec_ec and ec_rsa - opensslsocketimpl.starthandshake now works if keymanager contains ec certificates details: add ciphersuite.getkeytype to provide x509keymanager key type strings, refactored from opensslserversocketimpl.checkenabledciphersuites. getkeytype is now also used in opensslsocketimpl.starthandshake to avoid calling setcertificate for unnecessary key types. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/ciphersuite.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslserversocketimpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl.java new ciphersuitetest to cover new getkeytype as well as existing functionality luni/src/test/java/org/apache/harmony/xnet/provider/jsse/ciphersuitetest.java add support to keymanager implementation for key types of the form ec_ec and ec_rsa. the first part implies the keypair algorithm (ec in these new key types) with a potentially different signature algorithm (ec vs rsa in these) luni/src/main/java/org/apache/harmony/xnet/provider/jsse/keymanagerimpl.java update nativecrypto.keytype to support ec_ec and ec_rsa in addition to ec which was added earlier. change from array of key_types to named key_type_* constants. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/nativecrypto.java overhauled keymanagerfactorytest to cover ec, ec_ec, ec_rsa cases luni/src/test/java/libcore/javax/net/ssl/keymanagerfactorytest.java support/src/test/java/libcore/java/security/standardnames.java changed testkeystore.createkeystore from always using bks to now use jks on the ri between bc ec keys and ri x509 certificates. because jks requires a password, we now default "password" on the ri. support/src/test/java/libcore/java/security/testkeystore.java luni/src/test/java/libcore/javax/net/ssl/sslcontexttest.java support/src/test/java/libcore/java/security/standardnames.java testkeystore.create now accepts key types like ec_rsa. changed testkeystore.createkeys to allow a privatekeyentry to be specified for signing to enable creation of ec_rsa test certificate. added getrootcertificate/rootcertificate to allow lookup of privatekeyentry for signing. changed testkeystore.getprivatekey to take explicit signature algorithm to retrieve ec_ec vs ec_rsa entries. support/src/test/java/libcore/java/security/testkeystore.java luni/src/test/java/libcore/java/security/keystoretest.java luni/src/test/java/libcore/javax/net/ssl/keymanagerfactorytest.java luni/src/test/java/libcore/java/security/cert/pkixparameterstest.java luni/src/test/java/libcore/javax/net/ssl/trustmanagerfactorytest.java luni/src/test/java/org/apache/harmony/xnet/provider/jsse/nativecryptotest.java support/src/test/java/libcore/java/security/standardnames.java added support for ec cipher suites on the ri. also test with and without new tls_empty_renegotiation_info_scsv cipher suite which is used to specify the new tls secure renegotiation. luni/src/test/java/libcore/javax/net/ssl/sslenginetest.java luni/src/test/java/libcore/javax/net/ssl/sslsockettest.java support/src/test/java/libcore/java/security/standardnames.java new testkeymanager and additional logging in testtrustmanager. logging in both is disabled by default using devnullprintstream. support/src/test/java/libcore/javax/net/ssl/testkeymanager.java support/src/test/java/libcore/javax/net/ssl/testtrustmanager.java support/src/test/java/libcore/java/io/devnullprintstream.java bug: 3058375 change-id: ia5e2a00a025858e10d1076b900886994b481e05a 	4579 commit 6c78b7b94c232063ec559436b48b33751373ecf1 toward ec tls support summary: - javax.<br>net.<br>ssl tests are now working on the ri - keymanager can now handle ec_ec and ec_rsa - opensslsocketimpl.<br>starthandshake now works if keymanager contains ec certificates details: add ciphersuite.<br>getkeytype to provide x509keymanager key type strings, refactored from opensslserversocketimpl.<br>checkenabledciphersuites.<br> getkeytype is now also used in opensslsocketimpl.<br>starthandshake to avoid calling setcertificate for unnecessary key types.<br> luni/src/main/java/org/apache/harmony/xnet/provider/jsse/ciphersuite.<br>java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslserversocketimpl.<br>java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl.<br>java new ciphersuitetest to cover new getkeytype as well as existing functionality luni/src/test/java/org/apache/harmony/xnet/provider/jsse/ciphersuitetest.<br>java add support to keymanager implementation for key types of the form ec_ec and ec_rsa.<br> the first part implies the keypair algorithm (ec in these new key types) with a potentially different signature algorithm (ec vs rsa in these) luni/src/main/java/org/apache/harmony/xnet/provider/jsse/keymanagerimpl.<br>java update nativecrypto.<br>keytype to support ec_ec and ec_rsa in addition to ec which was added earlier.<br> change from array of key_types to named key_type_* constants.<br> luni/src/main/java/org/apache/harmony/xnet/provider/jsse/nativecrypto.<br>java overhauled keymanagerfactorytest to cover ec, ec_ec, ec_rsa cases luni/src/test/java/libcore/javax/net/ssl/keymanagerfactorytest.<br>java support/src/test/java/libcore/java/security/standardnames.<br>java changed testkeystore.<br>createkeystore from always using bks to now use jks on the ri between bc ec keys and ri x509 certificates.<br> because jks requires a password, we now default "password" on the ri.<br> support/src/test/java/libcore/java/security/testkeystore.<br>java luni/src/test/java/libcore/javax/net/ssl/sslcontexttest.<br>java support/src/test/java/libcore/java/security/standardnames.<br>java testkeystore.<br>create now accepts key types like ec_rsa.<br> changed testkeystore.<br>createkeys to allow a privatekeyentry to be specified for signing to enable creation of ec_rsa test certificate.<br> added getrootcertificate/rootcertificate to allow lookup of privatekeyentry for signing.<br> changed testkeystore.<br>getprivatekey to take explicit signature algorithm to retrieve ec_ec vs ec_rsa entries.<br> support/src/test/java/libcore/java/security/testkeystore.<br>java luni/src/test/java/libcore/java/security/keystoretest.<br>java luni/src/test/java/libcore/javax/net/ssl/keymanagerfactorytest.<br>java luni/src/test/java/libcore/java/security/cert/pkixparameterstest.<br>java luni/src/test/java/libcore/javax/net/ssl/trustmanagerfactorytest.<br>java luni/src/test/java/org/apache/harmony/xnet/provider/jsse/nativecryptotest.<br>java support/src/test/java/libcore/java/security/standardnames.<br>java added support for ec cipher suites on the ri.<br> also test with and without new tls_empty_renegotiation_info_scsv cipher suite which is used to specify the new tls secure renegotiation.<br> luni/src/test/java/libcore/javax/net/ssl/sslenginetest.<br>java luni/src/test/java/libcore/javax/net/ssl/sslsockettest.<br>java support/src/test/java/libcore/java/security/standardnames.<br>java new testkeymanager and additional logging in testtrustmanager.<br> logging in both is disabled by default using devnullprintstream.<br> support/src/test/java/libcore/javax/net/ssl/testkeymanager.<br>java support/src/test/java/libcore/javax/net/ssl/testtrustmanager.<br>java support/src/test/java/libcore/java/io/devnullprintstream.<br>java bug: 3058375 change-id: ia5e2a00a025858e10d1076b900886994b481e05a	2	-2	 4579[0] commit[0] 6c78b7b94c232063ec559436b48b33751373ecf1[0] toward[0] ec[0] tls[0] support[0] summary[0] javax[0] [[Sentence=-1,1=word max, 1-5]] net[0] [[Sentence=-1,1=word max, 1-5]] ssl[0] tests[0] are[0] now[0] working[0] on[0] the[0] ri[0] keymanager[0] can[0] now[0] handle[0] ec_ec[0] and[0] ec_rsa[0] opensslsocketimpl[0] [[Sentence=-1,1=word max, 1-5]] starthandshake[0] now[0] works[0] if[0] keymanager[0] contains[0] ec[0] certificates[0] details[0] add[0] ciphersuite[0] [[Sentence=-1,1=word max, 1-5]] getkeytype[0] to[0] provide[0] x509keymanager[0] key[0] type[0] strings[0] refactored[0] from[0] opensslserversocketimpl[0] [[Sentence=-1,1=word max, 1-5]] checkenabledciphersuites[0] [[Sentence=-1,1=word max, 1-5]] getkeytype[0] is[0] now[0] also[0] used[0] in[0] opensslsocketimpl[0] [[Sentence=-1,1=word max, 1-5]] starthandshake[0] to[0] avoid[-1] calling[0] setcertificate[0] for[0] unnecessary[-1] key[0] types[0] [[Sentence=-2,1=word max, 1-5]] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/ciphersuite[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslserversocketimpl[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl[0] [[Sentence=-1,1=word max, 1-5]] java[0] new[0] ciphersuitetest[0] to[0] cover[0] new[0] getkeytype[0] as[0] well[0] as[0] existing[0] functionality[0] luni/src/test/java/org/apache/harmony/xnet/provider/jsse/ciphersuitetest[0] [[Sentence=-1,1=word max, 1-5]] java[0] add[0] support[0] to[0] keymanager[0] implementation[0] for[0] key[0] types[0] of[0] the[0] form[0] ec_ec[0] and[0] ec_rsa[0] [[Sentence=-1,1=word max, 1-5]] the[0] first[0] part[0] implies[0] the[0] keypair[0] algorithm[0] ec[0] in[0] these[0] new[0] key[0] types[0] with[0] a[0] potentially[0] different[0] signature[0] algorithm[0] ec[0] vs[0] rsa[0] in[0] these[0] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/keymanagerimpl[0] [[Sentence=-1,1=word max, 1-5]] java[0] update[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] keytype[0] to[0] support[0] ec_ec[0] and[0] ec_rsa[0] in[0] addition[0] to[0] ec[0] which[0] was[0] added[0] earlier[0] [[Sentence=-1,1=word max, 1-5]] change[0] from[0] array[0] of[0] key_types[0] to[0] named[0] key_type_[0] constants[0] [[Sentence=-1,1=word max, 1-5]] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] java[0] overhauled[0] keymanagerfactorytest[0] to[0] cover[0] ec[0] ec_ec[0] ec_rsa[0] cases[0] luni/src/test/java/libcore/javax/net/ssl/keymanagerfactorytest[0] [[Sentence=-1,1=word max, 1-5]] java[0] support/src/test/java/libcore/java/security/standardnames[0] [[Sentence=-1,1=word max, 1-5]] java[0] changed[0] testkeystore[0] [[Sentence=-1,1=word max, 1-5]] createkeystore[0] from[0] always[0] using[0] bks[0] to[0] now[0] use[0] jks[0] on[0] the[0] ri[0] between[0] bc[0] ec[0] keys[0] and[0] ri[0] x509[0] certificates[0] [[Sentence=-1,1=word max, 1-5]] because[0] jks[0] requires[0] a[0] password[0] we[0] now[0] default[-1] password[0] on[0] the[0] ri[0] [[Sentence=-2,1=word max, 1-5]] support/src/test/java/libcore/java/security/testkeystore[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/libcore/javax/net/ssl/sslcontexttest[0] [[Sentence=-1,1=word max, 1-5]] java[0] support/src/test/java/libcore/java/security/standardnames[0] [[Sentence=-1,1=word max, 1-5]] java[0] testkeystore[0] [[Sentence=-1,1=word max, 1-5]] create[0] now[0] accepts[0] key[0] types[0] like[0] ec_rsa[0] [[Sentence=-1,1=word max, 1-5]] changed[0] testkeystore[0] [[Sentence=-1,1=word max, 1-5]] createkeys[0] to[0] allow[0] a[0] privatekeyentry[0] to[0] be[0] specified[0] for[0] signing[0] to[0] enable[0] creation[0] of[0] ec_rsa[0] test[0] certificate[0] [[Sentence=-1,1=word max, 1-5]] added[0] getrootcertificate/rootcertificate[0] to[0] allow[0] lookup[0] of[0] privatekeyentry[0] for[0] signing[0] [[Sentence=-1,1=word max, 1-5]] changed[0] testkeystore[0] [[Sentence=-1,1=word max, 1-5]] getprivatekey[0] to[0] take[0] explicit[0] signature[0] algorithm[0] to[0] retrieve[0] ec_ec[0] vs[0] ec_rsa[0] entries[0] [[Sentence=-1,1=word max, 1-5]] support/src/test/java/libcore/java/security/testkeystore[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/libcore/java/security/keystoretest[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/libcore/javax/net/ssl/keymanagerfactorytest[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/libcore/java/security/cert/pkixparameterstest[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/libcore/javax/net/ssl/trustmanagerfactorytest[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/org/apache/harmony/xnet/provider/jsse/nativecryptotest[0] [[Sentence=-1,1=word max, 1-5]] java[0] support/src/test/java/libcore/java/security/standardnames[0] [[Sentence=-1,1=word max, 1-5]] java[0] added[0] support[0] for[0] ec[0] cipher[0] suites[0] on[0] the[0] ri[0] [[Sentence=-1,1=word max, 1-5]] also[0] test[0] with[0] and[0] without[0] new[0] tls_empty_renegotiation_info_scsv[0] cipher[0] suite[0] which[0] is[0] used[0] to[0] specify[0] the[0] new[0] tls[0] secure[1] renegotiation[0] [[Sentence=-1,2=word max, 1-5]] luni/src/test/java/libcore/javax/net/ssl/sslenginetest[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/libcore/javax/net/ssl/sslsockettest[0] [[Sentence=-1,1=word max, 1-5]] java[0] support/src/test/java/libcore/java/security/standardnames[0] [[Sentence=-1,1=word max, 1-5]] java[0] new[0] testkeymanager[0] and[0] additional[0] logging[0] in[0] testtrustmanager[0] [[Sentence=-1,1=word max, 1-5]] logging[0] in[0] both[0] is[0] disabled[0] by[0] default[-1] using[0] devnullprintstream[0] [[Sentence=-2,1=word max, 1-5]] support/src/test/java/libcore/javax/net/ssl/testkeymanager[0] [[Sentence=-1,1=word max, 1-5]] java[0] support/src/test/java/libcore/javax/net/ssl/testtrustmanager[0] [[Sentence=-1,1=word max, 1-5]] java[0] support/src/test/java/libcore/java/io/devnullprintstream[0] [[Sentence=-1,1=word max, 1-5]] java[0] bug[0] 3058375[0] change[0] id[0] ia5e2a00a025858e10d1076b900886994b481e05a[0] [[Sentence=-1,1=word max, 1-5]][[[2,-2 max of sentences]]]
5798 commit 059dbc04218144f985b20a228bbe98139d400d0c improved client certificate and certificate chain support summary: - openssl: add openssl support for specifying per key certificate chains - libcore: properly implement client certificate request call back - libcore: properly implement sending certificate chain - libcore: properly implement retreiving local certificate chain - libcore: added an sslcontext for non-openssl sslsocket creation details: external/openssl improve patch generate support by applying all other patches to baseline to remove cross polluting other patch changes into target patch. move cleanup of ./configure output to import script from openssl.config. import_openssl.sh openssl.config adding ssl_use_certificate_chain and ssl_get_certificate_chain to continue to finish most of remaining jsse issues. include/openssl/ssl.h ssl/s3_both.c ssl/ssl.h ssl/ssl_locl.h ssl/ssl_rsa.c updated patch (and list of input files to patch) patches/jsse.patch openssl.config libcore restoring sslcontextimpl as provider of non-openssl sslsocketimpl instances for interoperability testing. opensslcontextimpl is the new subclass that provides opensslsocketimpl. jsseprovider provides the old style sslcontexts, opensslprovider provides the openssl sslcontext, which includes the "default" context. changed to register sslcontexts without aliases to match the ri. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/jsseprovider.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslprovider.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/defaultsslcontextimpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslcontextimpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/sslcontextimpl.java native interface updates to support opensslsocketimpl improvements - key_types now expanded based on what we are being provided by openssl. keytype function now maps key type values received from clientcertificaterequested callback. - removed remaining uses of string pem encoding, now using asn1 der consistently includes ssl_session_get_peer_cert_chain, verifycertificatechain - fixed clientcertificaterequested to properly include all key types supported by server, not just the one from the cipher suite. we also now properly include the list of supported cas to help the client select a certificate to use. - fixed nativecrypto.ssl_use_certificate implementation to use new ssl_use_certificate_chain function from openssl to pass chain to openssl. - added error handling of all uses of sk_*_push which can fail due to out of memory - fixed compile warning due to missing jni_trace argument luni/src/main/java/org/apache/harmony/xnet/provider/jsse/nativecrypto.java luni/src/main/native/nativecrypto.cpp luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl.java pass this into chooseserveralias call as well in significantly revamped choseclientalias luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl.java minor code cleanup while reviewing diff between checkclienttrusted and checkservertrusted luni/src/main/java/org/apache/harmony/xnet/provider/jsse/trustmanagerimpl.java improvements to ssl test support to go along with client certificate and certificate chain changes. testsslcontext now has separate contexts for the client and server (as well as seperate key stores information). testkeystore now is more realistic by default, creating a ca, intermediate ca, and separate client and server certificates, as well as a client keystore that simply contains the ca and no certificates. support/src/test/java/javax/net/ssl/testkeystore.java support/src/test/java/javax/net/ssl/testsslcontext.java tests tracking api changes. tests involving cert chains now now updated to use testkeystore.assertchainlength to avoid hardwiring expected chain length in tests. these tests also now use testsslcontext.assertclientcertificatechain to validate that the chain is properly constructed and trusted by a trust manager. luni/src/test/java/java/net/urlconnectiontest.java luni/src/test/java/javax/net/ssl/sslcontexttest.java luni/src/test/java/javax/net/ssl/sslenginetest.java luni/src/test/java/javax/net/ssl/sslsessioncontexttest.java luni/src/test/java/javax/net/ssl/sslsessiontest.java luni/src/test/java/javax/net/ssl/sslsockettest.java support/src/test/java/java/security/standardnames.java support/src/test/java/javax/net/ssl/testsslenginepair.java support/src/test/java/javax/net/ssl/testsslsocketpair.java frameworks/base tracking change of sslcontextimpl to opensslcontextimpl core/java/android/net/sslcertificatesocketfactory.java core/java/android/net/http/httpsconnection.java tests/coretests/android/core/sslperformancetest.java tests/coretests/android/core/sslsockettest.java tracking changes to testsslcontext core/tests/coretests/src/android/net/http/httpsthroughhttpproxytest.java change-id: ie35ebce89966dfce62c316f7fe7252bf06935680 	5798 commit 059dbc04218144f985b20a228bbe98139d400d0c improved client certificate and certificate chain support summary: - openssl: add openssl support for specifying per key certificate chains - libcore: properly implement client certificate request call back - libcore: properly implement sending certificate chain - libcore: properly implement retreiving local certificate chain - libcore: added an sslcontext for non-openssl sslsocket creation details: external/openssl improve patch generate support by applying all other patches to baseline to remove cross polluting other patch changes into target patch.<br> move cleanup of ./configure output to import script from openssl.<br>config.<br> import_openssl.<br>sh openssl.<br>config adding ssl_use_certificate_chain and ssl_get_certificate_chain to continue to finish most of remaining jsse issues.<br> include/openssl/ssl.<br>h ssl/s3_both.<br>c ssl/ssl.<br>h ssl/ssl_locl.<br>h ssl/ssl_rsa.<br>c updated patch (and list of input files to patch) patches/jsse.<br>patch openssl.<br>config libcore restoring sslcontextimpl as provider of non-openssl sslsocketimpl instances for interoperability testing.<br> opensslcontextimpl is the new subclass that provides opensslsocketimpl.<br> jsseprovider provides the old style sslcontexts, opensslprovider provides the openssl sslcontext, which includes the "default" context.<br> changed to register sslcontexts without aliases to match the ri.<br> luni/src/main/java/org/apache/harmony/xnet/provider/jsse/jsseprovider.<br>java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslprovider.<br>java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/defaultsslcontextimpl.<br>java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslcontextimpl.<br>java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/sslcontextimpl.<br>java native interface updates to support opensslsocketimpl improvements - key_types now expanded based on what we are being provided by openssl.<br> keytype function now maps key type values received from clientcertificaterequested callback.<br> - removed remaining uses of string pem encoding, now using asn1 der consistently includes ssl_session_get_peer_cert_chain, verifycertificatechain - fixed clientcertificaterequested to properly include all key types supported by server, not just the one from the cipher suite.<br> we also now properly include the list of supported cas to help the client select a certificate to use.<br> - fixed nativecrypto.<br>ssl_use_certificate implementation to use new ssl_use_certificate_chain function from openssl to pass chain to openssl.<br> - added error handling of all uses of sk_*_push which can fail due to out of memory - fixed compile warning due to missing jni_trace argument luni/src/main/java/org/apache/harmony/xnet/provider/jsse/nativecrypto.<br>java luni/src/main/native/nativecrypto.<br>chat post luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl.<br>java pass this into chooseserveralias call as well in significantly revamped choseclientalias luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl.<br>java minor code cleanup while reviewing diff between checkclienttrusted and checkservertrusted luni/src/main/java/org/apache/harmony/xnet/provider/jsse/trustmanagerimpl.<br>java improvements to ssl test support to go along with client certificate and certificate chain changes.<br> testsslcontext now has separate contexts for the client and server (as well as seperate key stores information)<br> testkeystore now is more realistic by default, creating a ca, intermediate ca, and separate client and server certificates, as well as a client keystore that simply contains the ca and no certificates.<br> support/src/test/java/javax/net/ssl/testkeystore.<br>java support/src/test/java/javax/net/ssl/testsslcontext.<br>java tests tracking api changes.<br> tests involving cert chains now now updated to use testkeystore.<br>assertchainlength to avoid hardwiring expected chain length in tests.<br> these tests also now use testsslcontext.<br>assertclientcertificatechain to validate that the chain is properly constructed and trusted by a trust manager.<br> luni/src/test/java/java/net/urlconnectiontest.<br>java luni/src/test/java/javax/net/ssl/sslcontexttest.<br>java luni/src/test/java/javax/net/ssl/sslenginetest.<br>java luni/src/test/java/javax/net/ssl/sslsessioncontexttest.<br>java luni/src/test/java/javax/net/ssl/sslsessiontest.<br>java luni/src/test/java/javax/net/ssl/sslsockettest.<br>java support/src/test/java/java/security/standardnames.<br>java support/src/test/java/javax/net/ssl/testsslenginepair.<br>java support/src/test/java/javax/net/ssl/testsslsocketpair.<br>java frameworks/base tracking change of sslcontextimpl to opensslcontextimpl core/java/android/net/sslcertificatesocketfactory.<br>java core/java/android/net/http/httpsconnection.<br>java tests/coretests/android/core/sslperformancetest.<br>java tests/coretests/android/core/sslsockettest.<br>java tracking changes to testsslcontext core/tests/coretests/src/android/net/http/httpsthroughttpproxytest.<br>java change-id: ie35ebce89966dfce62c316f7fe7252bf06935680	2	-2	 5798[0] commit[0] 059dbc04218144f985b20a228bbe98139d400d0c[0] improved[1] client[0] certificate[0] and[0] certificate[0] chain[0] support[0] summary[0] openssl[0] add[0] openssl[0] support[0] for[0] specifying[0] per[0] key[0] certificate[0] chains[0] libcore[0] properly[0] implement[0] client[0] certificate[0] request[0] call[0] back[0] libcore[0] properly[0] implement[0] sending[0] certificate[0] chain[0] libcore[0] properly[0] implement[0] retreiving[0] local[0] certificate[0] chain[0] libcore[0] added[0] an[0] sslcontext[0] for[0] non[0] openssl[0] sslsocket[0] creation[0] details[0] external/openssl[0] improve[1] patch[0] generate[0] support[0] by[0] applying[0] all[0] other[0] patches[0] to[0] baseline[0] to[0] remove[0] cross[-1] polluting[-1] other[0] patch[0] changes[0] into[0] target[0] patch[0] [[Sentence=-2,2=word max, 1-5]] move[0] cleanup[0] of[0] ./configure[0] output[0] to[0] import[0] script[0] from[0] openssl[0] [[Sentence=-1,1=word max, 1-5]] config[0] [[Sentence=-1,1=word max, 1-5]] import_openssl[0] [[Sentence=-1,1=word max, 1-5]] sh[0] openssl[0] [[Sentence=-1,1=word max, 1-5]] config[0] adding[0] ssl_use_certificate_chain[0] and[0] ssl_get_certificate_chain[0] to[0] continue[0] to[0] finish[0] most[0] of[0] remaining[0] jsse[0] issues[0] [[Sentence=-1,1=word max, 1-5]] include/openssl/ssl[0] [[Sentence=-1,1=word max, 1-5]] h[0] ssl/s3_both[0] [[Sentence=-1,1=word max, 1-5]] c[0] ssl/ssl[0] [[Sentence=-1,1=word max, 1-5]] h[0] ssl/ssl_locl[0] [[Sentence=-1,1=word max, 1-5]] h[0] ssl/ssl_rsa[0] [[Sentence=-1,1=word max, 1-5]] c[0] updated[0] patch[0] and[0] list[0] of[0] input[0] files[0] to[0] patch[0] patches/jsse[0] [[Sentence=-1,1=word max, 1-5]] patch[0] openssl[0] [[Sentence=-1,1=word max, 1-5]] config[0] libcore[0] restoring[0] sslcontextimpl[0] as[0] provider[0] of[0] non[0] openssl[0] sslsocketimpl[0] instances[0] for[0] interoperability[0] testing[0] [[Sentence=-1,1=word max, 1-5]] opensslcontextimpl[0] is[0] the[0] new[0] subclass[0] that[0] provides[0] opensslsocketimpl[0] [[Sentence=-1,1=word max, 1-5]] jsseprovider[0] provides[0] the[0] old[0] style[0] sslcontexts[0] opensslprovider[0] provides[0] the[0] openssl[0] sslcontext[0] which[0] includes[0] the[0] default[-1] context[0] [[Sentence=-2,1=word max, 1-5]] changed[0] to[0] register[0] sslcontexts[0] without[0] aliases[0] to[0] match[0] the[0] ri[0] [[Sentence=-1,1=word max, 1-5]] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/jsseprovider[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslprovider[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/defaultsslcontextimpl[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslcontextimpl[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/sslcontextimpl[0] [[Sentence=-1,1=word max, 1-5]] java[0] native[0] interface[0] updates[0] to[0] support[0] opensslsocketimpl[0] improvements[1] key_types[0] now[0] expanded[0] based[0] on[0] what[0] we[0] are[0] being[0] provided[0] by[0] openssl[0] [[Sentence=-1,2=word max, 1-5]] keytype[0] function[0] now[0] maps[0] key[0] type[0] values[1] received[0] from[0] clientcertificaterequested[0] callback[0] [[Sentence=-1,2=word max, 1-5]] removed[0] remaining[0] uses[0] of[0] string[0] pem[0] encoding[0] now[0] using[0] asn1[0] der[0] consistently[0] includes[0] ssl_session_get_peer_cert_chain[0] verifycertificatechain[0] fixed[0] clientcertificaterequested[0] to[0] properly[0] include[0] all[0] key[0] types[0] supported[1] by[0] server[0] not[0] just[0] the[0] one[0] from[0] the[0] cipher[0] suite[0] [[Sentence=-1,2=word max, 1-5]] we[0] also[0] now[0] properly[0] include[0] the[0] list[0] of[0] supported[1] cas[0] to[0] help[0] the[0] client[0] select[0] a[0] certificate[0] to[0] use[0] [[Sentence=-1,2=word max, 1-5]] fixed[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] ssl_use_certificate[0] implementation[0] to[0] use[0] new[0] ssl_use_certificate_chain[0] function[0] from[0] openssl[0] to[0] pass[0] chain[0] to[0] openssl[0] [[Sentence=-1,1=word max, 1-5]] added[0] error[0] handling[0] of[0] all[0] uses[0] of[0] sk_[0] *_push[0] which[0] can[0] fail[0] due[0] to[0] out[0] of[0] memory[0] fixed[0] compile[0] warning[0] due[0] to[0] missing[0] jni_trace[0] argument[-1] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/nativecrypto[0] [[Sentence=-2,1=word max, 1-5]] java[0] luni/src/main/native/nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] cpp/cp[0] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl[0] [[Sentence=-1,1=word max, 1-5]] java[0] pass[0] this[0] into[0] chooseserveralias[0] call[0] as[0] well[0] in[0] significantly[0] revamped[0] choseclientalias[0] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl[0] [[Sentence=-1,1=word max, 1-5]] java[0] minor[0] code[0] cleanup[0] while[0] reviewing[0] diff[0] between[0] checkclienttrusted[0] and[0] checkservertrusted[0] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/trustmanagerimpl[0] [[Sentence=-1,1=word max, 1-5]] java[0] improvements[1] to[0] ssl[0] test[0] support[0] to[0] go[0] along[0] with[0] client[0] certificate[0] and[0] certificate[0] chain[0] changes[0] [[Sentence=-1,2=word max, 1-5]] testsslcontext[0] now[0] has[0] separate[0] contexts[0] for[0] the[0] client[0] and[0] server[0] as[0] well[0] as[0] seperate[0] key[0] stores[0] information[0] [[Sentence=-1,1=word max, 1-5]] testkeystore[0] now[0] is[0] more[0] realistic[0] by[0] default[-1] creating[0] a[0] ca[0] intermediate[0] ca[0] and[0] separate[0] client[0] and[0] server[0] certificates[0] as[0] well[0] as[0] a[0] client[0] keystore[0] that[0] simply[0] contains[0] the[0] ca[0] and[0] no[0] certificates[0] [[Sentence=-2,1=word max, 1-5]] support/src/test/java/javax/net/ssl/testkeystore[0] [[Sentence=-1,1=word max, 1-5]] java[0] support/src/test/java/javax/net/ssl/testsslcontext[0] [[Sentence=-1,1=word max, 1-5]] java[0] tests[0] tracking[0] api[0] changes[0] [[Sentence=-1,1=word max, 1-5]] tests[0] involving[0] cert[0] chains[0] now[0] now[0] updated[0] to[0] use[0] testkeystore[0] [[Sentence=-1,1=word max, 1-5]] assertchainlength[0] to[0] avoid[-1] hardwiring[0] expected[0] chain[0] length[0] in[0] tests[0] [[Sentence=-2,1=word max, 1-5]] these[0] tests[0] also[0] now[0] use[0] testsslcontext[0] [[Sentence=-1,1=word max, 1-5]] assertclientcertificatechain[0] to[0] validate[0] that[0] the[0] chain[0] is[0] properly[0] constructed[0] and[0] trusted[1] by[0] a[0] trust[1] manager[0] [[Sentence=-1,2=word max, 1-5]] luni/src/test/java/java/net/urlconnectiontest[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/javax/net/ssl/sslcontexttest[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/javax/net/ssl/sslenginetest[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/javax/net/ssl/sslsessioncontexttest[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/javax/net/ssl/sslsessiontest[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/javax/net/ssl/sslsockettest[0] [[Sentence=-1,1=word max, 1-5]] java[0] support/src/test/java/java/security/standardnames[0] [[Sentence=-1,1=word max, 1-5]] java[0] support/src/test/java/javax/net/ssl/testsslenginepair[0] [[Sentence=-1,1=word max, 1-5]] java[0] support/src/test/java/javax/net/ssl/testsslsocketpair[0] [[Sentence=-1,1=word max, 1-5]] java[0] frameworks/base[0] tracking[0] change[0] of[0] sslcontextimpl[0] to[0] opensslcontextimpl[0] core/java/android/net/sslcertificatesocketfactory[0] [[Sentence=-1,1=word max, 1-5]] java[0] core/java/android/net/http/httpsconnection[0] [[Sentence=-1,1=word max, 1-5]] java[0] tests/coretests/android/core/sslperformancetest[0] [[Sentence=-1,1=word max, 1-5]] java[0] tests/coretests/android/core/sslsockettest[0] [[Sentence=-1,1=word max, 1-5]] java[0] tracking[0] changes[0] to[0] testsslcontext[0] core/tests/coretests/src/android/net/http/httpsthroughhttpproxytest/core/tests/coretests/src/android/net/http/httpsthroughttpproxytest[0] [[Sentence=-1,1=word max, 1-5]] java[0] change[0] id[0] ie35ebce89966dfce62c316f7fe7252bf06935680[0] [[Sentence=-1,1=word max, 1-5]][[[2,-2 max of sentences]]]
6126 commit 204cab3c22b4d75c866c95e2d2eec42e14cbd924 supported cipher suites improvements added new test_sslsocket_getsupportedciphersuites_connect to make sure all cipher suites we claim work actually do. it clearly exposed that although a large number of cipher suites are supported by libssl.so, they are not properly wired up into the openssl jsse implementation. in particular elliptic curve has been disabled in our version bouncy castle does not work. in addition diffie-hellman does not work because we need to further integration work with openssl via ssl_set_tmp_dh_callback or ssl_set_tmp_dh. finally, ssl_rsa_export_with_rc4_40_md5 doesn't work but that is being left as knownfailure for more immediate cleanup based on serverhandshakeimpl's handling of keyexchange_rsa_export as part of having openssl call us back for certificates dynamically. luni/src/test/java/javax/net/ssl/sslsockettest.java refactored testsslcontext.createkeystore to create testkeystore which now factors out testsslcontext.createkeys from the old createkeystore method, which allows createkeys to be called multiple times for different key algorithms (for example dsa in addition to rsa). also added a reusable singleton instance to cut down on test execution time. support/src/test/java/javax/net/ssl/testkeystore.java removed publicalias/privatealias from testsslcontext since we now include both rsa and dsa key pairs in they keystore by default. added testsslcontext.assertcertificateinkeystore methods to help tests the previously used the alias fields fields. testsslcontext.create api changed as well since the alias names are no longer required. testsslcontext.createclient now needs to iterate over all server certificates when setting up its trustmanager instead of just grabbing one by alias name. support/src/test/java/javax/net/ssl/testsslcontext.java luni/src/test/java/javax/net/ssl/sslcontexttest.java luni/src/test/java/javax/net/ssl/sslsessiontest.java luni/src/test/java/javax/net/ssl/sslsockettest.java testsslsocketpair.connect now allows optional inclusion of server cipher suite list. support/src/test/java/javax/net/ssl/testsslsocketpair.java luni/src/test/java/javax/net/ssl/sslsessioncontexttest.java turning off elliptic curve and diffie-hellman which are not currently working. updating test expectations to match. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/nativecrypto.java support/src/test/java/javax/net/ssl/standardnames.java turn on registration of ecdsa and dsa since this part is currently functional (and excercised by testkeystore.create()) luni/src/main/java/org/bouncycastle/x509/x509util.java improve logging by including ssl pointer in error messages, which makes it easier to relate these errors to jni_trace messages. luni/src/main/native/org_apache_harmony_xnet_provider_jsse_nativecrypto.cpp change-id: i014d001a6a21a46c360678a346d3a3c8232f4d53 	6126 commit 204cab3c22b4d75c866c95e2d2eec42e14cbd924 supported cipher suites improvements added new test_sslsocket_getsupportedciphersuites_connect to make sure all cipher suites we claim work actually do.<br> it clearly exposed that although a large number of cipher suites are supported by libssl.<br>so, they are not properly wired up into the openssl jsse implementation.<br> in particular elliptic curve has been disabled in our version bouncy castle does not work.<br> in addition diffie-hellman does not work because we need to further integration work with openssl via ssl_set_tmp_dh_callback or ssl_set_tmp_dh.<br> finally, ssl_rsa_export_with_rc4_40_md5 doesn't work but that is being left as knownfailure for more immediate cleanup based on serverhandshakeimpl's handling of keyexchange_rsa_export as part of having openssl call us back for certificates dynamically.<br> luni/src/test/java/javax/net/ssl/sslsockettest.<br>java refactored testsslcontext.<br>createkeystore to create testkeystore which now factors out testsslcontext.<br>createkeys from the old createkeystore method, which allows createkeys to be called multiple times for different key algorithms (for example dsa in addition to rsa)<br> also added a reusable singleton instance to cut down on test execution time.<br> support/src/test/java/javax/net/ssl/testkeystore.<br>java removed publicalias/privatealias from testsslcontext since we now include both rsa and dsa key pairs in they keystore by default.<br> added testsslcontext.<br>assertcertificateinkeystore methods to help tests the previously used the alias fields fields.<br> testsslcontext.<br>create api changed as well since the alias names are no longer required.<br> testsslcontext.<br>createclient now needs to iterate over all server certificates when setting up its trustmanager instead of just grabbing one by alias name.<br> support/src/test/java/javax/net/ssl/testsslcontext.<br>java luni/src/test/java/javax/net/ssl/sslcontexttest.<br>java luni/src/test/java/javax/net/ssl/sslsessiontest.<br>java luni/src/test/java/javax/net/ssl/sslsockettest.<br>java testsslsocketpair.<br>connect now allows optional inclusion of server cipher suite list.<br> support/src/test/java/javax/net/ssl/testsslsocketpair.<br>java luni/src/test/java/javax/net/ssl/sslsessioncontexttest.<br>java turning off elliptic curve and diffie-hellman which are not currently working.<br> updating test expectations to match.<br> luni/src/main/java/org/apache/harmony/xnet/provider/jsse/nativecrypto.<br>java support/src/test/java/javax/net/ssl/standardnames.<br>java turn on registration of ecdsa and dsa since this part is currently functional (and excercised by testkeystore.<br>create( luni/src/main/java/org/bouncycastle/x509/x509util.<br>java improve logging by including ssl pointer in error messages, which makes it easier to relate these errors to jni_trace messages.<br> luni/src/main/native/org_apache_harmony_xnet_provider_jsse_nativecrypto.<br>chat post change-id: i014d001a6a21a46c360678a346d3a3c8232f4d53	2	-2	 6126[0] commit[0] 204cab3c22b4d75c866c95e2d2eec42e14cbd924[0] supported[1] cipher[0] suites[0] improvements[1] added[0] new[0] test_sslsocket_getsupportedciphersuites_connect[0] to[0] make[0] sure[0] all[0] cipher[0] suites[0] we[0] claim[0] work[0] actually[0] do[0] [[Sentence=-1,2=word max, 1-5]] it[0] clearly[0] exposed[-1] that[0] although[0] a[0] large[0] number[0] of[0] cipher[0] suites[0] are[0] supported[1] by[0] libssl[0] [[Sentence=-2,2=word max, 1-5]] so[0] they[0] are[0] not[0] properly[0] wired[0] up[0] into[0] the[0] openssl[0] jsse[0] implementation[0] [[Sentence=-1,1=word max, 1-5]] in[0] particular[0] elliptic[0] curve[0] has[0] been[0] disabled[0] in[0] our[0] version[0] bouncy[0] castle[0] does[0] not[0] work[0] [[Sentence=-1,1=word max, 1-5]] in[0] addition[0] diffie[0] hellman[0] does[0] not[0] work[0] because[0] we[0] need[0] to[0] further[0] integration[0] work[0] with[0] openssl[0] via[0] ssl_set_tmp_dh_callback[0] or[0] ssl_set_tmp_dh[0] [[Sentence=-1,1=word max, 1-5]] finally[0] ssl_rsa_export_with_rc4_40_md5[0] doesn't[0] work[0] but[0] that[0] is[0] being[0] left[0] as[0] knownfailure[0] for[0] more[0] immediate[0] cleanup[0] based[0] on[0] serverhandshakeimpl's[0] handling[0] of[0] keyexchange_rsa_export[0] as[0] part[0] of[0] having[0] openssl[0] call[0] us[0] back[0] for[0] certificates[0] dynamically[0] [[Sentence=-1,1=word max, 1-5]] luni/src/test/java/javax/net/ssl/sslsockettest[0] [[Sentence=-1,1=word max, 1-5]] java[0] refactored[0] testsslcontext[0] [[Sentence=-1,1=word max, 1-5]] createkeystore[0] to[0] create[0] testkeystore[0] which[0] now[0] factors[0] out[0] testsslcontext[0] [[Sentence=-1,1=word max, 1-5]] createkeys[0] from[0] the[0] old[0] createkeystore[0] method[0] which[0] allows[0] createkeys[0] to[0] be[0] called[0] multiple[0] times[0] for[0] different[0] key[0] algorithms[0] for[0] example[0] dsa[0] in[0] addition[0] to[0] rsa[0] [[Sentence=-1,1=word max, 1-5]] also[0] added[0] a[0] reusable[0] singleton[0] instance[0] to[0] cut[0] down[0] on[0] test[0] execution[0] time[0] [[Sentence=-1,1=word max, 1-5]] support/src/test/java/javax/net/ssl/testkeystore[0] [[Sentence=-1,1=word max, 1-5]] java[0] removed[0] publicalias/privatealias[0] from[0] testsslcontext[0] since[0] we[0] now[0] include[0] both[0] rsa[0] and[0] dsa[0] key[0] pairs[0] in[0] they[0] keystore[0] by[0] default[-1] [[Sentence=-2,1=word max, 1-5]] added[0] testsslcontext[0] [[Sentence=-1,1=word max, 1-5]] assertcertificateinkeystore[0] methods[0] to[0] help[0] tests[0] the[0] previously[0] used[0] the[0] alias[0] fields[0] fields[0] [[Sentence=-1,1=word max, 1-5]] testsslcontext[0] [[Sentence=-1,1=word max, 1-5]] create[0] api[0] changed[0] as[0] well[0] since[0] the[0] alias[0] names[0] are[0] no[0] longer[0] required[0] [[Sentence=-1,1=word max, 1-5]] testsslcontext[0] [[Sentence=-1,1=word max, 1-5]] createclient[0] now[0] needs[0] to[0] iterate[0] over[0] all[0] server[0] certificates[0] when[0] setting[0] up[0] its[0] trustmanager[1] instead[0] of[0] just[0] grabbing[-1][--1 LastWordBoosterStrength] one[0] by[0] alias[0] name[0] [[Sentence=-1,2=word max, 1-5]] support/src/test/java/javax/net/ssl/testsslcontext[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/javax/net/ssl/sslcontexttest[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/javax/net/ssl/sslsessiontest[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/javax/net/ssl/sslsockettest[0] [[Sentence=-1,1=word max, 1-5]] java[0] testsslsocketpair[0] [[Sentence=-1,1=word max, 1-5]] connect[0] now[0] allows[0] optional[0] inclusion[0] of[0] server[0] cipher[0] suite[0] list[0] [[Sentence=-1,1=word max, 1-5]] support/src/test/java/javax/net/ssl/testsslsocketpair[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/javax/net/ssl/sslsessioncontexttest[0] [[Sentence=-1,1=word max, 1-5]] java[0] turning[0] off[0] elliptic[0] curve[0] and[0] diffie[0] hellman[0] which[0] are[0] not[0] currently[0] working[0] [[Sentence=-1,1=word max, 1-5]] updating[0] test[0] expectations[0] to[0] match[0] [[Sentence=-1,1=word max, 1-5]] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] java[0] support/src/test/java/javax/net/ssl/standardnames[0] [[Sentence=-1,1=word max, 1-5]] java[0] turn[0] on[0] registration[0] of[0] ecdsa[0] and[0] dsa[0] since[0] this[0] part[0] is[0] currently[0] functional[0] and[0] excercised[0] by[0] testkeystore[0] [[Sentence=-1,1=word max, 1-5]] create[0] luni/src/main/java/org/bouncycastle/x509/x509util[0] [[Sentence=-1,1=word max, 1-5]] java[0] improve[1] logging[0] by[0] including[0] ssl[0] pointer[0] in[0] error[0] messages[0] which[0] makes[0] it[0] easier[0] to[0] relate[0] these[0] errors[0] to[0] jni_trace[0] messages[0] [[Sentence=-1,2=word max, 1-5]] luni/src/main/native/org_apache_harmony_xnet_provider_jsse_nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] cpp/cp[0] change[0] id[0] i014d001a6a21a46c360678a346d3a3c8232f4d53[0] [[Sentence=-1,1=word max, 1-5]][[[2,-2 max of sentences]]]
6210 commit bcfb325d5b1f9529b439cc0805a1c140521510f7 opensslsocket handshake overhaul summary: - sslsocket.starthandshake now generalized to handle both client and server handshaking as well as client/server role reversal - handshake_cutthrough.patch is properly integrated with support delayed handshake completion now integrated with delayed updates to session cache and callbacks to handshakecompletedlisteners - many fixes to sslsession, which is the end product of the handshake - generally more ri and sslengine compliant behavior. - more native code deletion through unification of client/server handshake, unification of client/server certificate chain verification, etc. more native code moved from various openssl classes to cleaner nativecrypto interfaces that more directly mirror the openssl interfaces. details: delay ssl_new call until handshake time when we know for sure whether the opensslsocket will be used in client or server mode and we can allocate the ssl_new from the apppriate client or server ssl_ctx used for session caching. now that no ssl is allocated for an opensslserversocketimpl, store enabledprotocols and enabledciphersuites in instance string arrays. use new nativecrypto.checkenabled* methdods for argument validation. opensslserversocketimpl passes these enabled arrays to a new opensslsocket constructor during accept(). removed finalizer from opensslserversocketimpl since it no longer has any native storage and socket is already closed by plainsocketimpl finalizer. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslserversocketimpl.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl.java opensslsocket major overhaul to properly implement handshaking including switching client and server roles and session id caching with handshake_cutthrough.patch. - now implements nativecrypto.handshakecompletedlisteners for properly timed callback when handshake_cutthrough.patch delays handshake completion until first sslsocket.getinputstream() read. - similar enabledprotocols/enabledciphersuites changes as opensslserversocketimpl since we need to store the state somewhere other than an openssl ssl struct until we are sure if we are doing a client or server handshake. - added handshake completed field so that starthandshake can tell if handshake was completed during ssl_do_handshake or will be completed later by a call to handshakecompletedcallback.handshakecompleted. - removed nativegetsession as the equivalent value is now returned by ssl_do_handshake - removed nativecipherauthenticationmethod as the value is now passed to verifycertificatechain - starthandshake is now a wrapper that forces a fully synchronous handshake - starthandshake(boolean) is the the most changed method in this changelist, combinding both the old starthandshake logic, but also the opensslsocketimpl.accept code as well. notable differences from the old code: * now responsible for ssl_new * single code path for client/server handshaking dealing with sslsession caching * now handles server certificate requests previously in opensslserversocketimpl, since a client can request to act like a server and therefore need to be able to make suck demands on its peer. * supports turning off handshake_cutthrough at a callers request via explicit call to starthandshake() * certificate verification happens during an upcall from openssl during ssl_do_handshake to verifycertificatechain for both client and server cases. previously there was not quite right upcall support on the server side and post-handshake checking on the client, which did not allow for a proper alert to be sent to the peer informing them of the issue, which the ri and sslengine code do. * similarly, setenablesessioncreation(false) did not send an alert to the peer as the ri and sslengine code in the client case. in the server case, nothing was previously done. * the use of local certificates was not determined from introspecting the ssl struct post-handshake. this is now partially implemented and will be completed in a later change. - sslsocket.{shutdowninput,shutdownoutput} are now restored to the proper behavior of throwing unsupportedoperationexception. - gutted opensslsocketimpl finalizer. the comment explains in detail the trouble of having the finalizer do anything more than touch its the instances own state due to unpredictable order of finalization and the future possability of parallel finalization. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl.java sslsession fixes - made opensslsessionimpl.sessioncontext non-final so it could be nulled by sslsession.invalidate to match ri behavior. - as noted in abstractsessioncontext discussion, removed opensslsessionimpl constructor that took sslparameters, instead we take the possibly null localcertificates directly. opensslsessionimpl.getlocalcertificates now simply returns the localcertificates member variable instead of incorrectly trying to query the keymanager for certificates that may not have been used. - opensslsessionimpl now caches its native id to avoid numerious native calls but also now provides as resetid which will update the cache when a delayed handshake happens due to the handshake_cutthrough.patch - fixed bug in getpeerprincipal that it wasn't calling getpeercertificates to initialize peercertificates field. - freeimpl is now 'public static' in preparation for move to nativecrypto. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsessionimpl.java the old sslsessionimpl class that is still used for representing the invalid session now returns isvalid    false and getprotocol    "none" to match the ri. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/sslsessionimpl.java nativecrypto improvements - adding nativecrypto.ssl_{get,set,clear}_mode similar to nativecrypto.ssl_{get,set,clear}_options along with ssl_mode_handshake_cutthrough constant which is used to explicitly disable/enable the android handshake_cutthrough.patch behavior. - added missing nativecrypto.ssl_clear_options and used to properly implement nativecrypto.setenabledprotocols. - added nativecrypto.checkenabledprotocols and nativecrypto.checkenabledciphersuites helpers to implement exception compatability with the ri. while some of this code is refactored from existing nativecrypto code, it is now also used by opensslserversocketimpl and opensslsocketimpl which maintain their own string[]s of what is enabled until starthandshake time. (see below) - changed nativecrypto.findsuite to use foreach style loop for clarity. - moved opensslserversocketimpl nativesetclientauth and ssl_verify_* constants to nativecrypto.ssl_set_verify - added nativecrypto.ssl_set_session based on part of old opensslsocketimpl.nativeconnect - added nativecrypto.ssl_set_session_creation_enabled to properly implement sslsocket.setenablesessioncreation(false) which uses new external/openssl/patches/jsse.patch functionality. - new nativecrypto.ssl_do_handshake consolidates opensslsocketimpl.{nativeconnect, nativeaccept} while properly implementing sslsocket.setuseclientmode(false) for clients and sslsocket.setuseclientmode(true) for servers. - new nativecrypto.ssl_get_certificate is determine if local certificate requested by peer. while functional, currently nativecrypto.ssl_new always sets a value via ssl_use_certificate instead of relying on a callback set via ssl_ctx_set_client_cert_cb. - changed nativecrypto.certificatechainverifier.verifycertificatechain to throw a checked certificateexception to match trustmanager.{checkservertrusted, checkclienttrusted}. it also takes an authmethod so avoid the need to call the old opensslsocketimpl.nativecipherauthenticationmethod. - added nativecrypto.handshakecompletedcallback which has its handshakecompleted method called from openssl when the now delayed handshake_cutthrough.patch handshake is completed so sslsession caching can be delayed until a session id is available and to provide a better time for handshakecompletedlisteners to be notified. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/nativecrypto.java x-net/src/main/native/org_apache_harmony_xnet_provider_jsse_nativecrypto.cpp some other changes specific to the naitve side of the code - added jnitrace calls (enabled at compile time with jni_trace) for future debugging. - throw sslexception subclass of ioexception instead ioexception itself for better ri compatability x-net/src/main/native/org_apache_harmony_xnet_provider_jsse_nativecrypto.cpp - changed from old struct app_data to new class appdata at enh's request remove dubious usage of sslparameters within abstractsessioncontext to pass through to opensslsessionimpl constructor for use in calling getlocalcertificates for sessions created from a byte array with abstractsessioncontext.tosession. our abstractsessioncontext.tobytes doesn't currently include the local certificates in its output, so it cannot be expected to have in tosession. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/abstractsessioncontext.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/clientsessioncontext.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/serversessioncontext.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/sslparameters.java test maintenance openssl 1.0.0 adds support for rfc 4507 session tickets which remove the need for server side session state. these tests needed to be updated for this new behavior. if is_ri is true, they still follow the old behavior. luni/src/test/java/javax/net/ssl/sslsessioncontexttest.java luni/src/test/java/javax/net/ssl/sslsessiontest.java luni/src/test/java/javax/net/ssl/sslsockettest.java update knownfailures and add specific comments at point of failure about what remains to be fixed. luni/src/test/java/javax/net/ssl/sslsessiontest.java added tests to cover the use of standard cipher suite names. historically android has used openssl string constants for cipher suite names, but jsse actually specifies supported and expected names. luni/src/test/java/javax/net/ssl/sslsocketfactorytest.java luni/src/test/java/javax/net/ssl/sslsockettest.java create new support/src/test/java/javax/net/ssl with old helper support code pulled from javax.net.ssl tests: sslcontexttest.helper -  testsslcontext sslsockettest.helper -  testsslsocketpair sslsessiontest.helper -  testsslsessions also added new standardnames here, which contains a collection of expected constants for test validation. luni/src/test/java/javax/net/ssl/sslcontexttest.java luni/src/test/java/javax/net/ssl/sslsockettest.java luni/src/test/java/javax/net/ssl/sslsessiontest.java support/src/test/java/javax/net/ssl/testsslcontext.java support/src/test/java/javax/net/ssl/testsslsocketpair.java support/src/test/java/javax/net/ssl/testsslsessions.java support/src/test/java/javax/net/ssl/standardnames.java removed some now fixed knownfailures and unneeded !is_ri code. marked some [un]knownfailures where exceptions are thrown and visible in the output but aren't correctly causing the test to fail. fixed assertnonnull to asserttrue in test_sslsockettest_test_create. added stress_test_sslsockettest_test_create to track down test flakiness, leading to rewrite of sslsocket finalization. luni/src/test/java/javax/net/ssl/sslsockettest.java reenable javax.net.ssl.alltests now that it is does not hang luni/src/test/java/tests/alltests.java improve error messages while debugging overflow problem. added new assert when debugging new rfc 4507 behavior. removed knownfailure annotation for now working test case. x-net/src/test/java/tests/api/javax/net/ssl/sslsessiontest.java client code changes now that starthandshake implies synchronous vs android's default async handshake, remove unneeded explict calls to sslsocket.starthandshake luni/src/main/java/org/apache/harmony/luni/internal/net/www/protocol/http/httpconnection.java removed ibm 1.4.x codepath that involved starthandshake x-net/src/main/java/javax/net/ssl/defaulthostnameverifier.java unrelated remove unneed sslsocket.setuseclientmode while removing unneeded sslsocket.starthandshake luni/src/main/java/org/apache/harmony/luni/internal/net/www/protocol/http/httpconnection.java removed warnings due to now missing modules in classpath run-core-tests change-id: i6e149ae259b3feccdfb0673209c85cfeb60befc8 	6210 commit bcfb325d5b1f9529b439cc0805a1c140521510f7 opensslsocket handshake overhaul summary: - sslsocket.<br>starthandshake now generalized to handle both client and server handshaking as well as client/server role reversal - handshake_cutthrough.<br>patch is properly integrated with support delayed handshake completion now integrated with delayed updates to session cache and callbacks to handshakecompletedlisteners - many fixes to sslsession, which is the end product of the handshake - generally more ri and sslengine compliant behavior.<br> - more native code deletion through unification of client/server handshake, unification of client/server certificate chain verification, etc.<br> more native code moved from various openssl classes to cleaner nativecrypto interfaces that more directly mirror the openssl interfaces.<br> details: delay ssl_new call until handshake time when we know for sure whether the opensslsocket will be used in client or server mode and we can allocate the ssl_new from the appriate client or server ssl_ctx used for session caching.<br> now that no ssl is allocated for an opensslserversocketimpl, store enabledprotocols and enabledciphersuites in instance string arrays.<br> use new nativecrypto.<br>checkenabled* methdods for argument validation.<br> opensslserversocketimpl passes these enabled arrays to a new opensslsocket constructor during accept(<br> removed finalizer from opensslserversocketimpl since it no longer has any native storage and socket is already closed by plainsocketimpl finalizer.<br> x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslserversocketimpl.<br>java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl.<br>java opensslsocket major overhaul to properly implement handshaking including switching client and server roles and session id caching with handshake_cutthrough.<br>patch.<br> - now implements nativecrypto.<br>handshakecompletedlisteners for properly timed callback when handshake_cutthrough.<br>patch delays handshake completion until first sslsocket.<br>getinputstream( read.<br> - similar enabledprotocols/enabledciphersuites changes as opensslserversocketimpl since we need to store the state somewhere other than an openssl ssl struct until we are sure if we are doing a client or server handshake.<br> - added handshake completed field so that starthandshake can tell if handshake was completed during ssl_do_handshake or will be completed later by a call to handshakecompletedcallback.<br>handshakecompleted.<br> - removed nativegetsession as the equivalent value is now returned by ssl_do_handshake - removed nativecipherauthenticationmethod as the value is now passed to verifycertificatechain - starthandshake is now a wrapper that forces a fully synchronous handshake - starthandshake(boolean) is the the most changed method in this changelist, combinding both the old starthandshake logic, but also the opensslsocketimpl.<br>accept code as well.<br> notable differences from the old code: * now responsible for ssl_new * single code path for client/server handshaking dealing with sslsession caching * now handles server certificate requests previously in opensslserversocketimpl, since a client can request to act like a server and therefore need to be able to make suck demands on its peer.<br> * supports turning off handshake_cutthrough at a callers request via explicit call to starthandshake( * certificate verification happens during an upcall from openssl during ssl_do_handshake to verifycertificatechain for both client and server cases.<br> previously there was not quite right upcall support on the server side and post-handshake checking on the client, which did not allow for a proper alert to be sent to the peer informing them of the issue, which the ri and sslengine code do.<br> * similarly, setenablesessioncreation(false) did not send an alert to the peer as the ri and sslengine code in the client case.<br> in the server case, nothing was previously done.<br> * the use of local certificates was not determined from introspecting the ssl struct post-handshake.<br> this is now partially implemented and will be completed in a later change.<br> - sslsocket.{shutdowninput,shutdownoutput} are now restored to the proper behavior of throwing unsupportedoperationexception.<br> - gutted opensslsocketimpl finalizer.<br> the comment explains in detail the trouble of having the finalizer do anything more than touch its the instances own state due to unpredictable order of finalization and the future possability of parallel finalization.<br> x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl.<br>java sslsession fixes - made opensslsessionimpl.<br>sessioncontext non-final so it could be nulled by sslsession.<br>invalidate to match ri behavior.<br> - as noted in abstractsessioncontext discussion, removed opensslsessionimpl constructor that took sslparameters, instead we take the possibly null localcertificates directly.<br> opensslsessionimpl.<br>getlocalcertificates now simply returns the localcertificates member variable instead of incorrectly trying to query the keymanager for certificates that may not have been used.<br> - opensslsessionimpl now caches its native id to avoid numerious native calls but also now provides as resetid which will update the cache when a delayed handshake happens due to the handshake_cutthrough.<br>patch - fixed bug in getpeerprincipal that it wasn't calling getpeercertificates to initialize peercertificates field.<br> - freeimpl is now 'public static' in preparation for move to nativecrypto.<br> x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsessionimpl.<br>java the old sslsessionimpl class that is still used for representing the invalid session now returns isvalid    false and getprotocol    "none" to match the ri.<br> x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/sslsessionimpl.<br>java nativecrypto improvements - adding nativecrypto.<br>ssl_{get,set,clear}_mode similar to nativecrypto.<br>ssl_{get,set,clear}_options along with ssl_mode_handshake_cutthrough constant which is used to explicitly disable/enable the android handshake_cutthrough.<br>patch behavior.<br> - added missing nativecrypto.<br>ssl_clear_options and used to properly implement nativecrypto.<br>setenabledprotocols.<br> - added nativecrypto.<br>checkenabledprotocols and nativecrypto.<br>checkenabledciphersuites helpers to implement exception compatability with the ri.<br> while some of this code is refactored from existing nativecrypto code, it is now also used by opensslserversocketimpl and opensslsocketimpl which maintain their own string[]s of what is enabled until starthandshake time.<br> (see below) - changed nativecrypto.<br>findsuite to use foreach style loop for clarity.<br> - moved opensslserversocketimpl nativesetclientauth and ssl_verify_* constants to nativecrypto.<br>ssl_set_verify - added nativecrypto.<br>ssl_set_session based on part of old opensslsocketimpl.<br>nativeconnect - added nativecrypto.<br>ssl_set_session_creation_enabled to properly implement sslsocket.<br>setenablesessioncreation(false) which uses new external/openssl/patches/jsse.<br>patch functionality.<br> - new nativecrypto.<br>ssl_do_handshake consolidates opensslsocketimpl.{nativeconnect, nativeaccept} while properly implementing sslsocket.<br>setuseclientmode(false) for clients and sslsocket.<br>setuseclientmode(true) for servers.<br> - new nativecrypto.<br>ssl_get_certificate is determine if local certificate requested by peer.<br> while functional, currently nativecrypto.<br>ssl_new always sets a value via ssl_use_certificate instead of relying on a callback set via ssl_ctx_set_client_cert_cb.<br> - changed nativecrypto.<br>certificatechainverifier.<br>verifycertificatechain to throw a checked certificateexception to match trustmanager.{checkservertrusted, checkclienttrusted}.<br> it also takes an authmethod so avoid the need to call the old opensslsocketimpl.<br>nativecipherauthenticationmethod.<br> - added nativecrypto.<br>handshakecompletedcallback which has its handshakecompleted method called from openssl when the now delayed handshake_cutthrough.<br>patch handshake is completed so sslsession caching can be delayed until a session id is available and to provide a better time for handshakecompletedlisteners to be notified.<br> x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/nativecrypto.<br>java x-net/src/main/native/org_apache_harmony_xnet_provider_jsse_nativecrypto.<br>chat post some other changes specific to the naitve side of the code - added jnitrace calls (enabled at compile time with jni_trace) for future debugging.<br> - throw sslexception subclass of ioexception instead ioexception itself for better ri compatability x-net/src/main/native/org_apache_harmony_xnet_provider_jsse_nativecrypto.<br>chat post - changed from old struct app_data to new class appdata at enh's request remove dubious usage of sslparameters within abstractsessioncontext to pass through to opensslsessionimpl constructor for use in calling getlocalcertificates for sessions created from a byte array with abstractsessioncontext.<br>tosession.<br> our abstractsessioncontext.<br>tobytes doesn't currently include the local certificates in its output, so it cannot be expected to have in tosession.<br> x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/abstractsessioncontext.<br>java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/clientsessioncontext.<br>java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/serversessioncontext.<br>java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/sslparameters.<br>java test maintenance openssl 1.0.0 adds support for rfc 4507 session tickets which remove the need for server side session state.<br> these tests needed to be updated for this new behavior.<br> if is_ri is true, they still follow the old behavior.<br> luni/src/test/java/javax/net/ssl/sslsessioncontexttest.<br>java luni/src/test/java/javax/net/ssl/sslsessiontest.<br>java luni/src/test/java/javax/net/ssl/sslsockettest.<br>java update knownfailures and add specific comments at point of failure about what remains to be fixed.<br> luni/src/test/java/javax/net/ssl/sslsessiontest.<br>java added tests to cover the use of standard cipher suite names.<br> historically android has used openssl string constants for cipher suite names, but jsse actually specifies supported and expected names.<br> luni/src/test/java/javax/net/ssl/sslsocketfactorytest.<br>java luni/src/test/java/javax/net/ssl/sslsockettest.<br>java create new support/src/test/java/javax/net/ssl with old helper support code pulled from javax.<br>net.<br>ssl tests: sslcontexttest.<br>helper -  testsslcontext sslsockettest.<br>helper -  testsslsocketpair sslsessiontest.<br>helper -  testsslsessions also added new standardnames here, which contains a collection of expected constants for test validation.<br> luni/src/test/java/javax/net/ssl/sslcontexttest.<br>java luni/src/test/java/javax/net/ssl/sslsockettest.<br>java luni/src/test/java/javax/net/ssl/sslsessiontest.<br>java support/src/test/java/javax/net/ssl/testsslcontext.<br>java support/src/test/java/javax/net/ssl/testsslsocketpair.<br>java support/src/test/java/javax/net/ssl/testsslsessions.<br>java support/src/test/java/javax/net/ssl/standardnames.<br>java removed some now fixed knownfailures and unneeded !<br>is_ri code.<br> marked some [un]knownfailures where exceptions are thrown and visible in the output but aren't correctly causing the test to fail.<br> fixed assertnonnull to asserttrue in test_sslsockettest_test_create.<br> added stress_test_sslsockettest_test_create to track down test flakiness, leading to rewrite of sslsocket finalization.<br> luni/src/test/java/javax/net/ssl/sslsockettest.<br>java reenable javax.<br>net.<br>ssl.<br>alltests now that it is does not hang luni/src/test/java/tests/alltests.<br>java improve error messages while debugging overflow problem.<br> added new assert when debugging new rfc 4507 behavior.<br> removed knownfailure annotation for now working test case.<br> x-net/src/test/java/tests/api/javax/net/ssl/sslsessiontest.<br>java client code changes now that starthandshake implies synchronous vs android's default async handshake, remove unneeded explict calls to sslsocket.<br>starthandshake luni/src/main/java/org/apache/harmony/luni/internal/net/ww/protocol/http/httpconnection.<br>java removed ibm 1.4.<br>x codepath that involved starthandshake x-net/src/main/java/javax/net/ssl/defaulthostnameverifier.<br>java unrelated remove unneed sslsocket.<br>setuseclientmode while removing unneeded sslsocket.<br>starthandshake luni/src/main/java/org/apache/harmony/luni/internal/net/ww/protocol/http/httpconnection.<br>java removed warnings due to now missing modules in classpath run-core-tests change-id: i6e149ae259b3feccdfb0673209c85cfeb60befc8	2	-2	 6210[0] commit[0] bcfb325d5b1f9529b439cc0805a1c140521510f7[0] opensslsocket[0] handshake[0] overhaul[0] summary[0] sslsocket[0] [[Sentence=-1,1=word max, 1-5]] starthandshake[0] now[0] generalized[0] to[0] handle[0] both[0] client[0] and[0] server[0] handshaking[0] as[0] well[0] as[0] client/server[0] role[0] reversal[0] handshake_cutthrough[0] [[Sentence=-1,1=word max, 1-5]] patch[0] is[0] properly[0] integrated[0] with[0] support[0] delayed[0] handshake[0] completion[0] now[0] integrated[0] with[0] delayed[0] updates[0] to[0] session[0] cache[0] and[0] callbacks[0] to[0] handshakecompletedlisteners[0] many[0] fixes[0] to[0] sslsession[0] which[0] is[0] the[0] end[0] product[0] of[0] the[0] handshake[0] generally[0] more[0] ri[0] and[0] sslengine[0] compliant[0] behavior[0] [[Sentence=-1,1=word max, 1-5]] more[0] native[0] code[0] deletion[0] through[0] unification[0] of[0] client/server[0] handshake[0] unification[0] of[0] client/server[0] certificate[0] chain[0] verification[0] etc[0] [[Sentence=-1,1=word max, 1-5]] more[0] native[0] code[0] moved[0] from[0] various[0] openssl[0] classes[0] to[0] cleaner[0] nativecrypto[0] interfaces[0] that[0] more[0] directly[0] mirror[0] the[0] openssl[0] interfaces[0] [[Sentence=-1,1=word max, 1-5]] details[0] delay[-1] ssl_new[0] call[0] until[0] handshake[0] time[0] when[0] we[0] know[0] for[0] sure[0] whether[0] the[0] opensslsocket[0] will[0] be[0] used[0] in[0] client[0] or[0] server[0] mode[0] and[0] we[0] can[0] allocate[0] the[0] ssl_new[0] from[0] the[0] apppriate/appriate[0] client[0] or[0] server[0] ssl_ctx[0] used[0] for[0] session[0] caching[0] [[Sentence=-2,1=word max, 1-5]] now[0] that[0] no[0] ssl[0] is[0] allocated[0] for[0] an[0] opensslserversocketimpl[0] store[0] enabledprotocols[0] and[0] enabledciphersuites[0] in[0] instance[0] string[0] arrays[0] [[Sentence=-1,1=word max, 1-5]] use[0] new[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] checkenabled[0] methdods[0] for[0] argument[-1] validation[0] [[Sentence=-2,1=word max, 1-5]] opensslserversocketimpl[0] passes[0] these[0] enabled[0] arrays[0] to[0] a[0] new[0] opensslsocket[0] constructor[0] during[0] accept[0] [[Sentence=-1,1=word max, 1-5]] removed[0] finalizer[0] from[0] opensslserversocketimpl[0] since[0] it[0] no[0] longer[0] has[0] any[0] native[0] storage[0] and[0] socket[0] is[0] already[0] closed[0] by[0] plainsocketimpl[0] finalizer[0] [[Sentence=-1,1=word max, 1-5]] x[1] net/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslserversocketimpl[0] [[Sentence=-1,2=word max, 1-5]] java[0] x[1] net/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl[0] [[Sentence=-1,2=word max, 1-5]] java[0] opensslsocket[0] major[0] overhaul[0] to[0] properly[0] implement[0] handshaking[0] including[0] switching[0] client[0] and[0] server[0] roles[0] and[0] session[0] id[0] caching[0] with[0] handshake_cutthrough[0] [[Sentence=-1,1=word max, 1-5]] patch[0] [[Sentence=-1,1=word max, 1-5]] now[0] implements[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] handshakecompletedlisteners[0] for[0] properly[0] timed[0] callback[0] when[0] handshake_cutthrough[0] [[Sentence=-1,1=word max, 1-5]] patch[0] delays[0] handshake[0] completion[0] until[0] first[0] sslsocket[0] [[Sentence=-1,1=word max, 1-5]] getinputstream[0] read[0] [[Sentence=-1,1=word max, 1-5]] similar[0] enabledprotocols/enabledciphersuites[0] changes[0] as[0] opensslserversocketimpl[0] since[0] we[0] need[0] to[0] store[0] the[0] state[0] somewhere[0] other[0] than[0] an[0] openssl[0] ssl[0] struct[0] until[0] we[0] are[0] sure[0] if[0] we[0] are[0] doing[0] a[0] client[0] or[0] server[0] handshake[0] [[Sentence=-1,1=word max, 1-5]] added[0] handshake[0] completed[0] field[0] so[0] that[0] starthandshake[0] can[0] tell[0] if[0] handshake[0] was[0] completed[0] during[0] ssl_do_handshake[0] or[0] will[0] be[0] completed[0] later[0] by[0] a[0] call[0] to[0] handshakecompletedcallback[0] [[Sentence=-1,1=word max, 1-5]] handshakecompleted[0] [[Sentence=-1,1=word max, 1-5]] removed[0] nativegetsession[0] as[0] the[0] equivalent[0] value[0] is[0] now[0] returned[0] by[0] ssl_do_handshake[0] removed[0] nativecipherauthenticationmethod[0] as[0] the[0] value[0] is[0] now[0] passed[0] to[0] verifycertificatechain[0] starthandshake[0] is[0] now[0] a[0] wrapper[0] that[0] forces[0] a[0] fully[0] synchronous[0] handshake[0] starthandshake[0] boolean[0] is[0] the[0] the[0] most[0] changed[0] method[0] in[0] this[0] changelist[0] combinding[0] both[0] the[0] old[0] starthandshake[0] logic[0] but[0] also[0] the[0] opensslsocketimpl[0] [[Sentence=-1,1=word max, 1-5]] accept[0] code[0] as[0] well[0] [[Sentence=-1,1=word max, 1-5]] notable[0] differences[0] from[0] the[0] old[0] code[0] now[0] responsible[0] for[0] ssl_new[0] single[0] code[0] path[0] for[0] client/server[0] handshaking[0] dealing[0] with[0] sslsession[0] caching[0] now[0] handles[0] server[0] certificate[0] requests[0] previously[0] in[0] opensslserversocketimpl[0] since[0] a[0] client[0] can[0] request[0] to[0] act[0] like[0] a[0] server[0] and[0] therefore[0] need[0] to[0] be[0] able[0] to[0] make[0] suck[-1] demands[0] on[0] its[0] peer[0] [[Sentence=-2,1=word max, 1-5]] supports[1] turning[0] off[0] handshake_cutthrough[0] at[0] a[0] callers[0] request[0] via[0] explicit[0] call[0] to[0] starthandshake[0] certificate[0] verification[0] happens[0] during[0] an[0] upcall[0] from[0] openssl[0] during[0] ssl_do_handshake[0] to[0] verifycertificatechain[0] for[0] both[0] client[0] and[0] server[0] cases[0] [[Sentence=-1,2=word max, 1-5]] previously[0] there[0] was[0] not[0] quite[0] right[0] upcall[0] support[0] on[0] the[0] server[0] side[0] and[0] post[0] handshake[0] checking[0] on[0] the[0] client[0] which[0] did[0] not[0] allow[0] for[0] a[0] proper[0] alert[0] to[0] be[0] sent[0] to[0] the[0] peer[0] informing[0] them[0] of[0] the[0] issue[0] which[0] the[0] ri[0] and[0] sslengine[0] code[0] do[0] [[Sentence=-1,1=word max, 1-5]] similarly[0] setenablesessioncreation[0] false[0] did[0] not[0] send[0] an[0] alert[0] to[0] the[0] peer[0] as[0] the[0] ri[0] and[0] sslengine[0] code[0] in[0] the[0] client[0] case[0] [[Sentence=-1,1=word max, 1-5]] in[0] the[0] server[0] case[0] nothing[0] was[0] previously[0] done[0] [[Sentence=-1,1=word max, 1-5]] the[0] use[0] of[0] local[0] certificates[0] was[0] not[0] determined[0] from[0] introspecting[0] the[0] ssl[0] struct[0] post[0] handshake[0] [[Sentence=-1,1=word max, 1-5]] this[0] is[0] now[0] partially[0] implemented[0] and[0] will[0] be[0] completed[0] in[0] a[0] later[0] change[0] [[Sentence=-1,1=word max, 1-5]] sslsocket[0] .{shutdowninput[0] shutdownoutput}[0] are[0] now[0] restored[0] to[0] the[0] proper[0] behavior[0] of[0] throwing[0] unsupportedoperationexception[0] [[Sentence=-1,1=word max, 1-5]] gutted[0] opensslsocketimpl[0] finalizer[0] [[Sentence=-1,1=word max, 1-5]] the[0] comment[0] explains[0] in[0] detail[0] the[0] trouble[-1] of[0] having[0] the[0] finalizer[0] do[0] anything[0] more[0] than[0] touch[0] its[0] the[0] instances[0] own[0] state[0] due[0] to[0] unpredictable[0] order[0] of[0] finalization[0] and[0] the[0] future[0] possability[0] of[0] parallel[0] finalization[0] [[Sentence=-2,1=word max, 1-5]] x[1] net/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl[0] [[Sentence=-1,2=word max, 1-5]] java[0] sslsession[0] fixes[0] made[0] opensslsessionimpl[0] [[Sentence=-1,1=word max, 1-5]] sessioncontext[0] non[0] final[0] so[0] it[0] could[0] be[0] nulled[0] by[0] sslsession[0] [[Sentence=-1,1=word max, 1-5]] invalidate[-1] to[0] match[0] ri[0] behavior[0] [[Sentence=-2,1=word max, 1-5]] as[0] noted[0] in[0] abstractsessioncontext[0] discussion[0] removed[0] opensslsessionimpl[0] constructor[0] that[0] took[0] sslparameters[0] instead[0] we[0] take[0] the[0] possibly[0] null[0] localcertificates[0] directly[0] [[Sentence=-1,1=word max, 1-5]] opensslsessionimpl[0] [[Sentence=-1,1=word max, 1-5]] getlocalcertificates[0] now[0] simply[0] returns[0] the[0] localcertificates[0] member[0] variable[0] instead[0] of[0] incorrectly[0] trying[0] to[0] query[0] the[0] keymanager[0] for[0] certificates[0] that[0] may[0] not[0] have[0] been[0] used[0] [[Sentence=-1,1=word max, 1-5]] opensslsessionimpl[0] now[0] caches[0] its[0] native[0] id[0] to[0] avoid[-1] numerious[0] native[0] calls[0] but[0] also[0] now[0] provides[0] as[0] resetid[0] which[0] will[0] update[0] the[0] cache[0] when[0] a[0] delayed[0] handshake[0] happens[0] due[0] to[0] the[0] handshake_cutthrough[0] [[Sentence=-2,1=word max, 1-5]] patch[0] fixed[0] bug[0] in[0] getpeerprincipal[0] that[0] it[0] wasn't[0] calling[0] getpeercertificates[0] to[0] initialize[0] peercertificates[0] field[0] [[Sentence=-1,1=word max, 1-5]] freeimpl[0] is[0] now[0] 'public[0] static'[0] in[0] preparation[0] for[0] move[0] to[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] x[1] net/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsessionimpl[0] [[Sentence=-1,2=word max, 1-5]] java[0] the[0] old[0] sslsessionimpl[0] class[0] that[0] is[0] still[0] used[0] for[0] representing[0] the[0] invalid[-1] session[0] now[0] returns[0] isvalid[0] false[0] and[0] getprotocol[0] none[0] to[0] match[0] the[0] ri[0] [[Sentence=-2,1=word max, 1-5]] x[1] net/src/main/java/org/apache/harmony/xnet/provider/jsse/sslsessionimpl[0] [[Sentence=-1,2=word max, 1-5]] java[0] nativecrypto[0] improvements[1] adding[0] nativecrypto[0] [[Sentence=-1,2=word max, 1-5]] ssl_{get[0] set[0] clear}_mode[0] similar[0] to[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] ssl_{get[0] set[0] clear}_options[0] along[0] with[0] ssl_mode_handshake_cutthrough[0] constant[0] which[0] is[0] used[0] to[0] explicitly[0] disable/enable[0] the[0] android[0] handshake_cutthrough[0] [[Sentence=-1,1=word max, 1-5]] patch[0] behavior[0] [[Sentence=-1,1=word max, 1-5]] added[0] missing[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] ssl_clear_options[0] and[0] used[0] to[0] properly[0] implement[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] setenabledprotocols[0] [[Sentence=-1,1=word max, 1-5]] added[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] checkenabledprotocols[0] and[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] checkenabledciphersuites[0] helpers[0] to[0] implement[0] exception[0] compatability[0] with[0] the[0] ri[0] [[Sentence=-1,1=word max, 1-5]] while[0] some[0] of[0] this[0] code[0] is[0] refactored[0] from[0] existing[0] nativecrypto[0] code[0] it[0] is[0] now[0] also[0] used[0] by[0] opensslserversocketimpl[0] and[0] opensslsocketimpl[0] which[0] maintain[0] their[0] own[0] string[]s[0] of[0] what[0] is[0] enabled[0] until[0] starthandshake[0] time[0] [[Sentence=-1,1=word max, 1-5]] see[0] below[0] changed[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] findsuite[0] to[0] use[0] foreach[0] style[0] loop[0] for[0] clarity[0] [[Sentence=-1,1=word max, 1-5]] moved[0] opensslserversocketimpl[0] nativesetclientauth[0] and[0] ssl_verify_[0] constants[0] to[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] ssl_set_verify[0] added[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] ssl_set_session[0] based[0] on[0] part[0] of[0] old[0] opensslsocketimpl[0] [[Sentence=-1,1=word max, 1-5]] nativeconnect[0] added[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] ssl_set_session_creation_enabled[0] to[0] properly[0] implement[0] sslsocket[0] [[Sentence=-1,1=word max, 1-5]] setenablesessioncreation[0] false[0] which[0] uses[0] new[0] external/openssl/patches/jsse[0] [[Sentence=-1,1=word max, 1-5]] patch[0] functionality[0] [[Sentence=-1,1=word max, 1-5]] new[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] ssl_do_handshake[0] consolidates[0] opensslsocketimpl[0] .{nativeconnect[0] nativeaccept}[0] while[0] properly[0] implementing[0] sslsocket[0] [[Sentence=-1,1=word max, 1-5]] setuseclientmode[0] false[0] for[0] clients[0] and[0] sslsocket[0] [[Sentence=-1,1=word max, 1-5]] setuseclientmode[0] true[1] for[0] servers[0] [[Sentence=-1,2=word max, 1-5]] new[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] ssl_get_certificate[0] is[0] determine[0] if[0] local[0] certificate[0] requested[0] by[0] peer[0] [[Sentence=-1,1=word max, 1-5]] while[0] functional[0] currently[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] ssl_new[0] always[0] sets[0] a[0] value[0] via[0] ssl_use_certificate[0] instead[0] of[0] relying[0] on[0] a[0] callback[0] set[0] via[0] ssl_ctx_set_client_cert_cb[0] [[Sentence=-1,1=word max, 1-5]] changed[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] certificatechainverifier[0] [[Sentence=-1,1=word max, 1-5]] verifycertificatechain[0] to[0] throw[0] a[0] checked[0] certificateexception[0] to[0] match[0] trustmanager[1] .{checkservertrusted[0] checkclienttrusted}[0] [[Sentence=-1,2=word max, 1-5]] it[0] also[0] takes[0] an[0] authmethod[0] so[0] avoid[-1] the[0] need[0] to[0] call[0] the[0] old[0] opensslsocketimpl[0] [[Sentence=-2,1=word max, 1-5]] nativecipherauthenticationmethod[0] [[Sentence=-1,1=word max, 1-5]] added[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] handshakecompletedcallback[0] which[0] has[0] its[0] handshakecompleted[0] method[0] called[0] from[0] openssl[0] when[0] the[0] now[0] delayed[0] handshake_cutthrough[0] [[Sentence=-1,1=word max, 1-5]] patch[0] handshake[0] is[0] completed[0] so[0] sslsession[0] caching[0] can[0] be[0] delayed[0] until[0] a[0] session[0] id[0] is[0] available[0] and[0] to[0] provide[0] a[0] better[0] time[0] for[0] handshakecompletedlisteners[0] to[0] be[0] notified[0] [[Sentence=-1,1=word max, 1-5]] x[1] net/src/main/java/org/apache/harmony/xnet/provider/jsse/nativecrypto[0] [[Sentence=-1,2=word max, 1-5]] java[0] x[1] net/src/main/native/org_apache_harmony_xnet_provider_jsse_nativecrypto[0] [[Sentence=-1,2=word max, 1-5]] cpp/cp[0] some[0] other[0] changes[0] specific[0] to[0] the[0] naitve[0] side[0] of[0] the[0] code[0] added[0] jnitrace[0] calls[0] enabled[0] at[0] compile[0] time[0] with[0] jni_trace[0] for[0] future[0] debugging[0] [[Sentence=-1,1=word max, 1-5]] throw[0] sslexception[0] subclass[0] of[0] ioexception[0] instead[0] ioexception[0] itself[0] for[0] better[0] ri[0] compatability[0] x[1] net/src/main/native/org_apache_harmony_xnet_provider_jsse_nativecrypto[0] [[Sentence=-1,2=word max, 1-5]] cpp/cp[0] changed[0] from[0] old[0] struct[0] app_data[0] to[0] new[0] class[0] appdata[0] at[0] enh's[0] request[0] remove[0] dubious[-1] usage[0] of[0] sslparameters[0] within[0] abstractsessioncontext[0] to[0] pass[0] through[0] to[0] opensslsessionimpl[0] constructor[0] for[0] use[0] in[0] calling[0] getlocalcertificates[0] for[0] sessions[0] created[0] from[0] a[0] byte[0] array[0] with[0] abstractsessioncontext[0] [[Sentence=-2,1=word max, 1-5]] tosession[0] [[Sentence=-1,1=word max, 1-5]] our[0] abstractsessioncontext[0] [[Sentence=-1,1=word max, 1-5]] tobytes[0] doesn't[0] currently[0] include[0] the[0] local[0] certificates[0] in[0] its[0] output[0] so[0] it[0] cannot[0] be[0] expected[0] to[0] have[0] in[0] tosession[0] [[Sentence=-1,1=word max, 1-5]] x[1] net/src/main/java/org/apache/harmony/xnet/provider/jsse/abstractsessioncontext[0] [[Sentence=-1,2=word max, 1-5]] java[0] x[1] net/src/main/java/org/apache/harmony/xnet/provider/jsse/clientsessioncontext[0] [[Sentence=-1,2=word max, 1-5]] java[0] x[1] net/src/main/java/org/apache/harmony/xnet/provider/jsse/serversessioncontext[0] [[Sentence=-1,2=word max, 1-5]] java[0] x[1] net/src/main/java/org/apache/harmony/xnet/provider/jsse/sslparameters[0] [[Sentence=-1,2=word max, 1-5]] java[0] test[0] maintenance[0] openssl[0] 1[0] .0[0] .0[0] adds[0] support[0] for[0] rfc[0] 4507[0] session[0] tickets[0] which[0] remove[0] the[0] need[0] for[0] server[0] side[0] session[0] state[0] [[Sentence=-1,1=word max, 1-5]] these[0] tests[0] needed[0] to[0] be[0] updated[0] for[0] this[0] new[0] behavior[0] [[Sentence=-1,1=word max, 1-5]] if[0] is_ri[0] is[0] true[1] they[0] still[0] follow[0] the[0] old[0] behavior[0] [[Sentence=-1,2=word max, 1-5]] luni/src/test/java/javax/net/ssl/sslsessioncontexttest[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/javax/net/ssl/sslsessiontest[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/javax/net/ssl/sslsockettest[0] [[Sentence=-1,1=word max, 1-5]] java[0] update[0] knownfailures[0] and[0] add[0] specific[0] comments[0] at[0] point[0] of[0] failure[0] about[0] what[0] remains[0] to[0] be[0] fixed[0] [[Sentence=-1,1=word max, 1-5]] luni/src/test/java/javax/net/ssl/sslsessiontest[0] [[Sentence=-1,1=word max, 1-5]] java[0] added[0] tests[0] to[0] cover[0] the[0] use[0] of[0] standard[0] cipher[0] suite[0] names[0] [[Sentence=-1,1=word max, 1-5]] historically[0] android[0] has[0] used[0] openssl[0] string[0] constants[0] for[0] cipher[0] suite[0] names[0] but[0] jsse[0] actually[0] specifies[0] supported[1] and[0] expected[0] names[0] [[Sentence=-1,2=word max, 1-5]] luni/src/test/java/javax/net/ssl/sslsocketfactorytest[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/javax/net/ssl/sslsockettest[0] [[Sentence=-1,1=word max, 1-5]] java[0] create[0] new[0] support/src/test/java/javax/net/ssl[0] with[0] old[0] helper[0] support[0] code[0] pulled[0] from[0] javax[0] [[Sentence=-1,1=word max, 1-5]] net[0] [[Sentence=-1,1=word max, 1-5]] ssl[0] tests[0] sslcontexttest[0] [[Sentence=-1,1=word max, 1-5]] helper[0] testsslcontext[0] sslsockettest[0] [[Sentence=-1,1=word max, 1-5]] helper[0] testsslsocketpair[0] sslsessiontest[0] [[Sentence=-1,1=word max, 1-5]] helper[0] testsslsessions[0] also[0] added[0] new[0] standardnames[0] here[0] which[0] contains[0] a[0] collection[0] of[0] expected[0] constants[0] for[0] test[0] validation[0] [[Sentence=-1,1=word max, 1-5]] luni/src/test/java/javax/net/ssl/sslcontexttest[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/javax/net/ssl/sslsockettest[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/javax/net/ssl/sslsessiontest[0] [[Sentence=-1,1=word max, 1-5]] java[0] support/src/test/java/javax/net/ssl/testsslcontext[0] [[Sentence=-1,1=word max, 1-5]] java[0] support/src/test/java/javax/net/ssl/testsslsocketpair[0] [[Sentence=-1,1=word max, 1-5]] java[0] support/src/test/java/javax/net/ssl/testsslsessions[0] [[Sentence=-1,1=word max, 1-5]] java[0] support/src/test/java/javax/net/ssl/standardnames[0] [[Sentence=-1,1=word max, 1-5]] java[0] removed[0] some[0] now[0] fixed[0] knownfailures[0] and[0] unneeded[0] [[Sentence=-1,1=word max, 1-5]] is_ri[0] code[0] [[Sentence=-1,1=word max, 1-5]] marked[0] some[0] [un]knownfailures[0] where[0] exceptions[0] are[0] thrown[0] and[0] visible[0] in[0] the[0] output[0] but[0] aren't[0] correctly[0] causing[0] the[0] test[0] to[0] fail[0] [[Sentence=-1,1=word max, 1-5]] fixed[0] assertnonnull[0] to[0] asserttrue[0] in[0] test_sslsockettest_test_create[0] [[Sentence=-1,1=word max, 1-5]] added[0] stress_test_sslsockettest_test_create[-1] to[0] track[0] down[0] test[0] flakiness[0] leading[0] to[0] rewrite[0] of[0] sslsocket[0] finalization[0] [[Sentence=-2,1=word max, 1-5]] luni/src/test/java/javax/net/ssl/sslsockettest[0] [[Sentence=-1,1=word max, 1-5]] java[0] reenable[0] javax[0] [[Sentence=-1,1=word max, 1-5]] net[0] [[Sentence=-1,1=word max, 1-5]] ssl[0] [[Sentence=-1,1=word max, 1-5]] alltests[0] now[0] that[0] it[0] is[0] does[0] not[0] hang[-1][NegatedDueToPreviousWord] luni/src/test/java/tests/alltests[0] [[Sentence=-1,2=word max, 1-5]] java[0] improve[1] error[0] messages[0] while[0] debugging[0] overflow[0] problem[-1] [[Sentence=-2,2=word max, 1-5]] added[0] new[0] assert[0] when[0] debugging[0] new[0] rfc[0] 4507[0] behavior[0] [[Sentence=-1,1=word max, 1-5]] removed[0] knownfailure[0] annotation[0] for[0] now[0] working[0] test[0] case[0] [[Sentence=-1,1=word max, 1-5]] x[1] net/src/test/java/tests/api/javax/net/ssl/sslsessiontest[0] [[Sentence=-1,2=word max, 1-5]] java[0] client[0] code[0] changes[0] now[0] that[0] starthandshake[0] implies[0] synchronous[0] vs[0] android's[0] default[-1] async[0] handshake[0] remove[0] unneeded[0] explict[0] calls[0] to[0] sslsocket[0] [[Sentence=-2,1=word max, 1-5]] starthandshake[0] luni/src/main/java/org/apache/harmony/luni/internal/net/www/protocol/http/httpconnection/luni/src/main/java/org/apache/harmony/luni/internal/net/ww/protocol/http/httpconnection[0] [[Sentence=-1,1=word max, 1-5]] java[0] removed[0] ibm[0] 1[0] .4[0] [[Sentence=-1,1=word max, 1-5]] x[1] codepath[0] that[0] involved[0] starthandshake[0] x[1] net/src/main/java/javax/net/ssl/defaulthostnameverifier[0] [[Sentence=-1,2=word max, 1-5]] java[0] unrelated[0] remove[0] unneed[0] sslsocket[0] [[Sentence=-1,1=word max, 1-5]] setuseclientmode[0] while[0] removing[0] unneeded[0] sslsocket[0] [[Sentence=-1,1=word max, 1-5]] starthandshake[0] luni/src/main/java/org/apache/harmony/luni/internal/net/www/protocol/http/httpconnection/luni/src/main/java/org/apache/harmony/luni/internal/net/ww/protocol/http/httpconnection[0] [[Sentence=-1,1=word max, 1-5]] java[0] removed[0] warnings[0] due[0] to[0] now[0] missing[0] modules[0] in[0] classpath[0] run[0] core[0] tests[0] change[0] id[0] i6e149ae259b3feccdfb0673209c85cfeb60befc8[0] [[Sentence=-1,1=word max, 1-5]][[[2,-2 max of sentences]]]
6799 commit c7fd8fd75e74f59e583df1e4fea0d221891e2000 fix server side sslengine serverkeyexchange signature. code using sslengine for non-blocking ssl can't talk with openssl as a client, since the signature is computed on different content (and openssl checks it, unlike java). the fix is to use strip the 0x00 prefix when signing - like it is done when generating the message, refactored both to use a common method. we also include the length in the signature, it was also missing. 	6799 commit c7fd8fd75e74f59e583df1e4fea0d221891e200 fix server side sslengine serverkeyexchange signature.<br> code using sslengine for non-blocking ssl can't talk with openssl as a client, since the signature is computed on different content (and openssl checks it, unlike java)<br> the fix is to use strip the 0x00 prefix when signing - like it is done when generating the message, refactored both to use a common method.<br> we also include the length in the signature, it was also missing.	1	-1	 6799[0] commit[0] c7fd8fd75e74f59e583df1e4fea0d221891e2000/c7fd8fd75e74f59e583df1e4fea0d221891e200[0] fix[0] server[0] side[0] sslengine[0] serverkeyexchange[0] signature[0] [[Sentence=-1,1=word max, 1-5]] code[0] using[0] sslengine[0] for[0] non[0] blocking[0] ssl[0] can't[0] talk[0] with[0] openssl[0] as[0] a[0] client[0] since[0] the[0] signature[0] is[0] computed[0] on[0] different[0] content[0] and[0] openssl[0] checks[0] it[0] unlike[0] java[0] [[Sentence=-1,1=word max, 1-5]] the[0] fix[0] is[0] to[0] use[0] strip[0] the[0] 0x00[0] prefix[0] when[0] signing[0] like[0] it[0] is[0] done[0] when[0] generating[0] the[0] message[0] refactored[0] both[0] to[0] use[0] a[0] common[0] method[0] [[Sentence=-1,1=word max, 1-5]] we[0] also[0] include[0] the[0] length[0] in[0] the[0] signature[0] it[0] was[0] also[0] missing[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
7040 commit a1df197865bf7c86448ad5434ac56e6a9020e2d1 dalvikrunner can run a test as an android.app.activity & pathclassloader.tostring change summary: - pathclassloader.tostring prints path - dalvikrunner --mode activity now working - new dalvikrunner --no-clean vs --no-clean-after behavior details dalvik runtime change changed pathclassloader.tostring to print the class loaders path also fixed variable name in commented out debug code libcore/dalvik/src/main/java/dalvik/system/pathclassloader.java dalvik runner changes mode is the new abstract superclass of the existing vm class. activitymode is for the new mode of running as a activity on the device. vm is now a subclass of mode and its javavm and devicedalvikvm still exist although some code has been refactored into the new environment clases (see below) libcore/tools/runner/java/dalvik/runner/mode.java libcore/tools/runner/java/dalvik/runner/activitymode.java libcore/tools/runner/java/dalvik/runner/devicedalvikvm.java libcore/tools/runner/java/dalvik/runner/javavm.java libcore/tools/runner/java/dalvik/runner/vm.java environment and its subclasses environmenthost and environmentdevice allow us to reuse some common code between the two different device modes (activitymode and devicedalvikvm). basically code that was more about where and how to do things based on where the code was running as opposed to how the code was running moved to the environment classes. for example, prepare() logic for /sdcard/ and adb code in general. libcore/tools/runner/java/dalvik/runner/devicedalvikvm.java libcore/tools/runner/java/dalvik/runner/environment.java libcore/tools/runner/java/dalvik/runner/environmentdevice.java libcore/tools/runner/java/dalvik/runner/environmenthost.java libcore/tools/runner/java/dalvik/runner/javavm.java libcore/tools/runner/java/dalvik/runner/vm.java adding new files libcore/tools/runner/android.mk aapt is a wrapper for "aapt" similar to adb and dx libcore/tools/runner/java/dalvik/runner/aapt.java added adb.install and adb.uninstall methods changed from using file.tostring to file.getpath for clarity libcore/tools/runner/java/dalvik/runner/adb.java codefinder has been extended so that driver can ask finders what they need to build and run, specifically through the new getrunnerjava and getrunnerclasspath. (as part of this namingpatterncodefinder's runnerclass was changed to getrunnerclass for consistency with the superclass.) this was important for running as an activity because we want to minimize what we pack into the apk file because of the "dx --dex" runtime and not just pull in all possible runners and supporting libraries. testrun objects also hold onto this information from their finders. libcore/tools/runner/java/dalvik/runner/driver.java libcore/tools/runner/java/dalvik/runner/codefinder.java libcore/tools/runner/java/dalvik/runner/caliperfinder.java libcore/tools/runner/java/dalvik/runner/junitfinder.java libcore/tools/runner/java/dalvik/runner/jtregfinder.java libcore/tools/runner/java/dalvik/runner/mainfinder.java libcore/tools/runner/java/dalvik/runner/namingpatterncodefinder.java libcore/tools/runner/java/dalvik/runner/testrun.java testrunner testrunner's classname is now testclass to clarifiy it from the runnerclass. libcore/tools/runner/java/dalvik/runner/testrunner.java libcore/tools/runner/java/dalvik/runner/caliperrunner.java libcore/tools/runner/java/dalvik/runner/junitrunner.java libcore/tools/runner/java/dalvik/runner/jtregrunner.java libcore/tools/runner/java/dalvik/runner/mainrunner.java classpath now has a collection.of and collection.addall that take a collection file  instead if just a file... libcore/tools/runner/java/dalvik/runner/classpath.java added command.args(file arg) to avoid a lot of args(file.getpath()) libcore/tools/runner/java/dalvik/runner/command.java option --clean has expanded to --clean-before, --clean-after, and --clean. now --no-clean will remove nothing as elliot requested. --no-clean-after is now what is useful for dalvikrunner debuggin. default is still to clean before and after. libcore/tools/runner/java/dalvik/runner/dalvikrunner.java moved vm.dalvik_runner_home to dalvikrunner.home. /tmp/ uuid  paths are now /tmp/dalvikrunner/ uuid  paths are easier cleanup. libcore/tools/runner/java/dalvik/runner/dalvikrunner.java driver was changed to use a executorcompletionservice around the executorservice so that exceptions from the execute threads could be reported on the main thread. libcore/tools/runner/java/dalvik/runner/driver.java we now build the testrunner before the test so that its classes will be around to be packed into apk files. libcore/tools/runner/java/dalvik/runner/driver.java dx.dex now takes file arguments instread of strings. dx.dex also needs to pass additional memory arguments to not run out of memory building the big dex for the apk. the values i used where from the build/core/definitions.mk libcore/tools/runner/java/dalvik/runner/dx.java postcompile was split into postcompiletestrunner and postcompiletest because the packaging requires are very different in each case for activitymode. specifically, the test runner is not post-packaged seperately, but packaged in the apk with each test. libcore/tools/runner/java/dalvik/runner/activitymode.java libcore/tools/runner/java/dalvik/runner/devicedalvikvm.java libcore/tools/runner/java/dalvik/runner/javavm.java libcore/tools/runner/java/dalvik/runner/vm.java changed testclass to test to avoid collision with new superclass field libcore/tools/runner/java/dalvik/runner/jtregrunner.java libcore/tools/runner/java/dalvik/runner/mainrunner.java added @suppresswarnings("unchecked") libcore/tools/runner/java/dalvik/runner/optionparser.java new android.app.activity based on elliot's testapk. it encapsulates an activityrunner that invokes the appropriate testrunner based on test.properties. libcore/tools/runner/java/dalvik/runner/testactivity.java new class that shared contains (old and some new) between the dalvikrunner and the testrunner. libcore/tools/runner/java/dalvik/runner/testproperties.java regression test script for debugging the matrix of various dalvikrunner modes and test types: libcore/tools/runner/test-dalvik-runner.sh 	7040 commit a1df197865bf7c86448ad5434ac56e6a9020e2d1 dalvikrunner can run a test as an android.<br>ap.<br>activity & pathclassloader.<br>tostring change summary: - pathclassloader.<br>tostring prints path - dalvikrunner -mode activity now working - new dalvikrunner -no-clean vs -no-clean-after behavior details dalvik runtime change changed pathclassloader.<br>tostring to print the class loaders path also fixed variable name in commented out debug code libcore/dalvik/src/main/java/dalvik/system/pathclassloader.<br>java dalvik runner changes mode is the new abstract superclass of the existing vm class.<br> activitymode is for the new mode of running as a activity on the device.<br> vm is now a subclass of mode and its javavm and devicedalvikvm still exist although some code has been refactored into the new environment clases (see below) libcore/tools/runner/java/dalvik/runner/mode.<br>java libcore/tools/runner/java/dalvik/runner/activitymode.<br>java libcore/tools/runner/java/dalvik/runner/devicedalvikvm.<br>java libcore/tools/runner/java/dalvik/runner/javavm.<br>java libcore/tools/runner/java/dalvik/runner/vm.<br>java environment and its subclasses environmenthost and environmentdevice allow us to reuse some common code between the two different device modes (activitymode and devicedalvikvm)<br> basically code that was more about where and how to do things based on where the code was running as opposed to how the code was running moved to the environment classes.<br> for example, prepare( logic for /sdcard/ and adb code in general.<br> libcore/tools/runner/java/dalvik/runner/devicedalvikvm.<br>java libcore/tools/runner/java/dalvik/runner/environment.<br>java libcore/tools/runner/java/dalvik/runner/environmentdevice.<br>java libcore/tools/runner/java/dalvik/runner/environmenthost.<br>java libcore/tools/runner/java/dalvik/runner/javavm.<br>java libcore/tools/runner/java/dalvik/runner/vm.<br>java adding new files libcore/tools/runner/android.<br>mk apt is a wrapper for "apt" similar to adb and dx libcore/tools/runner/java/dalvik/runner/apt.<br>java added adb.<br>install and adb.<br>uninstall methods changed from using file.<br>tostring to file.<br>getpath for clarity libcore/tools/runner/java/dalvik/runner/adb.<br>java codefinder has been extended so that driver can ask finders what they need to build and run, specifically through the new getrunnerjava and getrunnerclasspath.<br> (as part of this namingpatterncodefinder's runnerclass was changed to getrunnerclass for consistency with the superclass.<br> this was important for running as an activity because we want to minimize what we pack into the apk file because of the "dx -dex" runtime and not just pull in all possible runners and supporting libraries.<br> testrun objects also hold onto this information from their finders.<br> libcore/tools/runner/java/dalvik/runner/driver.<br>java libcore/tools/runner/java/dalvik/runner/codefinder.<br>java libcore/tools/runner/java/dalvik/runner/caliperfinder.<br>java libcore/tools/runner/java/dalvik/runner/junitfinder.<br>java libcore/tools/runner/java/dalvik/runner/jtregfinder.<br>java libcore/tools/runner/java/dalvik/runner/mainfinder.<br>java libcore/tools/runner/java/dalvik/runner/namingpatterncodefinder.<br>java libcore/tools/runner/java/dalvik/runner/testrun.<br>java testrunner testrunner's classname is now testclass to clarifiy it from the runnerclass.<br> libcore/tools/runner/java/dalvik/runner/testrunner.<br>java libcore/tools/runner/java/dalvik/runner/caliperrunner.<br>java libcore/tools/runner/java/dalvik/runner/junitrunner.<br>java libcore/tools/runner/java/dalvik/runner/jtregrunner.<br>java libcore/tools/runner/java/dalvik/runner/mainrunner.<br>java classpath now has a collection.<br>of and collection.<br>addall that take a collection file  instead if just a file.<br> libcore/tools/runner/java/dalvik/runner/classpath.<br>java added command.<br>args(file arg) to avoid a lot of args(file.<br>getpath( libcore/tools/runner/java/dalvik/runner/command.<br>java option -clean has expanded to -clean-before, -clean-after, and -clean.<br> now -no-clean will remove nothing as elliot requested.<br> -no-clean-after is now what is useful for dalvikrunner debuggin.<br> default is still to clean before and after.<br> libcore/tools/runner/java/dalvik/runner/dalvikrunner.<br>java moved vm.<br>dalvik_runner_home to dalvikrunner.<br>home.<br> /tmp/ uid  paths are now /tmp/dalvikrunner/ uid  paths are easier cleanup.<br> libcore/tools/runner/java/dalvik/runner/dalvikrunner.<br>java driver was changed to use a executorcompletionservice around the executorservice so that exceptions from the execute threads could be reported on the main thread.<br> libcore/tools/runner/java/dalvik/runner/driver.<br>java we now build the testrunner before the test so that its classes will be around to be packed into apk files.<br> libcore/tools/runner/java/dalvik/runner/driver.<br>java dx.<br>dex now takes file arguments instread of strings.<br> dx.<br>dex also needs to pass additional memory arguments to not run out of memory building the big dex for the apk.<br> the values i used where from the build/core/definitions.<br>mk libcore/tools/runner/java/dalvik/runner/dx.<br>java postcompile was split into postcompiletestrunner and postcompiletest because the packaging requires are very different in each case for activitymode.<br> specifically, the test runner is not post-packaged seperately, but packaged in the apk with each test.<br> libcore/tools/runner/java/dalvik/runner/activitymode.<br>java libcore/tools/runner/java/dalvik/runner/devicedalvikvm.<br>java libcore/tools/runner/java/dalvik/runner/javavm.<br>java libcore/tools/runner/java/dalvik/runner/vm.<br>java changed testclass to test to avoid collision with new superclass field libcore/tools/runner/java/dalvik/runner/jtregrunner.<br>java libcore/tools/runner/java/dalvik/runner/mainrunner.<br>java added @suppresswarnings(unchecked" libcore/tools/runner/java/dalvik/runner/optionparser.<br>java new android.<br>ap.<br>activity based on elliot's testapk.<br> it encapsulates an activityrunner that invokes the appropriate testrunner based on test.<br>properties.<br> libcore/tools/runner/java/dalvik/runner/testactivity.<br>java new class that shared contains (old and some new) between the dalvikrunner and the testrunner.<br> libcore/tools/runner/java/dalvik/runner/testproperties.<br>java regression test script for debugging the matrix of various dalvikrunner modes and test types: libcore/tools/runner/test-dalvik-runner.<br>sh	2	-2	 7040[0] commit[0] a1df197865bf7c86448ad5434ac56e6a9020e2d1[0] dalvikrunner[0] can[0] run[0] a[0] test[0] as[0] an[0] android[0] [[Sentence=-1,1=word max, 1-5]] app/ap[0] [[Sentence=-1,1=word max, 1-5]] activity[0] &[0] pathclassloader[0] [[Sentence=-1,1=word max, 1-5]] tostring[0] change[0] summary[0] pathclassloader[0] [[Sentence=-1,1=word max, 1-5]] tostring[0] prints[0] path[0] dalvikrunner[0] mode[0] activity[0] now[0] working[0] new[0] dalvikrunner[0] no[0] clean[0] vs[0] no[0] clean[0] after[0] behavior[0] details[0] dalvik[0] runtime[0] change[0] changed[0] pathclassloader[0] [[Sentence=-1,1=word max, 1-5]] tostring[0] to[0] print[0] the[0] class[0] loaders[0] path[0] also[0] fixed[0] variable[0] name[0] in[0] commented[0] out[0] debug[0] code[0] libcore/dalvik/src/main/java/dalvik/system/pathclassloader[0] [[Sentence=-1,1=word max, 1-5]] java[0] dalvik[0] runner[0] changes[0] mode[0] is[0] the[0] new[0] abstract[0] superclass[0] of[0] the[0] existing[0] vm[0] class[0] [[Sentence=-1,1=word max, 1-5]] activitymode[0] is[0] for[0] the[0] new[0] mode[0] of[0] running[0] as[0] a[0] activity[0] on[0] the[0] device[0] [[Sentence=-1,1=word max, 1-5]] vm[0] is[0] now[0] a[0] subclass[0] of[0] mode[0] and[0] its[0] javavm[0] and[0] devicedalvikvm[0] still[0] exist[0] although[0] some[0] code[0] has[0] been[0] refactored[0] into[0] the[0] new[0] environment[0] clases[0] see[0] below[0] libcore/tools/runner/java/dalvik/runner/mode[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/activitymode[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/devicedalvikvm[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/javavm[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/vm[0] [[Sentence=-1,1=word max, 1-5]] java[0] environment[0] and[0] its[0] subclasses[0] environmenthost[0] and[0] environmentdevice[0] allow[0] us[0] to[0] reuse[0] some[0] common[0] code[0] between[0] the[0] two[0] different[0] device[0] modes[0] activitymode[0] and[0] devicedalvikvm[0] [[Sentence=-1,1=word max, 1-5]] basically[0] code[0] that[0] was[0] more[0] about[0] where[0] and[0] how[0] to[0] do[0] things[0] based[0] on[0] where[0] the[0] code[0] was[0] running[0] as[0] opposed[0] to[0] how[0] the[0] code[0] was[0] running[0] moved[0] to[0] the[0] environment[0] classes[0] [[Sentence=-1,1=word max, 1-5]] for[0] example[0] prepare[0] logic[0] for[0] /sdcard/[0] and[0] adb[0] code[0] in[0] general[0] [[Sentence=-1,1=word max, 1-5]] libcore/tools/runner/java/dalvik/runner/devicedalvikvm[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/environment[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/environmentdevice[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/environmenthost[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/javavm[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/vm[0] [[Sentence=-1,1=word max, 1-5]] java[0] adding[0] new[0] files[0] libcore/tools/runner/android[0] [[Sentence=-1,1=word max, 1-5]] mk[0] aapt/apt[0] is[0] a[0] wrapper[0] for[0] aapt/apt[0] similar[0] to[0] adb[0] and[0] dx[0] libcore/tools/runner/java/dalvik/runner/aapt/libcore/tools/runner/java/dalvik/runner/apt[0] [[Sentence=-1,1=word max, 1-5]] java[0] added[0] adb[0] [[Sentence=-1,1=word max, 1-5]] install[0] and[0] adb[0] [[Sentence=-1,1=word max, 1-5]] uninstall[0] methods[0] changed[0] from[0] using[0] file[0] [[Sentence=-1,1=word max, 1-5]] tostring[0] to[0] file[0] [[Sentence=-1,1=word max, 1-5]] getpath[0] for[0] clarity[0] libcore/tools/runner/java/dalvik/runner/adb[0] [[Sentence=-1,1=word max, 1-5]] java[0] codefinder[0] has[0] been[0] extended[0] so[0] that[0] driver[0] can[0] ask[0] finders[0] what[0] they[0] need[0] to[0] build[0] and[0] run[0] specifically[0] through[0] the[0] new[0] getrunnerjava[0] and[0] getrunnerclasspath[0] [[Sentence=-1,1=word max, 1-5]] as[0] part[0] of[0] this[0] namingpatterncodefinder's[0] runnerclass[0] was[0] changed[0] to[0] getrunnerclass[0] for[0] consistency[0] with[0] the[0] superclass[0] [[Sentence=-1,1=word max, 1-5]] this[0] was[0] important[0] for[0] running[0] as[0] an[0] activity[0] because[0] we[0] want[0] to[0] minimize[0] what[0] we[0] pack[0] into[0] the[0] apk[0] file[0] because[0] of[0] the[0] dx[0] dex[0] runtime[0] and[0] not[0] just[0] pull[0] in[0] all[0] possible[0] runners[0] and[0] supporting[1] libraries[0] [[Sentence=-1,2=word max, 1-5]] testrun[0] objects[0] also[0] hold[0] onto[0] this[0] information[0] from[0] their[0] finders[0] [[Sentence=-1,1=word max, 1-5]] libcore/tools/runner/java/dalvik/runner/driver[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/codefinder[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/caliperfinder[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/junitfinder[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/jtregfinder[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/mainfinder[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/namingpatterncodefinder[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/testrun[0] [[Sentence=-1,1=word max, 1-5]] java[0] testrunner[0] testrunner's[0] classname[0] is[0] now[0] testclass[0] to[0] clarifiy[0] it[0] from[0] the[0] runnerclass[0] [[Sentence=-1,1=word max, 1-5]] libcore/tools/runner/java/dalvik/runner/testrunner[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/caliperrunner[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/junitrunner[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/jtregrunner[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/mainrunner[0] [[Sentence=-1,1=word max, 1-5]] java[0] classpath[0] now[0] has[0] a[0] collection[0] [[Sentence=-1,1=word max, 1-5]] of[0] and[0] collection[0] [[Sentence=-1,1=word max, 1-5]] addall[0] that[0] take[0] a[0] collection[0] file[0] instead[0] if[0] just[0] a[0] file[0] [[Sentence=-1,1=word max, 1-5]] libcore/tools/runner/java/dalvik/runner/classpath[0] [[Sentence=-1,1=word max, 1-5]] java[0] added[0] command[0] [[Sentence=-1,1=word max, 1-5]] args[0] file[0] arg[0] to[0] avoid[-1] a[0] lot[0] of[0] args[0] file[0] [[Sentence=-2,1=word max, 1-5]] getpath[0] libcore/tools/runner/java/dalvik/runner/command[0] [[Sentence=-1,1=word max, 1-5]] java[0] option[0] clean[0] has[0] expanded[0] to[0] clean[0] before[0] clean[0] after[0] and[0] clean[0] [[Sentence=-1,1=word max, 1-5]] now[0] no[0] clean[0] will[0] remove[0] nothing[0] as[0] elliot[0] requested[0] [[Sentence=-1,1=word max, 1-5]] no[0] clean[0] after[0] is[0] now[0] what[0] is[0] useful[1] for[0] dalvikrunner[0] debuggin[0] [[Sentence=-1,2=word max, 1-5]] default[-1] is[0] still[0] to[0] clean[0] before[0] and[0] after[0] [[Sentence=-2,1=word max, 1-5]] libcore/tools/runner/java/dalvik/runner/dalvikrunner[0] [[Sentence=-1,1=word max, 1-5]] java[0] moved[0] vm[0] [[Sentence=-1,1=word max, 1-5]] dalvik_runner_home[0] to[0] dalvikrunner[0] [[Sentence=-1,1=word max, 1-5]] home[0] [[Sentence=-1,1=word max, 1-5]] /tmp/[0] uuid/uid[0] paths[0] are[0] now[0] /tmp/dalvikrunner/[0] uuid/uid[0] paths[0] are[0] easier[0] cleanup[0] [[Sentence=-1,1=word max, 1-5]] libcore/tools/runner/java/dalvik/runner/dalvikrunner[0] [[Sentence=-1,1=word max, 1-5]] java[0] driver[0] was[0] changed[0] to[0] use[0] a[0] executorcompletionservice[0] around[0] the[0] executorservice[0] so[0] that[0] exceptions[0] from[0] the[0] execute[0] threads[0] could[0] be[0] reported[0] on[0] the[0] main[0] thread[0] [[Sentence=-1,1=word max, 1-5]] libcore/tools/runner/java/dalvik/runner/driver[0] [[Sentence=-1,1=word max, 1-5]] java[0] we[0] now[0] build[0] the[0] testrunner[0] before[0] the[0] test[0] so[0] that[0] its[0] classes[0] will[0] be[0] around[0] to[0] be[0] packed[0] into[0] apk[0] files[0] [[Sentence=-1,1=word max, 1-5]] libcore/tools/runner/java/dalvik/runner/driver[0] [[Sentence=-1,1=word max, 1-5]] java[0] dx[0] [[Sentence=-1,1=word max, 1-5]] dex[0] now[0] takes[0] file[0] arguments[-1] instread[0] of[0] strings[0] [[Sentence=-2,1=word max, 1-5]] dx[0] [[Sentence=-1,1=word max, 1-5]] dex[0] also[0] needs[0] to[0] pass[0] additional[0] memory[0] arguments[-1] to[0] not[0] run[0] out[0] of[0] memory[0] building[0] the[0] big[0] dex[0] for[0] the[0] apk[0] [[Sentence=-2,1=word max, 1-5]] the[0] values[1] i[0] used[0] where[0] from[0] the[0] build/core/definitions[0] [[Sentence=-1,2=word max, 1-5]] mk[0] libcore/tools/runner/java/dalvik/runner/dx[0] [[Sentence=-1,1=word max, 1-5]] java[0] postcompile[0] was[0] split[0] into[0] postcompiletestrunner[0] and[0] postcompiletest[0] because[0] the[0] packaging[0] requires[0] are[0] very[0] different[0] in[0] each[0] case[0] for[0] activitymode[0] [[Sentence=-1,1=word max, 1-5]] specifically[0] the[0] test[0] runner[0] is[0] not[0] post[0] packaged[0] seperately[0] but[0] packaged[0] in[0] the[0] apk[0] with[0] each[0] test[0] [[Sentence=-1,1=word max, 1-5]] libcore/tools/runner/java/dalvik/runner/activitymode[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/devicedalvikvm[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/javavm[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/vm[0] [[Sentence=-1,1=word max, 1-5]] java[0] changed[0] testclass[0] to[0] test[0] to[0] avoid[-1] collision[-1] with[0] new[0] superclass[0] field[0] libcore/tools/runner/java/dalvik/runner/jtregrunner[0] [[Sentence=-2,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/mainrunner[0] [[Sentence=-1,1=word max, 1-5]] java[0] added[0] @suppresswarnings[0] unchecked[0] libcore/tools/runner/java/dalvik/runner/optionparser[0] [[Sentence=-1,1=word max, 1-5]] java[0] new[0] android[0] [[Sentence=-1,1=word max, 1-5]] app/ap[0] [[Sentence=-1,1=word max, 1-5]] activity[0] based[0] on[0] elliot's[0] testapk[0] [[Sentence=-1,1=word max, 1-5]] it[0] encapsulates[0] an[0] activityrunner[0] that[0] invokes[0] the[0] appropriate[0] testrunner[0] based[0] on[0] test[0] [[Sentence=-1,1=word max, 1-5]] properties[0] [[Sentence=-1,1=word max, 1-5]] libcore/tools/runner/java/dalvik/runner/testactivity[0] [[Sentence=-1,1=word max, 1-5]] java[0] new[0] class[0] that[0] shared[0] contains[0] old[0] and[0] some[0] new[0] between[0] the[0] dalvikrunner[0] and[0] the[0] testrunner[0] [[Sentence=-1,1=word max, 1-5]] libcore/tools/runner/java/dalvik/runner/testproperties[0] [[Sentence=-1,1=word max, 1-5]] java[0] regression[0] test[0] script[0] for[0] debugging[0] the[0] matrix[0] of[0] various[0] dalvikrunner[0] modes[0] and[0] test[0] types[0] libcore/tools/runner/test[0] dalvik[0] runner[0] [[Sentence=-1,1=word max, 1-5]] sh[0] [[Sentence=-1,1=word max, 1-5]][[[2,-2 max of sentences]]]
