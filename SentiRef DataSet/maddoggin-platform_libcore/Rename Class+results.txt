Rename Class	Translation	Positive	Negative	EmotionRationale
8542 commit ce1150d9897bd5baf66de4a8db132afce18be15a merge: 1c039d7 953df61 merge "refactor httpurlconnection implementation." into dalvik-dev 	8542 commit ce1150d9897bd5baf66de4a8db132afce18be15a merge: 1c039d7 953df61 merge "refactor httpurlconnection implementation.<br> into dalvik-dev	1	-1	 8542[0] commit[0] ce1150d9897bd5baf66de4a8db132afce18be15a[0] merge[0] 1c039d7[0] 953df61[0] merge[0] refactor[0] httpurlconnection[0] implementation[0] [[Sentence=-1,1=word max, 1-5]] into[0] dalvik[0] dev[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
8543 commit 953df613522e12a418cb7cb73248594d6c9f53d4 refactor httpurlconnection implementation. break httpurlconnectionimpl into two parts: the part that implements the java api (that follows redirects etc.) and the part that speaks http. the http part is called httpengine, and it can only be used for a single http request. this makes it easier to set request properties that only apply to a single socket request. tests for 'vary', 'content-location' and warnings. for simplicity of implementation i've chosen not to support 'vary' at this time. the 'content-location' header doesn't require any work from the cache. warnings are ugly but allow the caller to identify when the cache results may be problematic. also breaking httpresponsecache's dependency on httpurlconnectionimpl so it can be tested on the ri. change-id: idbabb51251f479c2cdea4e0fceb029bfd07182be http://b/3180373 	8543 commit 953df613522e12a418cb7cb73248594d6c9f53d4 refactor httpurlconnection implementation.<br> break httpurlconnectionimpl into two parts: the part that implements the java api (that follows redirects etc.<br> and the part that speaks http.<br> the http part is called httpengine, and it can only be used for a single http request.<br> this makes it easier to set request properties that only apply to a single socket request.<br> tests for 'vary', 'content-location' and warnings.<br> for simplicity of implementation i've chosen not to support 'vary' at this time.<br> the 'content-location' header doesn't require any work from the cache.<br> warnings are ugly but allow the caller to identify when the cache results may be problematic.<br> also breaking httpresponsecache's dependency on httpurlconnectionimpl so it can be tested on the ri.<br> change-id: idbabb51251f479c2cdea4e0fceb029bfd07182be http://b/3180373	1	-3	 8543[0] commit[0] 953df613522e12a418cb7cb73248594d6c9f53d4[0] refactor[0] httpurlconnection[0] implementation[0] [[Sentence=-1,1=word max, 1-5]] break[0] httpurlconnectionimpl[0] into[0] two[0] parts[0] the[0] part[0] that[0] implements[0] the[0] java[0] api[0] that[0] follows[0] redirects[0] etc[0] [[Sentence=-1,1=word max, 1-5]] and[0] the[0] part[0] that[0] speaks[0] http[0] [[Sentence=-1,1=word max, 1-5]] the[0] http[0] part[0] is[0] called[0] httpengine[0] and[0] it[0] can[0] only[0] be[0] used[0] for[0] a[0] single[0] http[0] request[0] [[Sentence=-1,1=word max, 1-5]] this[0] makes[0] it[0] easier[0] to[0] set[0] request[0] properties[0] that[0] only[0] apply[0] to[0] a[0] single[0] socket[0] request[0] [[Sentence=-1,1=word max, 1-5]] tests[0] for[0] 'vary'[0] 'content[0] location'[0] and[0] warnings[0] [[Sentence=-1,1=word max, 1-5]] for[0] simplicity[0] of[0] implementation[0] i've[0] chosen[0] not[0] to[0] support[0] 'vary'[0] at[0] this[0] time[0] [[Sentence=-1,1=word max, 1-5]] the[0] 'content[0] location'[0] header[0] doesn't[0] require[0] any[0] work[0] from[0] the[0] cache[0] [[Sentence=-1,1=word max, 1-5]] warnings[0] are[0] ugly[-2] but[0] allow[0] the[0] caller[0] to[0] identify[0] when[0] the[0] cache[0] results[0] may[0] be[0] problematic[-1] [[Sentence=-3,1=word max, 1-5]] also[0] breaking[0] httpresponsecache's[0] dependency[0] on[0] httpurlconnectionimpl[0] so[0] it[0] can[0] be[0] tested[0] on[0] the[0] ri[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] idbabb51251f479c2cdea4e0fceb029bfd07182be[0] http[0] ://b/3180373[0] [[Sentence=-1,1=word max, 1-5]][[[1,-3 max of sentences]]]
11483 commit bcfb325d5b1f9529b439cc0805a1c140521510f7 opensslsocket handshake overhaul summary: - sslsocket.starthandshake now generalized to handle both client and server handshaking as well as client/server role reversal - handshake_cutthrough.patch is properly integrated with support delayed handshake completion now integrated with delayed updates to session cache and callbacks to handshakecompletedlisteners - many fixes to sslsession, which is the end product of the handshake - generally more ri and sslengine compliant behavior. - more native code deletion through unification of client/server handshake, unification of client/server certificate chain verification, etc. more native code moved from various openssl classes to cleaner nativecrypto interfaces that more directly mirror the openssl interfaces. details: delay ssl_new call until handshake time when we know for sure whether the opensslsocket will be used in client or server mode and we can allocate the ssl_new from the apppriate client or server ssl_ctx used for session caching. now that no ssl is allocated for an opensslserversocketimpl, store enabledprotocols and enabledciphersuites in instance string arrays. use new nativecrypto.checkenabled* methdods for argument validation. opensslserversocketimpl passes these enabled arrays to a new opensslsocket constructor during accept(). removed finalizer from opensslserversocketimpl since it no longer has any native storage and socket is already closed by plainsocketimpl finalizer. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslserversocketimpl.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl.java opensslsocket major overhaul to properly implement handshaking including switching client and server roles and session id caching with handshake_cutthrough.patch. - now implements nativecrypto.handshakecompletedlisteners for properly timed callback when handshake_cutthrough.patch delays handshake completion until first sslsocket.getinputstream() read. - similar enabledprotocols/enabledciphersuites changes as opensslserversocketimpl since we need to store the state somewhere other than an openssl ssl struct until we are sure if we are doing a client or server handshake. - added handshake completed field so that starthandshake can tell if handshake was completed during ssl_do_handshake or will be completed later by a call to handshakecompletedcallback.handshakecompleted. - removed nativegetsession as the equivalent value is now returned by ssl_do_handshake - removed nativecipherauthenticationmethod as the value is now passed to verifycertificatechain - starthandshake is now a wrapper that forces a fully synchronous handshake - starthandshake(boolean) is the the most changed method in this changelist, combinding both the old starthandshake logic, but also the opensslsocketimpl.accept code as well. notable differences from the old code: * now responsible for ssl_new * single code path for client/server handshaking dealing with sslsession caching * now handles server certificate requests previously in opensslserversocketimpl, since a client can request to act like a server and therefore need to be able to make suck demands on its peer. * supports turning off handshake_cutthrough at a callers request via explicit call to starthandshake() * certificate verification happens during an upcall from openssl during ssl_do_handshake to verifycertificatechain for both client and server cases. previously there was not quite right upcall support on the server side and post-handshake checking on the client, which did not allow for a proper alert to be sent to the peer informing them of the issue, which the ri and sslengine code do. * similarly, setenablesessioncreation(false) did not send an alert to the peer as the ri and sslengine code in the client case. in the server case, nothing was previously done. * the use of local certificates was not determined from introspecting the ssl struct post-handshake. this is now partially implemented and will be completed in a later change. - sslsocket.{shutdowninput,shutdownoutput} are now restored to the proper behavior of throwing unsupportedoperationexception. - gutted opensslsocketimpl finalizer. the comment explains in detail the trouble of having the finalizer do anything more than touch its the instances own state due to unpredictable order of finalization and the future possability of parallel finalization. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl.java sslsession fixes - made opensslsessionimpl.sessioncontext non-final so it could be nulled by sslsession.invalidate to match ri behavior. - as noted in abstractsessioncontext discussion, removed opensslsessionimpl constructor that took sslparameters, instead we take the possibly null localcertificates directly. opensslsessionimpl.getlocalcertificates now simply returns the localcertificates member variable instead of incorrectly trying to query the keymanager for certificates that may not have been used. - opensslsessionimpl now caches its native id to avoid numerious native calls but also now provides as resetid which will update the cache when a delayed handshake happens due to the handshake_cutthrough.patch - fixed bug in getpeerprincipal that it wasn't calling getpeercertificates to initialize peercertificates field. - freeimpl is now 'public static' in preparation for move to nativecrypto. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsessionimpl.java the old sslsessionimpl class that is still used for representing the invalid session now returns isvalid    false and getprotocol    "none" to match the ri. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/sslsessionimpl.java nativecrypto improvements - adding nativecrypto.ssl_{get,set,clear}_mode similar to nativecrypto.ssl_{get,set,clear}_options along with ssl_mode_handshake_cutthrough constant which is used to explicitly disable/enable the android handshake_cutthrough.patch behavior. - added missing nativecrypto.ssl_clear_options and used to properly implement nativecrypto.setenabledprotocols. - added nativecrypto.checkenabledprotocols and nativecrypto.checkenabledciphersuites helpers to implement exception compatability with the ri. while some of this code is refactored from existing nativecrypto code, it is now also used by opensslserversocketimpl and opensslsocketimpl which maintain their own string[]s of what is enabled until starthandshake time. (see below) - changed nativecrypto.findsuite to use foreach style loop for clarity. - moved opensslserversocketimpl nativesetclientauth and ssl_verify_* constants to nativecrypto.ssl_set_verify - added nativecrypto.ssl_set_session based on part of old opensslsocketimpl.nativeconnect - added nativecrypto.ssl_set_session_creation_enabled to properly implement sslsocket.setenablesessioncreation(false) which uses new external/openssl/patches/jsse.patch functionality. - new nativecrypto.ssl_do_handshake consolidates opensslsocketimpl.{nativeconnect, nativeaccept} while properly implementing sslsocket.setuseclientmode(false) for clients and sslsocket.setuseclientmode(true) for servers. - new nativecrypto.ssl_get_certificate is determine if local certificate requested by peer. while functional, currently nativecrypto.ssl_new always sets a value via ssl_use_certificate instead of relying on a callback set via ssl_ctx_set_client_cert_cb. - changed nativecrypto.certificatechainverifier.verifycertificatechain to throw a checked certificateexception to match trustmanager.{checkservertrusted, checkclienttrusted}. it also takes an authmethod so avoid the need to call the old opensslsocketimpl.nativecipherauthenticationmethod. - added nativecrypto.handshakecompletedcallback which has its handshakecompleted method called from openssl when the now delayed handshake_cutthrough.patch handshake is completed so sslsession caching can be delayed until a session id is available and to provide a better time for handshakecompletedlisteners to be notified. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/nativecrypto.java x-net/src/main/native/org_apache_harmony_xnet_provider_jsse_nativecrypto.cpp some other changes specific to the naitve side of the code - added jnitrace calls (enabled at compile time with jni_trace) for future debugging. - throw sslexception subclass of ioexception instead ioexception itself for better ri compatability x-net/src/main/native/org_apache_harmony_xnet_provider_jsse_nativecrypto.cpp - changed from old struct app_data to new class appdata at enh's request remove dubious usage of sslparameters within abstractsessioncontext to pass through to opensslsessionimpl constructor for use in calling getlocalcertificates for sessions created from a byte array with abstractsessioncontext.tosession. our abstractsessioncontext.tobytes doesn't currently include the local certificates in its output, so it cannot be expected to have in tosession. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/abstractsessioncontext.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/clientsessioncontext.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/serversessioncontext.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/sslparameters.java test maintenance openssl 1.0.0 adds support for rfc 4507 session tickets which remove the need for server side session state. these tests needed to be updated for this new behavior. if is_ri is true, they still follow the old behavior. luni/src/test/java/javax/net/ssl/sslsessioncontexttest.java luni/src/test/java/javax/net/ssl/sslsessiontest.java luni/src/test/java/javax/net/ssl/sslsockettest.java update knownfailures and add specific comments at point of failure about what remains to be fixed. luni/src/test/java/javax/net/ssl/sslsessiontest.java added tests to cover the use of standard cipher suite names. historically android has used openssl string constants for cipher suite names, but jsse actually specifies supported and expected names. luni/src/test/java/javax/net/ssl/sslsocketfactorytest.java luni/src/test/java/javax/net/ssl/sslsockettest.java create new support/src/test/java/javax/net/ssl with old helper support code pulled from javax.net.ssl tests: sslcontexttest.helper -  testsslcontext sslsockettest.helper -  testsslsocketpair sslsessiontest.helper -  testsslsessions also added new standardnames here, which contains a collection of expected constants for test validation. luni/src/test/java/javax/net/ssl/sslcontexttest.java luni/src/test/java/javax/net/ssl/sslsockettest.java luni/src/test/java/javax/net/ssl/sslsessiontest.java support/src/test/java/javax/net/ssl/testsslcontext.java support/src/test/java/javax/net/ssl/testsslsocketpair.java support/src/test/java/javax/net/ssl/testsslsessions.java support/src/test/java/javax/net/ssl/standardnames.java removed some now fixed knownfailures and unneeded !is_ri code. marked some [un]knownfailures where exceptions are thrown and visible in the output but aren't correctly causing the test to fail. fixed assertnonnull to asserttrue in test_sslsockettest_test_create. added stress_test_sslsockettest_test_create to track down test flakiness, leading to rewrite of sslsocket finalization. luni/src/test/java/javax/net/ssl/sslsockettest.java reenable javax.net.ssl.alltests now that it is does not hang luni/src/test/java/tests/alltests.java improve error messages while debugging overflow problem. added new assert when debugging new rfc 4507 behavior. removed knownfailure annotation for now working test case. x-net/src/test/java/tests/api/javax/net/ssl/sslsessiontest.java client code changes now that starthandshake implies synchronous vs android's default async handshake, remove unneeded explict calls to sslsocket.starthandshake luni/src/main/java/org/apache/harmony/luni/internal/net/www/protocol/http/httpconnection.java removed ibm 1.4.x codepath that involved starthandshake x-net/src/main/java/javax/net/ssl/defaulthostnameverifier.java unrelated remove unneed sslsocket.setuseclientmode while removing unneeded sslsocket.starthandshake luni/src/main/java/org/apache/harmony/luni/internal/net/www/protocol/http/httpconnection.java removed warnings due to now missing modules in classpath run-core-tests change-id: i6e149ae259b3feccdfb0673209c85cfeb60befc8 	11483 commit bcfb325d5b1f9529b439cc0805a1c140521510f7 opensslsocket handshake overhaul summary: - sslsocket.<br>starthandshake now generalized to handle both client and server handshaking as well as client/server role reversal - handshake_cutthrough.<br>patch is properly integrated with support delayed handshake completion now integrated with delayed updates to session cache and callbacks to handshakecompletedlisteners - many fixes to sslsession, which is the end product of the handshake - generally more ri and sslengine compliant behavior.<br> - more native code deletion through unification of client/server handshake, unification of client/server certificate chain verification, etc.<br> more native code moved from various openssl classes to cleaner nativecrypto interfaces that more directly mirror the openssl interfaces.<br> details: delay ssl_new call until handshake time when we know for sure whether the opensslsocket will be used in client or server mode and we can allocate the ssl_new from the appriate client or server ssl_ctx used for session caching.<br> now that no ssl is allocated for an opensslserversocketimpl, store enabledprotocols and enabledciphersuites in instance string arrays.<br> use new nativecrypto.<br>checkenabled* methdods for argument validation.<br> opensslserversocketimpl passes these enabled arrays to a new opensslsocket constructor during accept(<br> removed finalizer from opensslserversocketimpl since it no longer has any native storage and socket is already closed by plainsocketimpl finalizer.<br> x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslserversocketimpl.<br>java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl.<br>java opensslsocket major overhaul to properly implement handshaking including switching client and server roles and session id caching with handshake_cutthrough.<br>patch.<br> - now implements nativecrypto.<br>handshakecompletedlisteners for properly timed callback when handshake_cutthrough.<br>patch delays handshake completion until first sslsocket.<br>getinputstream( read.<br> - similar enabledprotocols/enabledciphersuites changes as opensslserversocketimpl since we need to store the state somewhere other than an openssl ssl struct until we are sure if we are doing a client or server handshake.<br> - added handshake completed field so that starthandshake can tell if handshake was completed during ssl_do_handshake or will be completed later by a call to handshakecompletedcallback.<br>handshakecompleted.<br> - removed nativegetsession as the equivalent value is now returned by ssl_do_handshake - removed nativecipherauthenticationmethod as the value is now passed to verifycertificatechain - starthandshake is now a wrapper that forces a fully synchronous handshake - starthandshake(boolean) is the the most changed method in this changelist, combinding both the old starthandshake logic, but also the opensslsocketimpl.<br>accept code as well.<br> notable differences from the old code: * now responsible for ssl_new * single code path for client/server handshaking dealing with sslsession caching * now handles server certificate requests previously in opensslserversocketimpl, since a client can request to act like a server and therefore need to be able to make suck demands on its peer.<br> * supports turning off handshake_cutthrough at a callers request via explicit call to starthandshake( * certificate verification happens during an upcall from openssl during ssl_do_handshake to verifycertificatechain for both client and server cases.<br> previously there was not quite right upcall support on the server side and post-handshake checking on the client, which did not allow for a proper alert to be sent to the peer informing them of the issue, which the ri and sslengine code do.<br> * similarly, setenablesessioncreation(false) did not send an alert to the peer as the ri and sslengine code in the client case.<br> in the server case, nothing was previously done.<br> * the use of local certificates was not determined from introspecting the ssl struct post-handshake.<br> this is now partially implemented and will be completed in a later change.<br> - sslsocket.{shutdowninput,shutdownoutput} are now restored to the proper behavior of throwing unsupportedoperationexception.<br> - gutted opensslsocketimpl finalizer.<br> the comment explains in detail the trouble of having the finalizer do anything more than touch its the instances own state due to unpredictable order of finalization and the future possability of parallel finalization.<br> x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl.<br>java sslsession fixes - made opensslsessionimpl.<br>sessioncontext non-final so it could be nulled by sslsession.<br>invalidate to match ri behavior.<br> - as noted in abstractsessioncontext discussion, removed opensslsessionimpl constructor that took sslparameters, instead we take the possibly null localcertificates directly.<br> opensslsessionimpl.<br>getlocalcertificates now simply returns the localcertificates member variable instead of incorrectly trying to query the keymanager for certificates that may not have been used.<br> - opensslsessionimpl now caches its native id to avoid numerious native calls but also now provides as resetid which will update the cache when a delayed handshake happens due to the handshake_cutthrough.<br>patch - fixed bug in getpeerprincipal that it wasn't calling getpeercertificates to initialize peercertificates field.<br> - freeimpl is now 'public static' in preparation for move to nativecrypto.<br> x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsessionimpl.<br>java the old sslsessionimpl class that is still used for representing the invalid session now returns isvalid    false and getprotocol    "none" to match the ri.<br> x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/sslsessionimpl.<br>java nativecrypto improvements - adding nativecrypto.<br>ssl_{get,set,clear}_mode similar to nativecrypto.<br>ssl_{get,set,clear}_options along with ssl_mode_handshake_cutthrough constant which is used to explicitly disable/enable the android handshake_cutthrough.<br>patch behavior.<br> - added missing nativecrypto.<br>ssl_clear_options and used to properly implement nativecrypto.<br>setenabledprotocols.<br> - added nativecrypto.<br>checkenabledprotocols and nativecrypto.<br>checkenabledciphersuites helpers to implement exception compatability with the ri.<br> while some of this code is refactored from existing nativecrypto code, it is now also used by opensslserversocketimpl and opensslsocketimpl which maintain their own string[]s of what is enabled until starthandshake time.<br> (see below) - changed nativecrypto.<br>findsuite to use foreach style loop for clarity.<br> - moved opensslserversocketimpl nativesetclientauth and ssl_verify_* constants to nativecrypto.<br>ssl_set_verify - added nativecrypto.<br>ssl_set_session based on part of old opensslsocketimpl.<br>nativeconnect - added nativecrypto.<br>ssl_set_session_creation_enabled to properly implement sslsocket.<br>setenablesessioncreation(false) which uses new external/openssl/patches/jsse.<br>patch functionality.<br> - new nativecrypto.<br>ssl_do_handshake consolidates opensslsocketimpl.{nativeconnect, nativeaccept} while properly implementing sslsocket.<br>setuseclientmode(false) for clients and sslsocket.<br>setuseclientmode(true) for servers.<br> - new nativecrypto.<br>ssl_get_certificate is determine if local certificate requested by peer.<br> while functional, currently nativecrypto.<br>ssl_new always sets a value via ssl_use_certificate instead of relying on a callback set via ssl_ctx_set_client_cert_cb.<br> - changed nativecrypto.<br>certificatechainverifier.<br>verifycertificatechain to throw a checked certificateexception to match trustmanager.{checkservertrusted, checkclienttrusted}.<br> it also takes an authmethod so avoid the need to call the old opensslsocketimpl.<br>nativecipherauthenticationmethod.<br> - added nativecrypto.<br>handshakecompletedcallback which has its handshakecompleted method called from openssl when the now delayed handshake_cutthrough.<br>patch handshake is completed so sslsession caching can be delayed until a session id is available and to provide a better time for handshakecompletedlisteners to be notified.<br> x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/nativecrypto.<br>java x-net/src/main/native/org_apache_harmony_xnet_provider_jsse_nativecrypto.<br>chat post some other changes specific to the naitve side of the code - added jnitrace calls (enabled at compile time with jni_trace) for future debugging.<br> - throw sslexception subclass of ioexception instead ioexception itself for better ri compatability x-net/src/main/native/org_apache_harmony_xnet_provider_jsse_nativecrypto.<br>chat post - changed from old struct app_data to new class appdata at enh's request remove dubious usage of sslparameters within abstractsessioncontext to pass through to opensslsessionimpl constructor for use in calling getlocalcertificates for sessions created from a byte array with abstractsessioncontext.<br>tosession.<br> our abstractsessioncontext.<br>tobytes doesn't currently include the local certificates in its output, so it cannot be expected to have in tosession.<br> x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/abstractsessioncontext.<br>java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/clientsessioncontext.<br>java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/serversessioncontext.<br>java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/sslparameters.<br>java test maintenance openssl 1.0.0 adds support for rfc 4507 session tickets which remove the need for server side session state.<br> these tests needed to be updated for this new behavior.<br> if is_ri is true, they still follow the old behavior.<br> luni/src/test/java/javax/net/ssl/sslsessioncontexttest.<br>java luni/src/test/java/javax/net/ssl/sslsessiontest.<br>java luni/src/test/java/javax/net/ssl/sslsockettest.<br>java update knownfailures and add specific comments at point of failure about what remains to be fixed.<br> luni/src/test/java/javax/net/ssl/sslsessiontest.<br>java added tests to cover the use of standard cipher suite names.<br> historically android has used openssl string constants for cipher suite names, but jsse actually specifies supported and expected names.<br> luni/src/test/java/javax/net/ssl/sslsocketfactorytest.<br>java luni/src/test/java/javax/net/ssl/sslsockettest.<br>java create new support/src/test/java/javax/net/ssl with old helper support code pulled from javax.<br>net.<br>ssl tests: sslcontexttest.<br>helper -  testsslcontext sslsockettest.<br>helper -  testsslsocketpair sslsessiontest.<br>helper -  testsslsessions also added new standardnames here, which contains a collection of expected constants for test validation.<br> luni/src/test/java/javax/net/ssl/sslcontexttest.<br>java luni/src/test/java/javax/net/ssl/sslsockettest.<br>java luni/src/test/java/javax/net/ssl/sslsessiontest.<br>java support/src/test/java/javax/net/ssl/testsslcontext.<br>java support/src/test/java/javax/net/ssl/testsslsocketpair.<br>java support/src/test/java/javax/net/ssl/testsslsessions.<br>java support/src/test/java/javax/net/ssl/standardnames.<br>java removed some now fixed knownfailures and unneeded !<br>is_ri code.<br> marked some [un]knownfailures where exceptions are thrown and visible in the output but aren't correctly causing the test to fail.<br> fixed assertnonnull to asserttrue in test_sslsockettest_test_create.<br> added stress_test_sslsockettest_test_create to track down test flakiness, leading to rewrite of sslsocket finalization.<br> luni/src/test/java/javax/net/ssl/sslsockettest.<br>java reenable javax.<br>net.<br>ssl.<br>alltests now that it is does not hang luni/src/test/java/tests/alltests.<br>java improve error messages while debugging overflow problem.<br> added new assert when debugging new rfc 4507 behavior.<br> removed knownfailure annotation for now working test case.<br> x-net/src/test/java/tests/api/javax/net/ssl/sslsessiontest.<br>java client code changes now that starthandshake implies synchronous vs android's default async handshake, remove unneeded explict calls to sslsocket.<br>starthandshake luni/src/main/java/org/apache/harmony/luni/internal/net/ww/protocol/http/httpconnection.<br>java removed ibm 1.4.<br>x codepath that involved starthandshake x-net/src/main/java/javax/net/ssl/defaulthostnameverifier.<br>java unrelated remove unneed sslsocket.<br>setuseclientmode while removing unneeded sslsocket.<br>starthandshake luni/src/main/java/org/apache/harmony/luni/internal/net/ww/protocol/http/httpconnection.<br>java removed warnings due to now missing modules in classpath run-core-tests change-id: i6e149ae259b3feccdfb0673209c85cfeb60befc8	2	-2	 11483[0] commit[0] bcfb325d5b1f9529b439cc0805a1c140521510f7[0] opensslsocket[0] handshake[0] overhaul[0] summary[0] sslsocket[0] [[Sentence=-1,1=word max, 1-5]] starthandshake[0] now[0] generalized[0] to[0] handle[0] both[0] client[0] and[0] server[0] handshaking[0] as[0] well[0] as[0] client/server[0] role[0] reversal[0] handshake_cutthrough[0] [[Sentence=-1,1=word max, 1-5]] patch[0] is[0] properly[0] integrated[0] with[0] support[0] delayed[0] handshake[0] completion[0] now[0] integrated[0] with[0] delayed[0] updates[0] to[0] session[0] cache[0] and[0] callbacks[0] to[0] handshakecompletedlisteners[0] many[0] fixes[0] to[0] sslsession[0] which[0] is[0] the[0] end[0] product[0] of[0] the[0] handshake[0] generally[0] more[0] ri[0] and[0] sslengine[0] compliant[0] behavior[0] [[Sentence=-1,1=word max, 1-5]] more[0] native[0] code[0] deletion[0] through[0] unification[0] of[0] client/server[0] handshake[0] unification[0] of[0] client/server[0] certificate[0] chain[0] verification[0] etc[0] [[Sentence=-1,1=word max, 1-5]] more[0] native[0] code[0] moved[0] from[0] various[0] openssl[0] classes[0] to[0] cleaner[0] nativecrypto[0] interfaces[0] that[0] more[0] directly[0] mirror[0] the[0] openssl[0] interfaces[0] [[Sentence=-1,1=word max, 1-5]] details[0] delay[-1] ssl_new[0] call[0] until[0] handshake[0] time[0] when[0] we[0] know[0] for[0] sure[0] whether[0] the[0] opensslsocket[0] will[0] be[0] used[0] in[0] client[0] or[0] server[0] mode[0] and[0] we[0] can[0] allocate[0] the[0] ssl_new[0] from[0] the[0] apppriate/appriate[0] client[0] or[0] server[0] ssl_ctx[0] used[0] for[0] session[0] caching[0] [[Sentence=-2,1=word max, 1-5]] now[0] that[0] no[0] ssl[0] is[0] allocated[0] for[0] an[0] opensslserversocketimpl[0] store[0] enabledprotocols[0] and[0] enabledciphersuites[0] in[0] instance[0] string[0] arrays[0] [[Sentence=-1,1=word max, 1-5]] use[0] new[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] checkenabled[0] methdods[0] for[0] argument[-1] validation[0] [[Sentence=-2,1=word max, 1-5]] opensslserversocketimpl[0] passes[0] these[0] enabled[0] arrays[0] to[0] a[0] new[0] opensslsocket[0] constructor[0] during[0] accept[0] [[Sentence=-1,1=word max, 1-5]] removed[0] finalizer[0] from[0] opensslserversocketimpl[0] since[0] it[0] no[0] longer[0] has[0] any[0] native[0] storage[0] and[0] socket[0] is[0] already[0] closed[0] by[0] plainsocketimpl[0] finalizer[0] [[Sentence=-1,1=word max, 1-5]] x[1] net/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslserversocketimpl[0] [[Sentence=-1,2=word max, 1-5]] java[0] x[1] net/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl[0] [[Sentence=-1,2=word max, 1-5]] java[0] opensslsocket[0] major[0] overhaul[0] to[0] properly[0] implement[0] handshaking[0] including[0] switching[0] client[0] and[0] server[0] roles[0] and[0] session[0] id[0] caching[0] with[0] handshake_cutthrough[0] [[Sentence=-1,1=word max, 1-5]] patch[0] [[Sentence=-1,1=word max, 1-5]] now[0] implements[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] handshakecompletedlisteners[0] for[0] properly[0] timed[0] callback[0] when[0] handshake_cutthrough[0] [[Sentence=-1,1=word max, 1-5]] patch[0] delays[0] handshake[0] completion[0] until[0] first[0] sslsocket[0] [[Sentence=-1,1=word max, 1-5]] getinputstream[0] read[0] [[Sentence=-1,1=word max, 1-5]] similar[0] enabledprotocols/enabledciphersuites[0] changes[0] as[0] opensslserversocketimpl[0] since[0] we[0] need[0] to[0] store[0] the[0] state[0] somewhere[0] other[0] than[0] an[0] openssl[0] ssl[0] struct[0] until[0] we[0] are[0] sure[0] if[0] we[0] are[0] doing[0] a[0] client[0] or[0] server[0] handshake[0] [[Sentence=-1,1=word max, 1-5]] added[0] handshake[0] completed[0] field[0] so[0] that[0] starthandshake[0] can[0] tell[0] if[0] handshake[0] was[0] completed[0] during[0] ssl_do_handshake[0] or[0] will[0] be[0] completed[0] later[0] by[0] a[0] call[0] to[0] handshakecompletedcallback[0] [[Sentence=-1,1=word max, 1-5]] handshakecompleted[0] [[Sentence=-1,1=word max, 1-5]] removed[0] nativegetsession[0] as[0] the[0] equivalent[0] value[0] is[0] now[0] returned[0] by[0] ssl_do_handshake[0] removed[0] nativecipherauthenticationmethod[0] as[0] the[0] value[0] is[0] now[0] passed[0] to[0] verifycertificatechain[0] starthandshake[0] is[0] now[0] a[0] wrapper[0] that[0] forces[0] a[0] fully[0] synchronous[0] handshake[0] starthandshake[0] boolean[0] is[0] the[0] the[0] most[0] changed[0] method[0] in[0] this[0] changelist[0] combinding[0] both[0] the[0] old[0] starthandshake[0] logic[0] but[0] also[0] the[0] opensslsocketimpl[0] [[Sentence=-1,1=word max, 1-5]] accept[0] code[0] as[0] well[0] [[Sentence=-1,1=word max, 1-5]] notable[0] differences[0] from[0] the[0] old[0] code[0] now[0] responsible[0] for[0] ssl_new[0] single[0] code[0] path[0] for[0] client/server[0] handshaking[0] dealing[0] with[0] sslsession[0] caching[0] now[0] handles[0] server[0] certificate[0] requests[0] previously[0] in[0] opensslserversocketimpl[0] since[0] a[0] client[0] can[0] request[0] to[0] act[0] like[0] a[0] server[0] and[0] therefore[0] need[0] to[0] be[0] able[0] to[0] make[0] suck[-1] demands[0] on[0] its[0] peer[0] [[Sentence=-2,1=word max, 1-5]] supports[1] turning[0] off[0] handshake_cutthrough[0] at[0] a[0] callers[0] request[0] via[0] explicit[0] call[0] to[0] starthandshake[0] certificate[0] verification[0] happens[0] during[0] an[0] upcall[0] from[0] openssl[0] during[0] ssl_do_handshake[0] to[0] verifycertificatechain[0] for[0] both[0] client[0] and[0] server[0] cases[0] [[Sentence=-1,2=word max, 1-5]] previously[0] there[0] was[0] not[0] quite[0] right[0] upcall[0] support[0] on[0] the[0] server[0] side[0] and[0] post[0] handshake[0] checking[0] on[0] the[0] client[0] which[0] did[0] not[0] allow[0] for[0] a[0] proper[0] alert[0] to[0] be[0] sent[0] to[0] the[0] peer[0] informing[0] them[0] of[0] the[0] issue[0] which[0] the[0] ri[0] and[0] sslengine[0] code[0] do[0] [[Sentence=-1,1=word max, 1-5]] similarly[0] setenablesessioncreation[0] false[0] did[0] not[0] send[0] an[0] alert[0] to[0] the[0] peer[0] as[0] the[0] ri[0] and[0] sslengine[0] code[0] in[0] the[0] client[0] case[0] [[Sentence=-1,1=word max, 1-5]] in[0] the[0] server[0] case[0] nothing[0] was[0] previously[0] done[0] [[Sentence=-1,1=word max, 1-5]] the[0] use[0] of[0] local[0] certificates[0] was[0] not[0] determined[0] from[0] introspecting[0] the[0] ssl[0] struct[0] post[0] handshake[0] [[Sentence=-1,1=word max, 1-5]] this[0] is[0] now[0] partially[0] implemented[0] and[0] will[0] be[0] completed[0] in[0] a[0] later[0] change[0] [[Sentence=-1,1=word max, 1-5]] sslsocket[0] .{shutdowninput[0] shutdownoutput}[0] are[0] now[0] restored[0] to[0] the[0] proper[0] behavior[0] of[0] throwing[0] unsupportedoperationexception[0] [[Sentence=-1,1=word max, 1-5]] gutted[0] opensslsocketimpl[0] finalizer[0] [[Sentence=-1,1=word max, 1-5]] the[0] comment[0] explains[0] in[0] detail[0] the[0] trouble[-1] of[0] having[0] the[0] finalizer[0] do[0] anything[0] more[0] than[0] touch[0] its[0] the[0] instances[0] own[0] state[0] due[0] to[0] unpredictable[0] order[0] of[0] finalization[0] and[0] the[0] future[0] possability[0] of[0] parallel[0] finalization[0] [[Sentence=-2,1=word max, 1-5]] x[1] net/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl[0] [[Sentence=-1,2=word max, 1-5]] java[0] sslsession[0] fixes[0] made[0] opensslsessionimpl[0] [[Sentence=-1,1=word max, 1-5]] sessioncontext[0] non[0] final[0] so[0] it[0] could[0] be[0] nulled[0] by[0] sslsession[0] [[Sentence=-1,1=word max, 1-5]] invalidate[-1] to[0] match[0] ri[0] behavior[0] [[Sentence=-2,1=word max, 1-5]] as[0] noted[0] in[0] abstractsessioncontext[0] discussion[0] removed[0] opensslsessionimpl[0] constructor[0] that[0] took[0] sslparameters[0] instead[0] we[0] take[0] the[0] possibly[0] null[0] localcertificates[0] directly[0] [[Sentence=-1,1=word max, 1-5]] opensslsessionimpl[0] [[Sentence=-1,1=word max, 1-5]] getlocalcertificates[0] now[0] simply[0] returns[0] the[0] localcertificates[0] member[0] variable[0] instead[0] of[0] incorrectly[0] trying[0] to[0] query[0] the[0] keymanager[0] for[0] certificates[0] that[0] may[0] not[0] have[0] been[0] used[0] [[Sentence=-1,1=word max, 1-5]] opensslsessionimpl[0] now[0] caches[0] its[0] native[0] id[0] to[0] avoid[-1] numerious[0] native[0] calls[0] but[0] also[0] now[0] provides[0] as[0] resetid[0] which[0] will[0] update[0] the[0] cache[0] when[0] a[0] delayed[0] handshake[0] happens[0] due[0] to[0] the[0] handshake_cutthrough[0] [[Sentence=-2,1=word max, 1-5]] patch[0] fixed[0] bug[0] in[0] getpeerprincipal[0] that[0] it[0] wasn't[0] calling[0] getpeercertificates[0] to[0] initialize[0] peercertificates[0] field[0] [[Sentence=-1,1=word max, 1-5]] freeimpl[0] is[0] now[0] 'public[0] static'[0] in[0] preparation[0] for[0] move[0] to[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] x[1] net/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsessionimpl[0] [[Sentence=-1,2=word max, 1-5]] java[0] the[0] old[0] sslsessionimpl[0] class[0] that[0] is[0] still[0] used[0] for[0] representing[0] the[0] invalid[-1] session[0] now[0] returns[0] isvalid[0] false[0] and[0] getprotocol[0] none[0] to[0] match[0] the[0] ri[0] [[Sentence=-2,1=word max, 1-5]] x[1] net/src/main/java/org/apache/harmony/xnet/provider/jsse/sslsessionimpl[0] [[Sentence=-1,2=word max, 1-5]] java[0] nativecrypto[0] improvements[1] adding[0] nativecrypto[0] [[Sentence=-1,2=word max, 1-5]] ssl_{get[0] set[0] clear}_mode[0] similar[0] to[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] ssl_{get[0] set[0] clear}_options[0] along[0] with[0] ssl_mode_handshake_cutthrough[0] constant[0] which[0] is[0] used[0] to[0] explicitly[0] disable/enable[0] the[0] android[0] handshake_cutthrough[0] [[Sentence=-1,1=word max, 1-5]] patch[0] behavior[0] [[Sentence=-1,1=word max, 1-5]] added[0] missing[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] ssl_clear_options[0] and[0] used[0] to[0] properly[0] implement[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] setenabledprotocols[0] [[Sentence=-1,1=word max, 1-5]] added[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] checkenabledprotocols[0] and[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] checkenabledciphersuites[0] helpers[0] to[0] implement[0] exception[0] compatability[0] with[0] the[0] ri[0] [[Sentence=-1,1=word max, 1-5]] while[0] some[0] of[0] this[0] code[0] is[0] refactored[0] from[0] existing[0] nativecrypto[0] code[0] it[0] is[0] now[0] also[0] used[0] by[0] opensslserversocketimpl[0] and[0] opensslsocketimpl[0] which[0] maintain[0] their[0] own[0] string[]s[0] of[0] what[0] is[0] enabled[0] until[0] starthandshake[0] time[0] [[Sentence=-1,1=word max, 1-5]] see[0] below[0] changed[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] findsuite[0] to[0] use[0] foreach[0] style[0] loop[0] for[0] clarity[0] [[Sentence=-1,1=word max, 1-5]] moved[0] opensslserversocketimpl[0] nativesetclientauth[0] and[0] ssl_verify_[0] constants[0] to[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] ssl_set_verify[0] added[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] ssl_set_session[0] based[0] on[0] part[0] of[0] old[0] opensslsocketimpl[0] [[Sentence=-1,1=word max, 1-5]] nativeconnect[0] added[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] ssl_set_session_creation_enabled[0] to[0] properly[0] implement[0] sslsocket[0] [[Sentence=-1,1=word max, 1-5]] setenablesessioncreation[0] false[0] which[0] uses[0] new[0] external/openssl/patches/jsse[0] [[Sentence=-1,1=word max, 1-5]] patch[0] functionality[0] [[Sentence=-1,1=word max, 1-5]] new[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] ssl_do_handshake[0] consolidates[0] opensslsocketimpl[0] .{nativeconnect[0] nativeaccept}[0] while[0] properly[0] implementing[0] sslsocket[0] [[Sentence=-1,1=word max, 1-5]] setuseclientmode[0] false[0] for[0] clients[0] and[0] sslsocket[0] [[Sentence=-1,1=word max, 1-5]] setuseclientmode[0] true[1] for[0] servers[0] [[Sentence=-1,2=word max, 1-5]] new[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] ssl_get_certificate[0] is[0] determine[0] if[0] local[0] certificate[0] requested[0] by[0] peer[0] [[Sentence=-1,1=word max, 1-5]] while[0] functional[0] currently[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] ssl_new[0] always[0] sets[0] a[0] value[0] via[0] ssl_use_certificate[0] instead[0] of[0] relying[0] on[0] a[0] callback[0] set[0] via[0] ssl_ctx_set_client_cert_cb[0] [[Sentence=-1,1=word max, 1-5]] changed[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] certificatechainverifier[0] [[Sentence=-1,1=word max, 1-5]] verifycertificatechain[0] to[0] throw[0] a[0] checked[0] certificateexception[0] to[0] match[0] trustmanager[1] .{checkservertrusted[0] checkclienttrusted}[0] [[Sentence=-1,2=word max, 1-5]] it[0] also[0] takes[0] an[0] authmethod[0] so[0] avoid[-1] the[0] need[0] to[0] call[0] the[0] old[0] opensslsocketimpl[0] [[Sentence=-2,1=word max, 1-5]] nativecipherauthenticationmethod[0] [[Sentence=-1,1=word max, 1-5]] added[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] handshakecompletedcallback[0] which[0] has[0] its[0] handshakecompleted[0] method[0] called[0] from[0] openssl[0] when[0] the[0] now[0] delayed[0] handshake_cutthrough[0] [[Sentence=-1,1=word max, 1-5]] patch[0] handshake[0] is[0] completed[0] so[0] sslsession[0] caching[0] can[0] be[0] delayed[0] until[0] a[0] session[0] id[0] is[0] available[0] and[0] to[0] provide[0] a[0] better[0] time[0] for[0] handshakecompletedlisteners[0] to[0] be[0] notified[0] [[Sentence=-1,1=word max, 1-5]] x[1] net/src/main/java/org/apache/harmony/xnet/provider/jsse/nativecrypto[0] [[Sentence=-1,2=word max, 1-5]] java[0] x[1] net/src/main/native/org_apache_harmony_xnet_provider_jsse_nativecrypto[0] [[Sentence=-1,2=word max, 1-5]] cpp/cp[0] some[0] other[0] changes[0] specific[0] to[0] the[0] naitve[0] side[0] of[0] the[0] code[0] added[0] jnitrace[0] calls[0] enabled[0] at[0] compile[0] time[0] with[0] jni_trace[0] for[0] future[0] debugging[0] [[Sentence=-1,1=word max, 1-5]] throw[0] sslexception[0] subclass[0] of[0] ioexception[0] instead[0] ioexception[0] itself[0] for[0] better[0] ri[0] compatability[0] x[1] net/src/main/native/org_apache_harmony_xnet_provider_jsse_nativecrypto[0] [[Sentence=-1,2=word max, 1-5]] cpp/cp[0] changed[0] from[0] old[0] struct[0] app_data[0] to[0] new[0] class[0] appdata[0] at[0] enh's[0] request[0] remove[0] dubious[-1] usage[0] of[0] sslparameters[0] within[0] abstractsessioncontext[0] to[0] pass[0] through[0] to[0] opensslsessionimpl[0] constructor[0] for[0] use[0] in[0] calling[0] getlocalcertificates[0] for[0] sessions[0] created[0] from[0] a[0] byte[0] array[0] with[0] abstractsessioncontext[0] [[Sentence=-2,1=word max, 1-5]] tosession[0] [[Sentence=-1,1=word max, 1-5]] our[0] abstractsessioncontext[0] [[Sentence=-1,1=word max, 1-5]] tobytes[0] doesn't[0] currently[0] include[0] the[0] local[0] certificates[0] in[0] its[0] output[0] so[0] it[0] cannot[0] be[0] expected[0] to[0] have[0] in[0] tosession[0] [[Sentence=-1,1=word max, 1-5]] x[1] net/src/main/java/org/apache/harmony/xnet/provider/jsse/abstractsessioncontext[0] [[Sentence=-1,2=word max, 1-5]] java[0] x[1] net/src/main/java/org/apache/harmony/xnet/provider/jsse/clientsessioncontext[0] [[Sentence=-1,2=word max, 1-5]] java[0] x[1] net/src/main/java/org/apache/harmony/xnet/provider/jsse/serversessioncontext[0] [[Sentence=-1,2=word max, 1-5]] java[0] x[1] net/src/main/java/org/apache/harmony/xnet/provider/jsse/sslparameters[0] [[Sentence=-1,2=word max, 1-5]] java[0] test[0] maintenance[0] openssl[0] 1[0] .0[0] .0[0] adds[0] support[0] for[0] rfc[0] 4507[0] session[0] tickets[0] which[0] remove[0] the[0] need[0] for[0] server[0] side[0] session[0] state[0] [[Sentence=-1,1=word max, 1-5]] these[0] tests[0] needed[0] to[0] be[0] updated[0] for[0] this[0] new[0] behavior[0] [[Sentence=-1,1=word max, 1-5]] if[0] is_ri[0] is[0] true[1] they[0] still[0] follow[0] the[0] old[0] behavior[0] [[Sentence=-1,2=word max, 1-5]] luni/src/test/java/javax/net/ssl/sslsessioncontexttest[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/javax/net/ssl/sslsessiontest[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/javax/net/ssl/sslsockettest[0] [[Sentence=-1,1=word max, 1-5]] java[0] update[0] knownfailures[0] and[0] add[0] specific[0] comments[0] at[0] point[0] of[0] failure[0] about[0] what[0] remains[0] to[0] be[0] fixed[0] [[Sentence=-1,1=word max, 1-5]] luni/src/test/java/javax/net/ssl/sslsessiontest[0] [[Sentence=-1,1=word max, 1-5]] java[0] added[0] tests[0] to[0] cover[0] the[0] use[0] of[0] standard[0] cipher[0] suite[0] names[0] [[Sentence=-1,1=word max, 1-5]] historically[0] android[0] has[0] used[0] openssl[0] string[0] constants[0] for[0] cipher[0] suite[0] names[0] but[0] jsse[0] actually[0] specifies[0] supported[1] and[0] expected[0] names[0] [[Sentence=-1,2=word max, 1-5]] luni/src/test/java/javax/net/ssl/sslsocketfactorytest[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/javax/net/ssl/sslsockettest[0] [[Sentence=-1,1=word max, 1-5]] java[0] create[0] new[0] support/src/test/java/javax/net/ssl[0] with[0] old[0] helper[0] support[0] code[0] pulled[0] from[0] javax[0] [[Sentence=-1,1=word max, 1-5]] net[0] [[Sentence=-1,1=word max, 1-5]] ssl[0] tests[0] sslcontexttest[0] [[Sentence=-1,1=word max, 1-5]] helper[0] testsslcontext[0] sslsockettest[0] [[Sentence=-1,1=word max, 1-5]] helper[0] testsslsocketpair[0] sslsessiontest[0] [[Sentence=-1,1=word max, 1-5]] helper[0] testsslsessions[0] also[0] added[0] new[0] standardnames[0] here[0] which[0] contains[0] a[0] collection[0] of[0] expected[0] constants[0] for[0] test[0] validation[0] [[Sentence=-1,1=word max, 1-5]] luni/src/test/java/javax/net/ssl/sslcontexttest[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/javax/net/ssl/sslsockettest[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/javax/net/ssl/sslsessiontest[0] [[Sentence=-1,1=word max, 1-5]] java[0] support/src/test/java/javax/net/ssl/testsslcontext[0] [[Sentence=-1,1=word max, 1-5]] java[0] support/src/test/java/javax/net/ssl/testsslsocketpair[0] [[Sentence=-1,1=word max, 1-5]] java[0] support/src/test/java/javax/net/ssl/testsslsessions[0] [[Sentence=-1,1=word max, 1-5]] java[0] support/src/test/java/javax/net/ssl/standardnames[0] [[Sentence=-1,1=word max, 1-5]] java[0] removed[0] some[0] now[0] fixed[0] knownfailures[0] and[0] unneeded[0] [[Sentence=-1,1=word max, 1-5]] is_ri[0] code[0] [[Sentence=-1,1=word max, 1-5]] marked[0] some[0] [un]knownfailures[0] where[0] exceptions[0] are[0] thrown[0] and[0] visible[0] in[0] the[0] output[0] but[0] aren't[0] correctly[0] causing[0] the[0] test[0] to[0] fail[0] [[Sentence=-1,1=word max, 1-5]] fixed[0] assertnonnull[0] to[0] asserttrue[0] in[0] test_sslsockettest_test_create[0] [[Sentence=-1,1=word max, 1-5]] added[0] stress_test_sslsockettest_test_create[-1] to[0] track[0] down[0] test[0] flakiness[0] leading[0] to[0] rewrite[0] of[0] sslsocket[0] finalization[0] [[Sentence=-2,1=word max, 1-5]] luni/src/test/java/javax/net/ssl/sslsockettest[0] [[Sentence=-1,1=word max, 1-5]] java[0] reenable[0] javax[0] [[Sentence=-1,1=word max, 1-5]] net[0] [[Sentence=-1,1=word max, 1-5]] ssl[0] [[Sentence=-1,1=word max, 1-5]] alltests[0] now[0] that[0] it[0] is[0] does[0] not[0] hang[-1][NegatedDueToPreviousWord] luni/src/test/java/tests/alltests[0] [[Sentence=-1,2=word max, 1-5]] java[0] improve[1] error[0] messages[0] while[0] debugging[0] overflow[0] problem[-1] [[Sentence=-2,2=word max, 1-5]] added[0] new[0] assert[0] when[0] debugging[0] new[0] rfc[0] 4507[0] behavior[0] [[Sentence=-1,1=word max, 1-5]] removed[0] knownfailure[0] annotation[0] for[0] now[0] working[0] test[0] case[0] [[Sentence=-1,1=word max, 1-5]] x[1] net/src/test/java/tests/api/javax/net/ssl/sslsessiontest[0] [[Sentence=-1,2=word max, 1-5]] java[0] client[0] code[0] changes[0] now[0] that[0] starthandshake[0] implies[0] synchronous[0] vs[0] android's[0] default[-1] async[0] handshake[0] remove[0] unneeded[0] explict[0] calls[0] to[0] sslsocket[0] [[Sentence=-2,1=word max, 1-5]] starthandshake[0] luni/src/main/java/org/apache/harmony/luni/internal/net/www/protocol/http/httpconnection/luni/src/main/java/org/apache/harmony/luni/internal/net/ww/protocol/http/httpconnection[0] [[Sentence=-1,1=word max, 1-5]] java[0] removed[0] ibm[0] 1[0] .4[0] [[Sentence=-1,1=word max, 1-5]] x[1] codepath[0] that[0] involved[0] starthandshake[0] x[1] net/src/main/java/javax/net/ssl/defaulthostnameverifier[0] [[Sentence=-1,2=word max, 1-5]] java[0] unrelated[0] remove[0] unneed[0] sslsocket[0] [[Sentence=-1,1=word max, 1-5]] setuseclientmode[0] while[0] removing[0] unneeded[0] sslsocket[0] [[Sentence=-1,1=word max, 1-5]] starthandshake[0] luni/src/main/java/org/apache/harmony/luni/internal/net/www/protocol/http/httpconnection/luni/src/main/java/org/apache/harmony/luni/internal/net/ww/protocol/http/httpconnection[0] [[Sentence=-1,1=word max, 1-5]] java[0] removed[0] warnings[0] due[0] to[0] now[0] missing[0] modules[0] in[0] classpath[0] run[0] core[0] tests[0] change[0] id[0] i6e149ae259b3feccdfb0673209c85cfeb60befc8[0] [[Sentence=-1,1=word max, 1-5]][[[2,-2 max of sentences]]]
