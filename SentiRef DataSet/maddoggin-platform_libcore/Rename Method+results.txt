Rename Method	Translation	Positive	Negative	EmotionRationale
1842 commit 7072b0706a63c3d1f15c784f937a635289f9c0cd merge: e3cde43 5bdb797 am 5bdb797e: merge "refactoring in preparation for nio2 changes." * commit '5bdb797e4f545c6b16f44523cdab2500460f290d': refactoring in preparation for nio2 changes. 	1842 commit 7072b0706a63c3d1f15c784f937a635289f9c0cd merge: e3cde43 5bdb797 am 5bdb797e: merge "refactoring in preparation for nio2 changes.<br> * commit '5bdb797e4f545c6b16f44523cdab2500460f290d': refactoring in preparation for nio2 changes.	1	-1	 1842[0] commit[0] 7072b0706a63c3d1f15c784f937a635289f9c0cd[0] merge[0] e3cde43[0] 5bdb797[0] am[0] 5bdb797e[0] merge[0] refactoring[0] in[0] preparation[0] for[0] nio2[0] changes[0] [[Sentence=-1,1=word max, 1-5]] commit[0] '5bdb797e4f545c6b16f44523cdab2500460f290d'[0] refactoring[0] in[0] preparation[0] for[0] nio2[0] changes[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
2193 commit 2d96b3f6884966d6f0f920bb305dcbdad107d9a1 merge: a5a51da 4370dc0 am 4370dc02: am 5bdb797e: merge "refactoring in preparation for nio2 changes." * commit '4370dc026c3c9f679f858ee6bbe7b7f56c290ca7': refactoring in preparation for nio2 changes. 	2193 commit 2d96b3f6884966d6f0f920bb305dcbdad107d9a1 merge: a5a51da 4370dc0 am 4370dc02: am 5bdb797e: merge "refactoring in preparation for nio2 changes.<br> * commit '4370dc026c3c9f679f858ee6bbe7b7f56c290ca7': refactoring in preparation for nio2 changes.	1	-1	 2193[0] commit[0] 2d96b3f6884966d6f0f920bb305dcbdad107d9a1[0] merge[0] a5a51da[0] 4370dc0[0] am[0] 4370dc02[0] am[0] 5bdb797e[0] merge[0] refactoring[0] in[0] preparation[0] for[0] nio2[0] changes[0] [[Sentence=-1,1=word max, 1-5]] commit[0] '4370dc026c3c9f679f858ee6bbe7b7f56c290ca7'[0] refactoring[0] in[0] preparation[0] for[0] nio2[0] changes[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
2197 commit 4370dc026c3c9f679f858ee6bbe7b7f56c290ca7 merge: ba94d0c 5bdb797 am 5bdb797e: merge "refactoring in preparation for nio2 changes." * commit '5bdb797e4f545c6b16f44523cdab2500460f290d': refactoring in preparation for nio2 changes. 	2197 commit 4370dc026c3c9f679f858ee6bbe7b7f56c290ca7 merge: ba94d0c 5bdb797 am 5bdb797e: merge "refactoring in preparation for nio2 changes.<br> * commit '5bdb797e4f545c6b16f44523cdab2500460f290d': refactoring in preparation for nio2 changes.	1	-1	 2197[0] commit[0] 4370dc026c3c9f679f858ee6bbe7b7f56c290ca7[0] merge[0] ba94d0c[0] 5bdb797[0] am[0] 5bdb797e[0] merge[0] refactoring[0] in[0] preparation[0] for[0] nio2[0] changes[0] [[Sentence=-1,1=word max, 1-5]] commit[0] '5bdb797e4f545c6b16f44523cdab2500460f290d'[0] refactoring[0] in[0] preparation[0] for[0] nio2[0] changes[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
2201 commit 5bdb797e4f545c6b16f44523cdab2500460f290d merge: e528b49 933fbbf merge "refactoring in preparation for nio2 changes." 	2201 commit 5bdb797e4f545c6b16f44523cdab2500460f290d merge: e528b49 933fbbf merge "refactoring in preparation for nio2 changes.	1	-1	 2201[0] commit[0] 5bdb797e4f545c6b16f44523cdab2500460f290d[0] merge[0] e528b49[0] 933fbbf[0] merge[0] refactoring[0] in[0] preparation[0] for[0] nio2[0] changes[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
2204 commit 933fbbf606268eec9fc430632b8bca7002a833b3 refactoring in preparation for nio2 changes. making the various socket/channel classes more consistent with each other for synchronizing state between the channel, socket and the os. this is in preparation for networkchannel.bind(). synchronizing state revealed a test that relied upon a socket from a channel not reporting isconnected() properly after a connect(). tests have been updated. reading the local address back from the os revealed that android is using ipv6 and reports the string equivalent of ipv4's 0.0.0.0 as "::". updated a test that was relying on the string form. calling connect() twice on a datagramsocket appears inconsistent with itself and channel and other sockets. a pure datagramsocket switches over to the new remote address. i have changed the channel-backed datagramsocket to throw an illegalstateexception exception, and have created a bug to discuss making the calls more consistent. socket has been modified to avoid using the address field to store the local address after a bind(). this field is documented as holding the remote address, not the local. changed implementation of socketchannelimpl.socket().getinputstream() and socketchannelimpl.socket().getoutputstream() to use the one that is implemented by socket and not a custom nio-based implementation. the use of nio provided two parallel implementations for the same thing. this change alters behavior when attempting to read zero bytes and when a channel is in non-blocking mode: now it throws illegalblockingmodeexception rather than arrayindexoutofboundsexception. the tests have been updated. various tidying up changes to introduce @override, remove unnecessarily initialized local variables, fields, semi-colons, javadocs and imports. added close() calls for objects during tests that were cluttering the logs. modified iobridge.connect() to be void. adjusted socketchannelimpl accordingly and tidied up impossible cases. modified socketchannel.connect() so that it always returns false in non-blocking mode. this looks like an existing bug: it would previously have returned true, even though the connection was potentially still pending. tests have been added. also tidied up socketchannelimpl.finishconnect() - it was potentially resetting the isbound state. change-id: ic7943615b4b763f77e74397e0e91a62edc7d7017 bug: 12464155 	2204 commit 933fbbf606268eec9fc430632b8bca7002a833b3 refactoring in preparation for nio2 changes.<br> making the various socket/channel classes more consistent with each other for synchronizing state between the channel, socket and the os.<br> this is in preparation for networkchannel.<br>bind(<br> synchronizing state revealed a test that relied upon a socket from a channel not reporting isconnected( properly after a connect(<br> tests have been updated.<br> reading the local address back from the os revealed that android is using ipv6 and reports the string equivalent of ipv4's 0.0.0.0 as "<br> updated a test that was relying on the string form.<br> calling connect( twice on a datagramsocket appears inconsistent with itself and channel and other sockets.<br> a pure datagramsocket switches over to the new remote address.<br> i have changed the channel-backed datagramsocket to throw an illegalstateexception exception, and have created a bug to discuss making the calls more consistent.<br> socket has been modified to avoid using the address field to store the local address after a bind(<br> this field is documented as holding the remote address, not the local.<br> changed implementation of socketchannelimpl.<br>socket(<br>getinputstream( and socketchannelimpl.<br>socket(<br>getoutputstream( to use the one that is implemented by socket and not a custom nio-based implementation.<br> the use of nio provided two parallel implementations for the same thing.<br> this change alters behavior when attempting to read zero bytes and when a channel is in non-blocking mode: now it throws illegalblockingmodeexception rather than arrayindexoutofboundsexception.<br> the tests have been updated.<br> various tidying up changes to introduce @override, remove unnecessarily initialized local variables, fields, semi-colons, javadocs and imports.<br> added close( calls for objects during tests that were cluttering the logs.<br> modified iobridge.<br>connect( to be void.<br> adjusted socketchannelimpl accordingly and tidied up impossible cases.<br> modified socketchannel.<br>connect( so that it always returns false in non-blocking mode.<br> this looks like an existing bug: it would previously have returned true, even though the connection was potentially still pending.<br> tests have been added.<br> also tidied up socketchannelimpl.<br>finishconnect( - it was potentially resetting the isbound state.<br> change-id: ic7943615b4b763f77e74397e0e91a62edc7d7017 bug: 12464155	2	-2	 2204[0] commit[0] 933fbbf606268eec9fc430632b8bca7002a833b3[0] refactoring[0] in[0] preparation[0] for[0] nio2[0] changes[0] [[Sentence=-1,1=word max, 1-5]] making[0] the[0] various[0] socket/channel[0] classes[0] more[0] consistent[0] with[0] each[0] other[0] for[0] synchronizing[0] state[0] between[0] the[0] channel[0] socket[0] and[0] the[0] os[0] [[Sentence=-1,1=word max, 1-5]] this[0] is[0] in[0] preparation[0] for[0] networkchannel[0] [[Sentence=-1,1=word max, 1-5]] bind[0] [[Sentence=-1,1=word max, 1-5]] synchronizing[0] state[0] revealed[0] a[0] test[0] that[0] relied[0] upon[0] a[0] socket[0] from[0] a[0] channel[0] not[0] reporting[0] isconnected[0] properly[0] after[0] a[0] connect[0] [[Sentence=-1,1=word max, 1-5]] tests[0] have[0] been[0] updated[0] [[Sentence=-1,1=word max, 1-5]] reading[0] the[0] local[0] address[0] back[0] from[0] the[0] os[0] revealed[0] that[0] android[0] is[0] using[0] ipv6[0] and[0] reports[0] the[0] string[0] equivalent[0] of[0] ipv4's[0] 0[0] .0[0] .0[0] .0[0] as[0] [[Sentence=-1,1=word max, 1-5]] updated[0] a[0] test[0] that[0] was[0] relying[0] on[0] the[0] string[0] form[0] [[Sentence=-1,1=word max, 1-5]] calling[0] connect[0] twice[0] on[0] a[0] datagramsocket[0] appears[0] inconsistent[0] with[0] itself[0] and[0] channel[0] and[0] other[0] sockets[0] [[Sentence=-1,1=word max, 1-5]] a[0] pure[0] datagramsocket[0] switches[0] over[0] to[0] the[0] new[0] remote[0] address[0] [[Sentence=-1,1=word max, 1-5]] i[0] have[0] changed[0] the[0] channel[0] backed[0] datagramsocket[0] to[0] throw[0] an[0] illegalstateexception[0] exception[0] and[0] have[0] created[0] a[0] bug[0] to[0] discuss[0] making[0] the[0] calls[0] more[0] consistent[0] [[Sentence=-1,1=word max, 1-5]] socket[0] has[0] been[0] modified[0] to[0] avoid[-1] using[0] the[0] address[0] field[0] to[0] store[0] the[0] local[0] address[0] after[0] a[0] bind[0] [[Sentence=-2,1=word max, 1-5]] this[0] field[0] is[0] documented[0] as[0] holding[0] the[0] remote[0] address[0] not[0] the[0] local[0] [[Sentence=-1,1=word max, 1-5]] changed[0] implementation[0] of[0] socketchannelimpl[0] [[Sentence=-1,1=word max, 1-5]] socket[0] [[Sentence=-1,1=word max, 1-5]] getinputstream[0] and[0] socketchannelimpl[0] [[Sentence=-1,1=word max, 1-5]] socket[0] [[Sentence=-1,1=word max, 1-5]] getoutputstream[0] to[0] use[0] the[0] one[0] that[0] is[0] implemented[0] by[0] socket[0] and[0] not[0] a[0] custom[0] nio[0] based[0] implementation[0] [[Sentence=-1,1=word max, 1-5]] the[0] use[0] of[0] nio[0] provided[0] two[0] parallel[0] implementations[0] for[0] the[0] same[0] thing[0] [[Sentence=-1,1=word max, 1-5]] this[0] change[0] alters[0] behavior[0] when[0] attempting[0] to[0] read[0] zero[0] bytes[0] and[0] when[0] a[0] channel[0] is[0] in[0] non[0] blocking[0] mode[0] now[0] it[0] throws[0] illegalblockingmodeexception[0] rather[0] than[0] arrayindexoutofboundsexception[0] [[Sentence=-1,1=word max, 1-5]] the[0] tests[0] have[0] been[0] updated[0] [[Sentence=-1,1=word max, 1-5]] various[0] tidying[0] up[0] changes[0] to[0] introduce[0] @override[0] remove[0] unnecessarily[-1] initialized[0] local[0] variables[0] fields[0] semi[0] colons[0] javadocs[0] and[0] imports[0] [[Sentence=-2,1=word max, 1-5]] added[0] close[0] calls[0] for[0] objects[0] during[0] tests[0] that[0] were[0] cluttering[-1] the[0] logs[0] [[Sentence=-2,1=word max, 1-5]] modified[0] iobridge[0] [[Sentence=-1,1=word max, 1-5]] connect[0] to[0] be[0] void[0] [[Sentence=-1,1=word max, 1-5]] adjusted[0] socketchannelimpl[0] accordingly[0] and[0] tidied[0] up[0] impossible[0] cases[0] [[Sentence=-1,1=word max, 1-5]] modified[0] socketchannel[0] [[Sentence=-1,1=word max, 1-5]] connect[0] so[0] that[0] it[0] always[0] returns[0] false[0] in[0] non[0] blocking[0] mode[0] [[Sentence=-1,1=word max, 1-5]] this[0] looks[0] like[0] an[0] existing[0] bug[0] it[0] would[0] previously[0] have[0] returned[0] true[1] even[0] though[0] the[0] connection[0] was[0] potentially[0] still[0] pending[0] [[Sentence=-1,2=word max, 1-5]] tests[0] have[0] been[0] added[0] [[Sentence=-1,1=word max, 1-5]] also[0] tidied[0] up[0] socketchannelimpl[0] [[Sentence=-1,1=word max, 1-5]] finishconnect[0] it[0] was[0] potentially[0] resetting[0] the[0] isbound[0] state[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] ic7943615b4b763f77e74397e0e91a62edc7d7017[0] bug[0] 12464155[0] [[Sentence=-1,1=word max, 1-5]][[[2,-2 max of sentences]]]
8542 commit ce1150d9897bd5baf66de4a8db132afce18be15a merge: 1c039d7 953df61 merge "refactor httpurlconnection implementation." into dalvik-dev 	8542 commit ce1150d9897bd5baf66de4a8db132afce18be15a merge: 1c039d7 953df61 merge "refactor httpurlconnection implementation.<br> into dalvik-dev	1	-1	 8542[0] commit[0] ce1150d9897bd5baf66de4a8db132afce18be15a[0] merge[0] 1c039d7[0] 953df61[0] merge[0] refactor[0] httpurlconnection[0] implementation[0] [[Sentence=-1,1=word max, 1-5]] into[0] dalvik[0] dev[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
8543 commit 953df613522e12a418cb7cb73248594d6c9f53d4 refactor httpurlconnection implementation. break httpurlconnectionimpl into two parts: the part that implements the java api (that follows redirects etc.) and the part that speaks http. the http part is called httpengine, and it can only be used for a single http request. this makes it easier to set request properties that only apply to a single socket request. tests for 'vary', 'content-location' and warnings. for simplicity of implementation i've chosen not to support 'vary' at this time. the 'content-location' header doesn't require any work from the cache. warnings are ugly but allow the caller to identify when the cache results may be problematic. also breaking httpresponsecache's dependency on httpurlconnectionimpl so it can be tested on the ri. change-id: idbabb51251f479c2cdea4e0fceb029bfd07182be http://b/3180373 	8543 commit 953df613522e12a418cb7cb73248594d6c9f53d4 refactor httpurlconnection implementation.<br> break httpurlconnectionimpl into two parts: the part that implements the java api (that follows redirects etc.<br> and the part that speaks http.<br> the http part is called httpengine, and it can only be used for a single http request.<br> this makes it easier to set request properties that only apply to a single socket request.<br> tests for 'vary', 'content-location' and warnings.<br> for simplicity of implementation i've chosen not to support 'vary' at this time.<br> the 'content-location' header doesn't require any work from the cache.<br> warnings are ugly but allow the caller to identify when the cache results may be problematic.<br> also breaking httpresponsecache's dependency on httpurlconnectionimpl so it can be tested on the ri.<br> change-id: idbabb51251f479c2cdea4e0fceb029bfd07182be http://b/3180373	1	-3	 8543[0] commit[0] 953df613522e12a418cb7cb73248594d6c9f53d4[0] refactor[0] httpurlconnection[0] implementation[0] [[Sentence=-1,1=word max, 1-5]] break[0] httpurlconnectionimpl[0] into[0] two[0] parts[0] the[0] part[0] that[0] implements[0] the[0] java[0] api[0] that[0] follows[0] redirects[0] etc[0] [[Sentence=-1,1=word max, 1-5]] and[0] the[0] part[0] that[0] speaks[0] http[0] [[Sentence=-1,1=word max, 1-5]] the[0] http[0] part[0] is[0] called[0] httpengine[0] and[0] it[0] can[0] only[0] be[0] used[0] for[0] a[0] single[0] http[0] request[0] [[Sentence=-1,1=word max, 1-5]] this[0] makes[0] it[0] easier[0] to[0] set[0] request[0] properties[0] that[0] only[0] apply[0] to[0] a[0] single[0] socket[0] request[0] [[Sentence=-1,1=word max, 1-5]] tests[0] for[0] 'vary'[0] 'content[0] location'[0] and[0] warnings[0] [[Sentence=-1,1=word max, 1-5]] for[0] simplicity[0] of[0] implementation[0] i've[0] chosen[0] not[0] to[0] support[0] 'vary'[0] at[0] this[0] time[0] [[Sentence=-1,1=word max, 1-5]] the[0] 'content[0] location'[0] header[0] doesn't[0] require[0] any[0] work[0] from[0] the[0] cache[0] [[Sentence=-1,1=word max, 1-5]] warnings[0] are[0] ugly[-2] but[0] allow[0] the[0] caller[0] to[0] identify[0] when[0] the[0] cache[0] results[0] may[0] be[0] problematic[-1] [[Sentence=-3,1=word max, 1-5]] also[0] breaking[0] httpresponsecache's[0] dependency[0] on[0] httpurlconnectionimpl[0] so[0] it[0] can[0] be[0] tested[0] on[0] the[0] ri[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] idbabb51251f479c2cdea4e0fceb029bfd07182be[0] http[0] ://b/3180373[0] [[Sentence=-1,1=word max, 1-5]][[[1,-3 max of sentences]]]
8650 commit 64ce5d1c72204de8e58da45ddf1a57ba8b70cec6 merge: d72e8da 50ddd34 merge "reduce chance of naming collision for thread @hide methods." into dalvik-dev 	8650 commit 64ce5d1c72204de8e58da45ddf1a57ba8b70cec6 merge: d72e8da 50dd34 merge "reduce chance of naming collision for thread @hide methods.<br> into dalvik-dev	1	-2	 8650[0] commit[0] 64ce5d1c72204de8e58da45ddf1a57ba8b70cec6[0] merge[0] d72e8da[0] 50ddd34/50dd34[0] merge[0] reduce[0] chance[0] of[0] naming[0] collision[-1] for[0] thread[0] @hide[0] methods[0] [[Sentence=-2,1=word max, 1-5]] into[0] dalvik[0] dev[0] [[Sentence=-1,1=word max, 1-5]][[[1,-2 max of sentences]]]
8656 commit 50ddd34d1e1228c37ac45b43934cc114376f3667 reduce chance of naming collision for thread @hide methods. change-id: i80bdf4ede72b112eb1cae89c6e53f6fcf65b2acb http://code.google.com/p/android/issues/detail?id 15388 	8656 commit 50dd34d1e1228c37ac45b43934cc114376f3667 reduce chance of naming collision for thread @hide methods.<br> change-id: i80bdf4ede72b112eb1cae89c6e53f6fcf65b2acb http://code.<br>google.<br>com/p/android/issues/detail?<br>id 15388	1	-2	 8656[0] commit[0] 50ddd34d1e1228c37ac45b43934cc114376f3667/50dd34d1e1228c37ac45b43934cc114376f3667[0] reduce[0] chance[0] of[0] naming[0] collision[-1] for[0] thread[0] @hide[0] methods[0] [[Sentence=-2,1=word max, 1-5]] change[0] id[0] i80bdf4ede72b112eb1cae89c6e53f6fcf65b2acb[0] http[0] ://code[0] [[Sentence=-1,1=word max, 1-5]] google[0] [[Sentence=-1,1=word max, 1-5]] com/p/android/issues/detail[0] [[Sentence=-1,1=word max, 1-5]] id[0] 15388[0] [[Sentence=-1,1=word max, 1-5]][[[1,-2 max of sentences]]]
9606 commit d7fd1b88b89ca762afe5609d84a8eedfb611cbe1 adding binary hprof support to samplingprofiler samplingprofiler refactored: - hprofdata is now a separate class, the common data structure - samplingprofiler uses hprofdata as its runtime format - asciihprofwriter refactored from profiler, takes an hprofdata - new binaryhprofwriter to output hprofdata in binary format - new binaryhprofreader can recreate hprofdata from binary file - new hprofbinarytoascii command line tool to convert formats dalvik/src/main/java/dalvik/system/samplingprofiler.java samplingprofilertest expanded to cover new hprofdata class directly. includes testing of conversion from various hand constructed hprofdata to ascii and binary formats as well as from binary back to hprofdata with out loss of data. dalvik/src/test/java/dalvik/system/samplingprofilertest.java change-id: i6fe06f5dbdbf2f0bf2de228d9761f84d75290ba7 	9606 commit d7fd1b88b89ca762afe5609d84a8eedfb611cbe1 adding binary hprof support to samplingprofiler samplingprofiler refactored: - hprofdata is now a separate class, the common data structure - samplingprofiler uses hprofdata as its runtime format - ascihprofwriter refactored from profiler, takes an hprofdata - new binaryhprofwriter to output hprofdata in binary format - new binaryhprofreader can recreate hprofdata from binary file - new hprofbinarytoasci command line tool to convert formats dalvik/src/main/java/dalvik/system/samplingprofiler.<br>java samplingprofilertest expanded to cover new hprofdata class directly.<br> includes testing of conversion from various hand constructed hprofdata to asci and binary formats as well as from binary back to hprofdata with out loss of data.<br> dalvik/src/test/java/dalvik/system/samplingprofilertest.<br>java change-id: i6fe06f5dbdbf2f0bf2de228d9761f84d75290ba7	1	-3	 9606[0] commit[0] d7fd1b88b89ca762afe5609d84a8eedfb611cbe1[0] adding[0] binary[0] hprof[0] support[0] to[0] samplingprofiler[0] samplingprofiler[0] refactored[0] hprofdata[0] is[0] now[0] a[0] separate[0] class[0] the[0] common[0] data[0] structure[0] samplingprofiler[0] uses[0] hprofdata[0] as[0] its[0] runtime[0] format[0] asciihprofwriter/ascihprofwriter[0] refactored[0] from[0] profiler[0] takes[0] an[0] hprofdata[0] new[0] binaryhprofwriter[0] to[0] output[0] hprofdata[0] in[0] binary[0] format[0] new[0] binaryhprofreader[0] can[0] recreate[0] hprofdata[0] from[0] binary[0] file[0] new[0] hprofbinarytoascii/hprofbinarytoasci[0] command[0] line[0] tool[0] to[0] convert[0] formats[0] dalvik/src/main/java/dalvik/system/samplingprofiler[0] [[Sentence=-1,1=word max, 1-5]] java[0] samplingprofilertest[0] expanded[0] to[0] cover[0] new[0] hprofdata[0] class[0] directly[0] [[Sentence=-1,1=word max, 1-5]] includes[0] testing[0] of[0] conversion[0] from[0] various[0] hand[0] constructed[0] hprofdata[0] to[0] ascii/asci[0] and[0] binary[0] formats[0] as[0] well[0] as[0] from[0] binary[0] back[0] to[0] hprofdata[0] with[0] out[0] loss[-2] of[0] data[0] [[Sentence=-3,1=word max, 1-5]] dalvik/src/test/java/dalvik/system/samplingprofilertest[0] [[Sentence=-1,1=word max, 1-5]] java[0] change[0] id[0] i6fe06f5dbdbf2f0bf2de228d9761f84d75290ba7[0] [[Sentence=-1,1=word max, 1-5]][[[1,-3 max of sentences]]]
9822 commit 4ae3fd787741bfe1b808f447dcb0785250024119 elliptic crypto support for opensslsocketimpl summary: - enable elliptic crypto support for openssl based sslsocket instances - more ri compliant usage of key types, client auth types, and server auth types - steps toward tls_empty_renegotiation_info_scsv support, currently test updates details: elliptic curve changes ciphersuite updates for ec - adding key_exchange_ec* and corresponding ciphersuites updated isanonymous, getkeytype (now renamed getserverkeytype) to handle new ec cases. added new getauthtype for use by checkservertrusted callers. - restructured code to handle two suites_by_code_* arrays - remove key_exchange_dh_* definitions which unused because the corresponding ciphersuites were previously disabled. - changed aes ciphersuites definitions to use "_cbc" to match other definitions. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/ciphersuite.java openssl ec - nativecrypto now registers tls_ec_* cipher suites and has update default list - improved auth type arguments to checkclienttrusted/checkservertrusted - nativecrypto support for emphemeral ec keys luni/src/main/java/org/apache/harmony/xnet/provider/jsse/nativecrypto.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl.java luni/src/main/native/nativecrypto.cpp non-openssl ssl/tls cleanups - cleanup around code trying to cope with diffiehellman vs dh since either should work. - changed client to use new ciphersuite.getauthtype shared with nativecrypto implementation - changed server to use ciphersuite.getkeytype luni/src/main/java/org/apache/harmony/xnet/provider/jsse/clienthandshakeimpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/handshakeprotocol.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/keymanagerimpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/serverhandshakeimpl.java consolidate certificaterequesttype code into ciphersuite so that its shared between java and openssl implementations. this includes the key_type_ string constants, tls_ct_* byte constants and the 'string keytype(byte)' (now renamed getclientkeytype) code that depends on them. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/certificaterequest.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/ciphersuite.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/clienthandshakeimpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/nativecrypto.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslserversocketimpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/serverhandshakeimpl.java tests differentiate between supported list of cipher suites openssl-based sslsocket and sslengine based, since the sslengine code does not support ec. luni/src/test/java/libcore/javax/net/ssl/sslenginetest.java luni/src/test/java/libcore/javax/net/ssl/sslsockettest.java added testing for expected default cipher suites. before we just ensured the values were valid. luni/src/test/java/libcore/javax/net/ssl/sslsocketfactorytest.java support/src/test/java/libcore/java/security/standardnames.java updated to handle new ec cipher suites codes. added test for new getclientkeytype. luni/src/test/java/org/apache/harmony/xnet/provider/jsse/ciphersuitetest.java better use of "standard names" particularly to correctly deal with the subtle differences between key types, client auth types, and server auth types. testkeymanager and testtrustmanager now verify the values they are passed are acceptable. support/src/test/java/libcore/java/security/standardnames.java support/src/test/java/libcore/javax/net/ssl/testkeymanager.java support/src/test/java/libcore/javax/net/ssl/testtrustmanager.java changed to timeout after 30 seconds and to log to reveal both client and server issues. support/src/test/java/libcore/javax/net/ssl/testsslsocketpair.java bug: 3058375 change-id: i14d1d0285d591c99cc211324f3595a5be682cab1 	9822 commit 4ae3fd787741bfe1b808f447dcb0785250024119 elliptic crypto support for opensslsocketimpl summary: - enable elliptic crypto support for openssl based sslsocket instances - more ri compliant usage of key types, client auth types, and server auth types - steps toward tls_empty_renegotiation_info_scsv support, currently test updates details: elliptic curve changes ciphersuite updates for ec - adding key_exchange_ec* and corresponding ciphersuites updated isanonymous, getkeytype (now renamed getserverkeytype) to handle new ec cases.<br> added new getauthtype for use by checkservertrusted callers.<br> - restructured code to handle two suites_by_code_* arrays - remove key_exchange_dh_* definitions which unused because the corresponding ciphersuites were previously disabled.<br> - changed aes ciphersuites definitions to use "_cbc" to match other definitions.<br> luni/src/main/java/org/apache/harmony/xnet/provider/jsse/ciphersuite.<br>java openssl ec - nativecrypto now registers tls_ec_* cipher suites and has update default list - improved auth type arguments to checkclienttrusted/checkservertrusted - nativecrypto support for emphemeral ec keys luni/src/main/java/org/apache/harmony/xnet/provider/jsse/nativecrypto.<br>java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl.<br>java luni/src/main/native/nativecrypto.<br>chat post non-openssl ssl/tls cleanups - cleanup around code trying to cope with diffiehellman vs dh since either should work.<br> - changed client to use new ciphersuite.<br>getauthtype shared with nativecrypto implementation - changed server to use ciphersuite.<br>getkeytype luni/src/main/java/org/apache/harmony/xnet/provider/jsse/clienthandshakeimpl.<br>java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/handshakeprotocol.<br>java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/keymanagerimpl.<br>java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/serverhandshakeimpl.<br>java consolidate certificaterequesttype code into ciphersuite so that its shared between java and openssl implementations.<br> this includes the key_type_ string constants, tls_ct_* byte constants and the 'string keytype(byte)' (now renamed getclientkeytype) code that depends on them.<br> luni/src/main/java/org/apache/harmony/xnet/provider/jsse/certificaterequest.<br>java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/ciphersuite.<br>java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/clienthandshakeimpl.<br>java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/nativecrypto.<br>java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslserversocketimpl.<br>java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl.<br>java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/serverhandshakeimpl.<br>java tests differentiate between supported list of cipher suites openssl-based sslsocket and sslengine based, since the sslengine code does not support ec.<br> luni/src/test/java/libcore/javax/net/ssl/sslenginetest.<br>java luni/src/test/java/libcore/javax/net/ssl/sslsockettest.<br>java added testing for expected default cipher suites.<br> before we just ensured the values were valid.<br> luni/src/test/java/libcore/javax/net/ssl/sslsocketfactorytest.<br>java support/src/test/java/libcore/java/security/standardnames.<br>java updated to handle new ec cipher suites codes.<br> added test for new getclientkeytype.<br> luni/src/test/java/org/apache/harmony/xnet/provider/jsse/ciphersuitetest.<br>java better use of "standard names" particularly to correctly deal with the subtle differences between key types, client auth types, and server auth types.<br> testkeymanager and testtrustmanager now verify the values they are passed are acceptable.<br> support/src/test/java/libcore/java/security/standardnames.<br>java support/src/test/java/libcore/javax/net/ssl/testkeymanager.<br>java support/src/test/java/libcore/javax/net/ssl/testtrustmanager.<br>java changed to timeout after 30 seconds and to log to reveal both client and server issues.<br> support/src/test/java/libcore/javax/net/ssl/testsslsocketpair.<br>java bug: 3058375 change-id: i14d1d0285d591c99cc211324f3595a5be682cab1	2	-2	 9822[0] commit[0] 4ae3fd787741bfe1b808f447dcb0785250024119[0] elliptic[0] crypto[0] support[0] for[0] opensslsocketimpl[0] summary[0] enable[0] elliptic[0] crypto[0] support[0] for[0] openssl[0] based[0] sslsocket[0] instances[0] more[0] ri[0] compliant[0] usage[0] of[0] key[0] types[0] client[0] auth[0] types[0] and[0] server[0] auth[0] types[0] steps[0] toward[0] tls_empty_renegotiation_info_scsv[0] support[0] currently[0] test[0] updates[0] details[0] elliptic[0] curve[0] changes[0] ciphersuite[0] updates[0] for[0] ec[0] adding[0] key_exchange_ec[0] and[0] corresponding[0] ciphersuites[0] updated[0] isanonymous[0] getkeytype[0] now[0] renamed[0] getserverkeytype[0] to[0] handle[0] new[0] ec[0] cases[0] [[Sentence=-1,1=word max, 1-5]] added[0] new[0] getauthtype[0] for[0] use[0] by[0] checkservertrusted[0] callers[0] [[Sentence=-1,1=word max, 1-5]] restructured[0] code[0] to[0] handle[0] two[0] suites_by_code_[0] arrays[0] remove[0] key_exchange_dh_[0] definitions[0] which[0] unused[0] because[0] the[0] corresponding[0] ciphersuites[0] were[0] previously[0] disabled[0] [[Sentence=-1,1=word max, 1-5]] changed[0] aes[0] ciphersuites[0] definitions[0] to[0] use[0] "_cbc[0] to[0] match[0] other[0] definitions[0] [[Sentence=-1,1=word max, 1-5]] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/ciphersuite[0] [[Sentence=-1,1=word max, 1-5]] java[0] openssl[0] ec[0] nativecrypto[0] now[0] registers[0] tls_ec_[0] cipher[0] suites[0] and[0] has[0] update[0] default[-1] list[0] improved[1] auth[0] type[0] arguments[-1] to[0] checkclienttrusted/checkservertrusted[0] nativecrypto[0] support[0] for[0] emphemeral[0] ec[0] keys[0] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/nativecrypto[0] [[Sentence=-2,2=word max, 1-5]] java[0] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/main/native/nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] cpp/cp[0] non[0] openssl[0] ssl/tls[0] cleanups[0] cleanup[0] around[0] code[0] trying[0] to[0] cope[0] with[0] diffiehellman[0] vs[0] dh[0] since[0] either[0] should[0] work[0] [[Sentence=-1,1=word max, 1-5]] changed[0] client[0] to[0] use[0] new[0] ciphersuite[0] [[Sentence=-1,1=word max, 1-5]] getauthtype[0] shared[0] with[0] nativecrypto[0] implementation[0] changed[0] server[0] to[0] use[0] ciphersuite[0] [[Sentence=-1,1=word max, 1-5]] getkeytype[0] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/clienthandshakeimpl[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/handshakeprotocol[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/keymanagerimpl[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/serverhandshakeimpl[0] [[Sentence=-1,1=word max, 1-5]] java[0] consolidate[0] certificaterequesttype[0] code[0] into[0] ciphersuite[0] so[0] that[0] its[0] shared[0] between[0] java[0] and[0] openssl[0] implementations[0] [[Sentence=-1,1=word max, 1-5]] this[0] includes[0] the[0] key_type_[0] string[0] constants[0] tls_ct_[0] byte[0] constants[0] and[0] the[0] 'string[0] keytype[0] byte[0] '[0] now[0] renamed[0] getclientkeytype[0] code[0] that[0] depends[0] on[0] them[0] [[Sentence=-1,1=word max, 1-5]] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/certificaterequest[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/ciphersuite[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/clienthandshakeimpl[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslserversocketimpl[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/serverhandshakeimpl[0] [[Sentence=-1,1=word max, 1-5]] java[0] tests[0] differentiate[0] between[0] supported[1] list[0] of[0] cipher[0] suites[0] openssl[0] based[0] sslsocket[0] and[0] sslengine[0] based[0] since[0] the[0] sslengine[0] code[0] does[0] not[0] support[0] ec[0] [[Sentence=-1,2=word max, 1-5]] luni/src/test/java/libcore/javax/net/ssl/sslenginetest[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/libcore/javax/net/ssl/sslsockettest[0] [[Sentence=-1,1=word max, 1-5]] java[0] added[0] testing[0] for[0] expected[0] default[-1] cipher[0] suites[0] [[Sentence=-2,1=word max, 1-5]] before[0] we[0] just[0] ensured[0] the[0] values[1] were[0] valid[0] [[Sentence=-1,2=word max, 1-5]] luni/src/test/java/libcore/javax/net/ssl/sslsocketfactorytest[0] [[Sentence=-1,1=word max, 1-5]] java[0] support/src/test/java/libcore/java/security/standardnames[0] [[Sentence=-1,1=word max, 1-5]] java[0] updated[0] to[0] handle[0] new[0] ec[0] cipher[0] suites[0] codes[0] [[Sentence=-1,1=word max, 1-5]] added[0] test[0] for[0] new[0] getclientkeytype[0] [[Sentence=-1,1=word max, 1-5]] luni/src/test/java/org/apache/harmony/xnet/provider/jsse/ciphersuitetest[0] [[Sentence=-1,1=word max, 1-5]] java[0] better[0] use[0] of[0] standard[0] names[0] particularly[0] to[0] correctly[0] deal[0] with[0] the[0] subtle[0] differences[0] between[0] key[0] types[0] client[0] auth[0] types[0] and[0] server[0] auth[0] types[0] [[Sentence=-1,1=word max, 1-5]] testkeymanager[0] and[0] testtrustmanager[0] now[0] verify[0] the[0] values[1] they[0] are[0] passed[0] are[0] acceptable[0] [[Sentence=-1,2=word max, 1-5]] support/src/test/java/libcore/java/security/standardnames[0] [[Sentence=-1,1=word max, 1-5]] java[0] support/src/test/java/libcore/javax/net/ssl/testkeymanager[0] [[Sentence=-1,1=word max, 1-5]] java[0] support/src/test/java/libcore/javax/net/ssl/testtrustmanager[0] [[Sentence=-1,1=word max, 1-5]] java[0] changed[0] to[0] timeout[0] after[0] 30[0] seconds[0] and[0] to[0] log[0] to[0] reveal[0] both[0] client[0] and[0] server[0] issues[0] [[Sentence=-1,1=word max, 1-5]] support/src/test/java/libcore/javax/net/ssl/testsslsocketpair[0] [[Sentence=-1,1=word max, 1-5]] java[0] bug[0] 3058375[0] change[0] id[0] i14d1d0285d591c99cc211324f3595a5be682cab1[0] [[Sentence=-1,1=word max, 1-5]][[[2,-2 max of sentences]]]
11071 commit 059dbc04218144f985b20a228bbe98139d400d0c improved client certificate and certificate chain support summary: - openssl: add openssl support for specifying per key certificate chains - libcore: properly implement client certificate request call back - libcore: properly implement sending certificate chain - libcore: properly implement retreiving local certificate chain - libcore: added an sslcontext for non-openssl sslsocket creation details: external/openssl improve patch generate support by applying all other patches to baseline to remove cross polluting other patch changes into target patch. move cleanup of ./configure output to import script from openssl.config. import_openssl.sh openssl.config adding ssl_use_certificate_chain and ssl_get_certificate_chain to continue to finish most of remaining jsse issues. include/openssl/ssl.h ssl/s3_both.c ssl/ssl.h ssl/ssl_locl.h ssl/ssl_rsa.c updated patch (and list of input files to patch) patches/jsse.patch openssl.config libcore restoring sslcontextimpl as provider of non-openssl sslsocketimpl instances for interoperability testing. opensslcontextimpl is the new subclass that provides opensslsocketimpl. jsseprovider provides the old style sslcontexts, opensslprovider provides the openssl sslcontext, which includes the "default" context. changed to register sslcontexts without aliases to match the ri. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/jsseprovider.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslprovider.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/defaultsslcontextimpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslcontextimpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/sslcontextimpl.java native interface updates to support opensslsocketimpl improvements - key_types now expanded based on what we are being provided by openssl. keytype function now maps key type values received from clientcertificaterequested callback. - removed remaining uses of string pem encoding, now using asn1 der consistently includes ssl_session_get_peer_cert_chain, verifycertificatechain - fixed clientcertificaterequested to properly include all key types supported by server, not just the one from the cipher suite. we also now properly include the list of supported cas to help the client select a certificate to use. - fixed nativecrypto.ssl_use_certificate implementation to use new ssl_use_certificate_chain function from openssl to pass chain to openssl. - added error handling of all uses of sk_*_push which can fail due to out of memory - fixed compile warning due to missing jni_trace argument luni/src/main/java/org/apache/harmony/xnet/provider/jsse/nativecrypto.java luni/src/main/native/nativecrypto.cpp luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl.java pass this into chooseserveralias call as well in significantly revamped choseclientalias luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl.java minor code cleanup while reviewing diff between checkclienttrusted and checkservertrusted luni/src/main/java/org/apache/harmony/xnet/provider/jsse/trustmanagerimpl.java improvements to ssl test support to go along with client certificate and certificate chain changes. testsslcontext now has separate contexts for the client and server (as well as seperate key stores information). testkeystore now is more realistic by default, creating a ca, intermediate ca, and separate client and server certificates, as well as a client keystore that simply contains the ca and no certificates. support/src/test/java/javax/net/ssl/testkeystore.java support/src/test/java/javax/net/ssl/testsslcontext.java tests tracking api changes. tests involving cert chains now now updated to use testkeystore.assertchainlength to avoid hardwiring expected chain length in tests. these tests also now use testsslcontext.assertclientcertificatechain to validate that the chain is properly constructed and trusted by a trust manager. luni/src/test/java/java/net/urlconnectiontest.java luni/src/test/java/javax/net/ssl/sslcontexttest.java luni/src/test/java/javax/net/ssl/sslenginetest.java luni/src/test/java/javax/net/ssl/sslsessioncontexttest.java luni/src/test/java/javax/net/ssl/sslsessiontest.java luni/src/test/java/javax/net/ssl/sslsockettest.java support/src/test/java/java/security/standardnames.java support/src/test/java/javax/net/ssl/testsslenginepair.java support/src/test/java/javax/net/ssl/testsslsocketpair.java frameworks/base tracking change of sslcontextimpl to opensslcontextimpl core/java/android/net/sslcertificatesocketfactory.java core/java/android/net/http/httpsconnection.java tests/coretests/android/core/sslperformancetest.java tests/coretests/android/core/sslsockettest.java tracking changes to testsslcontext core/tests/coretests/src/android/net/http/httpsthroughhttpproxytest.java change-id: ie35ebce89966dfce62c316f7fe7252bf06935680 	11071 commit 059dbc04218144f985b20a228bbe98139d400d0c improved client certificate and certificate chain support summary: - openssl: add openssl support for specifying per key certificate chains - libcore: properly implement client certificate request call back - libcore: properly implement sending certificate chain - libcore: properly implement retreiving local certificate chain - libcore: added an sslcontext for non-openssl sslsocket creation details: external/openssl improve patch generate support by applying all other patches to baseline to remove cross polluting other patch changes into target patch.<br> move cleanup of ./configure output to import script from openssl.<br>config.<br> import_openssl.<br>sh openssl.<br>config adding ssl_use_certificate_chain and ssl_get_certificate_chain to continue to finish most of remaining jsse issues.<br> include/openssl/ssl.<br>h ssl/s3_both.<br>c ssl/ssl.<br>h ssl/ssl_locl.<br>h ssl/ssl_rsa.<br>c updated patch (and list of input files to patch) patches/jsse.<br>patch openssl.<br>config libcore restoring sslcontextimpl as provider of non-openssl sslsocketimpl instances for interoperability testing.<br> opensslcontextimpl is the new subclass that provides opensslsocketimpl.<br> jsseprovider provides the old style sslcontexts, opensslprovider provides the openssl sslcontext, which includes the "default" context.<br> changed to register sslcontexts without aliases to match the ri.<br> luni/src/main/java/org/apache/harmony/xnet/provider/jsse/jsseprovider.<br>java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslprovider.<br>java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/defaultsslcontextimpl.<br>java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslcontextimpl.<br>java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/sslcontextimpl.<br>java native interface updates to support opensslsocketimpl improvements - key_types now expanded based on what we are being provided by openssl.<br> keytype function now maps key type values received from clientcertificaterequested callback.<br> - removed remaining uses of string pem encoding, now using asn1 der consistently includes ssl_session_get_peer_cert_chain, verifycertificatechain - fixed clientcertificaterequested to properly include all key types supported by server, not just the one from the cipher suite.<br> we also now properly include the list of supported cas to help the client select a certificate to use.<br> - fixed nativecrypto.<br>ssl_use_certificate implementation to use new ssl_use_certificate_chain function from openssl to pass chain to openssl.<br> - added error handling of all uses of sk_*_push which can fail due to out of memory - fixed compile warning due to missing jni_trace argument luni/src/main/java/org/apache/harmony/xnet/provider/jsse/nativecrypto.<br>java luni/src/main/native/nativecrypto.<br>chat post luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl.<br>java pass this into chooseserveralias call as well in significantly revamped choseclientalias luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl.<br>java minor code cleanup while reviewing diff between checkclienttrusted and checkservertrusted luni/src/main/java/org/apache/harmony/xnet/provider/jsse/trustmanagerimpl.<br>java improvements to ssl test support to go along with client certificate and certificate chain changes.<br> testsslcontext now has separate contexts for the client and server (as well as seperate key stores information)<br> testkeystore now is more realistic by default, creating a ca, intermediate ca, and separate client and server certificates, as well as a client keystore that simply contains the ca and no certificates.<br> support/src/test/java/javax/net/ssl/testkeystore.<br>java support/src/test/java/javax/net/ssl/testsslcontext.<br>java tests tracking api changes.<br> tests involving cert chains now now updated to use testkeystore.<br>assertchainlength to avoid hardwiring expected chain length in tests.<br> these tests also now use testsslcontext.<br>assertclientcertificatechain to validate that the chain is properly constructed and trusted by a trust manager.<br> luni/src/test/java/java/net/urlconnectiontest.<br>java luni/src/test/java/javax/net/ssl/sslcontexttest.<br>java luni/src/test/java/javax/net/ssl/sslenginetest.<br>java luni/src/test/java/javax/net/ssl/sslsessioncontexttest.<br>java luni/src/test/java/javax/net/ssl/sslsessiontest.<br>java luni/src/test/java/javax/net/ssl/sslsockettest.<br>java support/src/test/java/java/security/standardnames.<br>java support/src/test/java/javax/net/ssl/testsslenginepair.<br>java support/src/test/java/javax/net/ssl/testsslsocketpair.<br>java frameworks/base tracking change of sslcontextimpl to opensslcontextimpl core/java/android/net/sslcertificatesocketfactory.<br>java core/java/android/net/http/httpsconnection.<br>java tests/coretests/android/core/sslperformancetest.<br>java tests/coretests/android/core/sslsockettest.<br>java tracking changes to testsslcontext core/tests/coretests/src/android/net/http/httpsthroughttpproxytest.<br>java change-id: ie35ebce89966dfce62c316f7fe7252bf06935680	2	-2	 11071[0] commit[0] 059dbc04218144f985b20a228bbe98139d400d0c[0] improved[1] client[0] certificate[0] and[0] certificate[0] chain[0] support[0] summary[0] openssl[0] add[0] openssl[0] support[0] for[0] specifying[0] per[0] key[0] certificate[0] chains[0] libcore[0] properly[0] implement[0] client[0] certificate[0] request[0] call[0] back[0] libcore[0] properly[0] implement[0] sending[0] certificate[0] chain[0] libcore[0] properly[0] implement[0] retreiving[0] local[0] certificate[0] chain[0] libcore[0] added[0] an[0] sslcontext[0] for[0] non[0] openssl[0] sslsocket[0] creation[0] details[0] external/openssl[0] improve[1] patch[0] generate[0] support[0] by[0] applying[0] all[0] other[0] patches[0] to[0] baseline[0] to[0] remove[0] cross[-1] polluting[-1] other[0] patch[0] changes[0] into[0] target[0] patch[0] [[Sentence=-2,2=word max, 1-5]] move[0] cleanup[0] of[0] ./configure[0] output[0] to[0] import[0] script[0] from[0] openssl[0] [[Sentence=-1,1=word max, 1-5]] config[0] [[Sentence=-1,1=word max, 1-5]] import_openssl[0] [[Sentence=-1,1=word max, 1-5]] sh[0] openssl[0] [[Sentence=-1,1=word max, 1-5]] config[0] adding[0] ssl_use_certificate_chain[0] and[0] ssl_get_certificate_chain[0] to[0] continue[0] to[0] finish[0] most[0] of[0] remaining[0] jsse[0] issues[0] [[Sentence=-1,1=word max, 1-5]] include/openssl/ssl[0] [[Sentence=-1,1=word max, 1-5]] h[0] ssl/s3_both[0] [[Sentence=-1,1=word max, 1-5]] c[0] ssl/ssl[0] [[Sentence=-1,1=word max, 1-5]] h[0] ssl/ssl_locl[0] [[Sentence=-1,1=word max, 1-5]] h[0] ssl/ssl_rsa[0] [[Sentence=-1,1=word max, 1-5]] c[0] updated[0] patch[0] and[0] list[0] of[0] input[0] files[0] to[0] patch[0] patches/jsse[0] [[Sentence=-1,1=word max, 1-5]] patch[0] openssl[0] [[Sentence=-1,1=word max, 1-5]] config[0] libcore[0] restoring[0] sslcontextimpl[0] as[0] provider[0] of[0] non[0] openssl[0] sslsocketimpl[0] instances[0] for[0] interoperability[0] testing[0] [[Sentence=-1,1=word max, 1-5]] opensslcontextimpl[0] is[0] the[0] new[0] subclass[0] that[0] provides[0] opensslsocketimpl[0] [[Sentence=-1,1=word max, 1-5]] jsseprovider[0] provides[0] the[0] old[0] style[0] sslcontexts[0] opensslprovider[0] provides[0] the[0] openssl[0] sslcontext[0] which[0] includes[0] the[0] default[-1] context[0] [[Sentence=-2,1=word max, 1-5]] changed[0] to[0] register[0] sslcontexts[0] without[0] aliases[0] to[0] match[0] the[0] ri[0] [[Sentence=-1,1=word max, 1-5]] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/jsseprovider[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslprovider[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/defaultsslcontextimpl[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslcontextimpl[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/sslcontextimpl[0] [[Sentence=-1,1=word max, 1-5]] java[0] native[0] interface[0] updates[0] to[0] support[0] opensslsocketimpl[0] improvements[1] key_types[0] now[0] expanded[0] based[0] on[0] what[0] we[0] are[0] being[0] provided[0] by[0] openssl[0] [[Sentence=-1,2=word max, 1-5]] keytype[0] function[0] now[0] maps[0] key[0] type[0] values[1] received[0] from[0] clientcertificaterequested[0] callback[0] [[Sentence=-1,2=word max, 1-5]] removed[0] remaining[0] uses[0] of[0] string[0] pem[0] encoding[0] now[0] using[0] asn1[0] der[0] consistently[0] includes[0] ssl_session_get_peer_cert_chain[0] verifycertificatechain[0] fixed[0] clientcertificaterequested[0] to[0] properly[0] include[0] all[0] key[0] types[0] supported[1] by[0] server[0] not[0] just[0] the[0] one[0] from[0] the[0] cipher[0] suite[0] [[Sentence=-1,2=word max, 1-5]] we[0] also[0] now[0] properly[0] include[0] the[0] list[0] of[0] supported[1] cas[0] to[0] help[0] the[0] client[0] select[0] a[0] certificate[0] to[0] use[0] [[Sentence=-1,2=word max, 1-5]] fixed[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] ssl_use_certificate[0] implementation[0] to[0] use[0] new[0] ssl_use_certificate_chain[0] function[0] from[0] openssl[0] to[0] pass[0] chain[0] to[0] openssl[0] [[Sentence=-1,1=word max, 1-5]] added[0] error[0] handling[0] of[0] all[0] uses[0] of[0] sk_[0] *_push[0] which[0] can[0] fail[0] due[0] to[0] out[0] of[0] memory[0] fixed[0] compile[0] warning[0] due[0] to[0] missing[0] jni_trace[0] argument[-1] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/nativecrypto[0] [[Sentence=-2,1=word max, 1-5]] java[0] luni/src/main/native/nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] cpp/cp[0] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl[0] [[Sentence=-1,1=word max, 1-5]] java[0] pass[0] this[0] into[0] chooseserveralias[0] call[0] as[0] well[0] in[0] significantly[0] revamped[0] choseclientalias[0] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl[0] [[Sentence=-1,1=word max, 1-5]] java[0] minor[0] code[0] cleanup[0] while[0] reviewing[0] diff[0] between[0] checkclienttrusted[0] and[0] checkservertrusted[0] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/trustmanagerimpl[0] [[Sentence=-1,1=word max, 1-5]] java[0] improvements[1] to[0] ssl[0] test[0] support[0] to[0] go[0] along[0] with[0] client[0] certificate[0] and[0] certificate[0] chain[0] changes[0] [[Sentence=-1,2=word max, 1-5]] testsslcontext[0] now[0] has[0] separate[0] contexts[0] for[0] the[0] client[0] and[0] server[0] as[0] well[0] as[0] seperate[0] key[0] stores[0] information[0] [[Sentence=-1,1=word max, 1-5]] testkeystore[0] now[0] is[0] more[0] realistic[0] by[0] default[-1] creating[0] a[0] ca[0] intermediate[0] ca[0] and[0] separate[0] client[0] and[0] server[0] certificates[0] as[0] well[0] as[0] a[0] client[0] keystore[0] that[0] simply[0] contains[0] the[0] ca[0] and[0] no[0] certificates[0] [[Sentence=-2,1=word max, 1-5]] support/src/test/java/javax/net/ssl/testkeystore[0] [[Sentence=-1,1=word max, 1-5]] java[0] support/src/test/java/javax/net/ssl/testsslcontext[0] [[Sentence=-1,1=word max, 1-5]] java[0] tests[0] tracking[0] api[0] changes[0] [[Sentence=-1,1=word max, 1-5]] tests[0] involving[0] cert[0] chains[0] now[0] now[0] updated[0] to[0] use[0] testkeystore[0] [[Sentence=-1,1=word max, 1-5]] assertchainlength[0] to[0] avoid[-1] hardwiring[0] expected[0] chain[0] length[0] in[0] tests[0] [[Sentence=-2,1=word max, 1-5]] these[0] tests[0] also[0] now[0] use[0] testsslcontext[0] [[Sentence=-1,1=word max, 1-5]] assertclientcertificatechain[0] to[0] validate[0] that[0] the[0] chain[0] is[0] properly[0] constructed[0] and[0] trusted[1] by[0] a[0] trust[1] manager[0] [[Sentence=-1,2=word max, 1-5]] luni/src/test/java/java/net/urlconnectiontest[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/javax/net/ssl/sslcontexttest[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/javax/net/ssl/sslenginetest[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/javax/net/ssl/sslsessioncontexttest[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/javax/net/ssl/sslsessiontest[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/javax/net/ssl/sslsockettest[0] [[Sentence=-1,1=word max, 1-5]] java[0] support/src/test/java/java/security/standardnames[0] [[Sentence=-1,1=word max, 1-5]] java[0] support/src/test/java/javax/net/ssl/testsslenginepair[0] [[Sentence=-1,1=word max, 1-5]] java[0] support/src/test/java/javax/net/ssl/testsslsocketpair[0] [[Sentence=-1,1=word max, 1-5]] java[0] frameworks/base[0] tracking[0] change[0] of[0] sslcontextimpl[0] to[0] opensslcontextimpl[0] core/java/android/net/sslcertificatesocketfactory[0] [[Sentence=-1,1=word max, 1-5]] java[0] core/java/android/net/http/httpsconnection[0] [[Sentence=-1,1=word max, 1-5]] java[0] tests/coretests/android/core/sslperformancetest[0] [[Sentence=-1,1=word max, 1-5]] java[0] tests/coretests/android/core/sslsockettest[0] [[Sentence=-1,1=word max, 1-5]] java[0] tracking[0] changes[0] to[0] testsslcontext[0] core/tests/coretests/src/android/net/http/httpsthroughhttpproxytest/core/tests/coretests/src/android/net/http/httpsthroughttpproxytest[0] [[Sentence=-1,1=word max, 1-5]] java[0] change[0] id[0] ie35ebce89966dfce62c316f7fe7252bf06935680[0] [[Sentence=-1,1=word max, 1-5]][[[2,-2 max of sentences]]]
11341 commit 0c131a2ca38465b7d1df4eaee63ac73ce4d5986d ri 6 support for javax.net.ssl summary: - ri 6 support for javax.net.ssl - sslengine fixes based on new sslenginetest - fix cipher.checkmode bug recently introduced in dalvik-dev details: fix cipher.checkmode that was preventing most javax.net.ssl tests from working luni/src/main/java/javax/crypto/cipher.java ri 6 has introduced the concept of a "default" sslcontext. this is accessed via sslcontext.getdefault() and also sslcontext.getinstance("default"). harmony had its own defaultsslcontext but it was not created via an sslcontextspi. it also was a single shared instance whereas the new ri6 default sslcontext shares internal sslsessioncontext instances between different default sslcontexts. refactored the old code into an sslcontextimpl subclass that allows it to be created via sslcontext.getinstance. sslcontextimpl ensures that we only ever create one set of sslsessioncontext instances for the default context. luni/src/main/java/javax/net/ssl/defaultsslcontext.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/defaultsslcontextimpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/sslcontextimpl.java added sslcontext.getdefault and sslcontext.setdefault luni/src/main/java/javax/net/ssl/sslcontext.java replace dependencies of old defaultsslcontext with use of sslcontext.getdefault luni/src/main/java/javax/net/ssl/sslserversocketfactory.java luni/src/main/java/javax/net/ssl/sslsocketfactory.java register "sslcontext.default" as defaultsslcontextimpl class for sslcontext.getinstance() luni/src/main/java/org/apache/harmony/xnet/provider/jsse/jsseprovider.java added constant for new "default" standard name and added it to ssl_context_protocols. new tests based on ssl_context_protocols made it clear that neither android or ri support sslv2 so removed it from ssl_context_protocols and ssl_socket_protocols. added constant for tls as well which was previously scattered all over tests. remove sslv2hello from ssl_socket_protocols for android since with openssl disablign sslv2 means you can not use sslv2hello either. support/src/test/java/javax/net/ssl/standardnames.java added tests for sslcontext.getdefault and sslcontext.setdefault. changed existing tests to work on all protocols including new "default". luni/src/test/java/javax/net/ssl/sslcontexttest.java ri 6 has introduced the notion of sslparameters which encapsulate ssl the handshake parameters of desired cipher suites, protocols, and client authentication requirements. the main new class sslparameters is basically just a bag of fields with accessors and a couple simple constructors. the only things of note are that it clones all string arrays on input and output and the setters for the two boolean fields ensure that only one is true at a time. luni/src/main/java/javax/net/ssl/sslparameters.java added sslcontext.getdefaultsslparameters and sslcontext.getsupportedsslparameters which simply delegate to the sslcontextspi. luni/src/main/java/javax/net/ssl/sslcontext.java added abstract sslcontextspi.enginegetdefaultsslparameters and sslcontext.enginegetsupportedsslparameters. luni/src/main/java/javax/net/ssl/sslcontextspi.java added enginegetdefaultsslparameters and enginegetsupportedsslparameters implementation. the ri documents in sslcontextspi that these are implemented by default by creating a socket via the sslcontext's socketfactory and asking for the enabled/supported cipher suites and protocols respectively, so that is what is done. the doc mentions throwing unsupportedoperationexception if there is a problem, so we do that as well. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/sslcontextimpl.java added {sslengine,sslsocket}.{getsslparameters,setsslparameters} which are analogous. luni/src/main/java/javax/net/ssl/sslengine.java luni/src/main/java/javax/net/ssl/sslsocket.java added sslparameterstest luni/src/test/java/javax/net/ssl/sslparameterstest.java luni/src/test/java/javax/net/ssl/alltests.java added sslcontext.get{default,supported}sslparameters tests luni/src/test/java/javax/net/ssl/sslcontexttest.java added sslsocket.{getsslparameters,setsslparameters} tests and added some extra asserts to test_sslsocketpair_create based on experience with test_sslenginepair_create. luni/src/test/java/javax/net/ssl/sslsockettest.java dummy implementation of new sslcontextspi for test classes. support/src/test/java/org/apache/harmony/security/tests/support/mysslcontextspi.java support/src/test/java/org/apache/harmony/xnet/tests/support/mysslcontextspi.java other minor ri 6 api changes: ri 6 removed serializable from handshakecompletedevent and sslsessionbindingevent luni/src/main/java/javax/net/ssl/handshakecompletedevent.java luni/src/main/java/javax/net/ssl/sslsessionbindingevent.java ri 6 added generic types to the keystorebuilderparameters list constructor and accessor as well as to sslsessioncontext.getids. fixed tests to compile with generic types. luni/src/main/java/javax/net/ssl/keystorebuilderparameters.java luni/src/main/java/javax/net/ssl/sslsessioncontext.java luni/src/test/java/tests/api/javax/net/ssl/keystorebuilderparameterstest.java sslengine improvements. since i was changing sslengine, i wrote an sslenginetest based on my sslsockettest to do some simply sanity checking. it expose a number of issues. i've fixed the small ones, marked the rest as known failures. renamed some tls_ cipher suites to ssl_ to match jsse standard names. these were all old suites no longer supported by ri or openssl which is why they were missed in an earlier cleanup of this type in this class. also fixed sslengine supported cipher suites list not to include ssl_null_with_null_null which is not a valid suite to negotiate. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/ciphersuite.java sslengine instances can have null host values, which caused a nullpointerexception in the clientsessioncontext implementation. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/clientsessioncontext.java sslengine tests were failing because sslparameters was throwing nullpointerexception instead of illegalargument exception on null element values. fixed null pointer message style while i was here. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/sslparameters.java fixed sslengine instances to default to server mode like ri luni/src/main/java/org/apache/harmony/xnet/provider/jsse/sslcontextimpl.java fixed key_types based on sslengine implementation. removed dead code nativecrypto.getenabledprotocols which was recently made obsolete. cleaned up null exception messages to follow our convention. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/nativecrypto.java added sslenginetest which parallels sslsockettest in its coverage. similarly added testsslenginepair which loosely parallels testsslsocketpair. luni/src/test/java/javax/net/ssl/sslenginetest.java luni/src/test/java/javax/net/ssl/alltests.java support/src/test/java/javax/net/ssl/testsslenginepair.java sslenginetest betters exposed the differences between sslsocket and sslengine supported cipher suites. standardnames now has an cipher_suites_sslengine definition which denotes what is missing and what is extra and why in the sslengine implementation. support/src/test/java/javax/net/ssl/standardnames.java created standardnames.assert{valid,supported}{ciphersuites,protocols} to factor out some code test code that is also used by new tests. support/src/test/java/javax/net/ssl/standardnames.java luni/src/test/java/javax/net/ssl/sslsocketfactorytest.java luni/src/test/java/javax/net/ssl/sslsockettest.java remove sslsockettest known failure and add new sslenginetest known failures expectations/knownfailures.txt ssl_op_no_ticket change was recently merged from master which required some fixes. for the moment, sslserversocketsupportssessiontickets always returns false. support/src/test/java/javax/net/ssl/testsslcontext.java fixed flakey test_sslsocket_handshakecompletedlistener which had a race because the client thread look in the server session context for an session by id potentially before the server thread had a chance to store its session. made noticable because of ssl_op_no_ticket recently merged from master (before this code path was host only, not device) luni/src/test/java/javax/net/ssl/sslsockettest.java fix checkjni issue where we need to check for pending exception in openssl callback. possibly introduced by recent merge of ssl_op_no_ticket from master. luni/src/main/native/org_apache_harmony_xnet_provider_jsse_nativecrypto.cpp expectation updates remove sslsockettest known failure and add new sslenginetest known failures expectations/knownfailures.txt tag test_sslsocket_getsupportedciphersuites_connect as large expectations/taggedtests.txt misc changes: opening brace on wrong line luni/src/main/java/org/apache/harmony/xnet/provider/jsse/serversessioncontext.java long line cleanup while debugging luni/src/main/java/org/apache/harmony/xnet/provider/jsse/handshakeprotocol.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslserversocketfactoryimpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketfactoryimpl.java support/src/test/java/javax/net/ssl/testkeystore.java removed bogus import luni/src/test/java/javax/net/ssl/sslsessioncontexttest.java comment clarify while debugging luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl.java ctor -  constructor in comment luni/src/main/java/org/apache/harmony/xnet/provider/jsse/sslengineimpl.java fixed naming of sockettest_test_create to testsocketpair_create to match renamed classes luni/src/test/java/javax/net/ssl/sslsockettest.java change-id: i99505e97d6047eeabe4a0b93202075a0b2d486ec 	11341 commit 0c131a2ca38465b7d1df4eaee63ac73ce4d5986d ri 6 support for javax.<br>net.<br>ssl summary: - ri 6 support for javax.<br>net.<br>ssl - sslengine fixes based on new sslenginetest - fix cipher.<br>checkmode bug recently introduced in dalvik-dev details: fix cipher.<br>checkmode that was preventing most javax.<br>net.<br>ssl tests from working luni/src/main/java/javax/crypto/cipher.<br>java ri 6 has introduced the concept of a "default" sslcontext.<br> this is accessed via sslcontext.<br>getdefault( and also sslcontext.<br>getinstance(default"<br> harmony had its own defaultsslcontext but it was not created via an sslcontextspi.<br> it also was a single shared instance whereas the new ri6 default sslcontext shares internal sslsessioncontext instances between different default sslcontexts.<br> refactored the old code into an sslcontextimpl subclass that allows it to be created via sslcontext.<br>getinstance.<br> sslcontextimpl ensures that we only ever create one set of sslsessioncontext instances for the default context.<br> luni/src/main/java/javax/net/ssl/defaultsslcontext.<br>java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/defaultsslcontextimpl.<br>java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/sslcontextimpl.<br>java added sslcontext.<br>getdefault and sslcontext.<br>setdefault luni/src/main/java/javax/net/ssl/sslcontext.<br>java replace dependencies of old defaultsslcontext with use of sslcontext.<br>getdefault luni/src/main/java/javax/net/ssl/sslserversocketfactory.<br>java luni/src/main/java/javax/net/ssl/sslsocketfactory.<br>java register "sslcontext.<br>default" as defaultsslcontextimpl class for sslcontext.<br>getinstance( luni/src/main/java/org/apache/harmony/xnet/provider/jsse/jsseprovider.<br>java added constant for new "default" standard name and added it to ssl_context_protocols.<br> new tests based on ssl_context_protocols made it clear that neither android or ri support sslv2 so removed it from ssl_context_protocols and ssl_socket_protocols.<br> added constant for tls as well which was previously scattered all over tests.<br> remove sslv2hello from ssl_socket_protocols for android since with openssl disablign sslv2 means you can not use sslv2hello either.<br> support/src/test/java/javax/net/ssl/standardnames.<br>java added tests for sslcontext.<br>getdefault and sslcontext.<br>setdefault.<br> changed existing tests to work on all protocols including new "default"<br> luni/src/test/java/javax/net/ssl/sslcontexttest.<br>java ri 6 has introduced the notion of sslparameters which encapsulate ssl the handshake parameters of desired cipher suites, protocols, and client authentication requirements.<br> the main new class sslparameters is basically just a bag of fields with accessors and a couple simple constructors.<br> the only things of note are that it clones all string arrays on input and output and the setters for the two boolean fields ensure that only one is true at a time.<br> luni/src/main/java/javax/net/ssl/sslparameters.<br>java added sslcontext.<br>getdefaultsslparameters and sslcontext.<br>getsupportedsslparameters which simply delegate to the sslcontextspi.<br> luni/src/main/java/javax/net/ssl/sslcontext.<br>java added abstract sslcontextspi.<br>enginegetdefaultsslparameters and sslcontext.<br>enginegetsupportedsslparameters.<br> luni/src/main/java/javax/net/ssl/sslcontextspi.<br>java added enginegetdefaultsslparameters and enginegetsupportedsslparameters implementation.<br> the ri documents in sslcontextspi that these are implemented by default by creating a socket via the sslcontext's socketfactory and asking for the enabled/supported cipher suites and protocols respectively, so that is what is done.<br> the doc mentions throwing unsupportedoperationexception if there is a problem, so we do that as well.<br> luni/src/main/java/org/apache/harmony/xnet/provider/jsse/sslcontextimpl.<br>java added {sslengine,sslsocket}.{getsslparameters,setsslparameters} which are analogous.<br> luni/src/main/java/javax/net/ssl/sslengine.<br>java luni/src/main/java/javax/net/ssl/sslsocket.<br>java added sslparameterstest luni/src/test/java/javax/net/ssl/sslparameterstest.<br>java luni/src/test/java/javax/net/ssl/alltests.<br>java added sslcontext.<br>get{default,supported}sslparameters tests luni/src/test/java/javax/net/ssl/sslcontexttest.<br>java added sslsocket.{getsslparameters,setsslparameters} tests and added some extra asserts to test_sslsocketpair_create based on experience with test_sslenginepair_create.<br> luni/src/test/java/javax/net/ssl/sslsockettest.<br>java dummy implementation of new sslcontextspi for test classes.<br> support/src/test/java/org/apache/harmony/security/tests/support/mysslcontextspi.<br>java support/src/test/java/org/apache/harmony/xnet/tests/support/mysslcontextspi.<br>java other minor ri 6 api changes: ri 6 removed serializable from handshakecompletedevent and sslsessionbindingevent luni/src/main/java/javax/net/ssl/handshakecompletedevent.<br>java luni/src/main/java/javax/net/ssl/sslsessionbindingevent.<br>java ri 6 added generic types to the keystorebuilderparameters list constructor and accessor as well as to sslsessioncontext.<br>getids.<br> fixed tests to compile with generic types.<br> luni/src/main/java/javax/net/ssl/keystorebuilderparameters.<br>java luni/src/main/java/javax/net/ssl/sslsessioncontext.<br>java luni/src/test/java/tests/api/javax/net/ssl/keystorebuilderparameterstest.<br>java sslengine improvements.<br> since i was changing sslengine, i wrote an sslenginetest based on my sslsockettest to do some simply sanity checking.<br> it expose a number of issues.<br> i've fixed the small ones, marked the rest as known failures.<br> renamed some tls_ cipher suites to ssl_ to match jsse standard names.<br> these were all old suites no longer supported by ri or openssl which is why they were missed in an earlier cleanup of this type in this class.<br> also fixed sslengine supported cipher suites list not to include ssl_null_with_null_null which is not a valid suite to negotiate.<br> luni/src/main/java/org/apache/harmony/xnet/provider/jsse/ciphersuite.<br>java sslengine instances can have null host values, which caused a nullpointerexception in the clientsessioncontext implementation.<br> luni/src/main/java/org/apache/harmony/xnet/provider/jsse/clientsessioncontext.<br>java sslengine tests were failing because sslparameters was throwing nullpointerexception instead of illegalargument exception on null element values.<br> fixed null pointer message style while i was here.<br> luni/src/main/java/org/apache/harmony/xnet/provider/jsse/sslparameters.<br>java fixed sslengine instances to default to server mode like ri luni/src/main/java/org/apache/harmony/xnet/provider/jsse/sslcontextimpl.<br>java fixed key_types based on sslengine implementation.<br> removed dead code nativecrypto.<br>getenabledprotocols which was recently made obsolete.<br> cleaned up null exception messages to follow our convention.<br> luni/src/main/java/org/apache/harmony/xnet/provider/jsse/nativecrypto.<br>java added sslenginetest which parallels sslsockettest in its coverage.<br> similarly added testsslenginepair which loosely parallels testsslsocketpair.<br> luni/src/test/java/javax/net/ssl/sslenginetest.<br>java luni/src/test/java/javax/net/ssl/alltests.<br>java support/src/test/java/javax/net/ssl/testsslenginepair.<br>java sslenginetest betters exposed the differences between sslsocket and sslengine supported cipher suites.<br> standardnames now has an cipher_suites_sslengine definition which denotes what is missing and what is extra and why in the sslengine implementation.<br> support/src/test/java/javax/net/ssl/standardnames.<br>java created standardnames.<br>assert{valid,supported}{ciphersuites,protocols} to factor out some code test code that is also used by new tests.<br> support/src/test/java/javax/net/ssl/standardnames.<br>java luni/src/test/java/javax/net/ssl/sslsocketfactorytest.<br>java luni/src/test/java/javax/net/ssl/sslsockettest.<br>java remove sslsockettest known failure and add new sslenginetest known failures expectations/knownfailures.<br>txt ssl_op_no_ticket change was recently merged from master which required some fixes.<br> for the moment, sslserversocketsupportssessiontickets always returns false.<br> support/src/test/java/javax/net/ssl/testsslcontext.<br>java fixed flakey test_sslsocket_handshakecompletedlistener which had a race because the client thread look in the server session context for an session by id potentially before the server thread had a chance to store its session.<br> made noticable because of ssl_op_no_ticket recently merged from master (before this code path was host only, not device) luni/src/test/java/javax/net/ssl/sslsockettest.<br>java fix checkjni issue where we need to check for pending exception in openssl callback.<br> possibly introduced by recent merge of ssl_op_no_ticket from master.<br> luni/src/main/native/org_apache_harmony_xnet_provider_jsse_nativecrypto.<br>chat post expectation updates remove sslsockettest known failure and add new sslenginetest known failures expectations/knownfailures.<br>txt tag test_sslsocket_getsupportedciphersuites_connect as large expectations/taggedtests.<br>txt misc changes: opening brace on wrong line luni/src/main/java/org/apache/harmony/xnet/provider/jsse/serversessioncontext.<br>java long line cleanup while debugging luni/src/main/java/org/apache/harmony/xnet/provider/jsse/handshakeprotocol.<br>java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslserversocketfactoryimpl.<br>java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketfactoryimpl.<br>java support/src/test/java/javax/net/ssl/testkeystore.<br>java removed bogus import luni/src/test/java/javax/net/ssl/sslsessioncontexttest.<br>java comment clarify while debugging luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl.<br>java ctor -  constructor in comment luni/src/main/java/org/apache/harmony/xnet/provider/jsse/sslengineimpl.<br>java fixed naming of sockettest_test_create to testsocketpair_create to match renamed classes luni/src/test/java/javax/net/ssl/sslsockettest.<br>java change-id: i99505e97d6047eeabe4a0b93202075a0b2d486ec	3	-2	 11341[0] commit[0] 0c131a2ca38465b7d1df4eaee63ac73ce4d5986d[0] ri[0] 6[0] support[0] for[0] javax[0] [[Sentence=-1,1=word max, 1-5]] net[0] [[Sentence=-1,1=word max, 1-5]] ssl[0] summary[0] ri[0] 6[0] support[0] for[0] javax[0] [[Sentence=-1,1=word max, 1-5]] net[0] [[Sentence=-1,1=word max, 1-5]] ssl[0] sslengine[0] fixes[0] based[0] on[0] new[0] sslenginetest[0] fix[0] cipher[0] [[Sentence=-1,1=word max, 1-5]] checkmode[0] bug[0] recently[0] introduced[0] in[0] dalvik[0] dev[0] details[0] fix[0] cipher[0] [[Sentence=-1,1=word max, 1-5]] checkmode[0] that[0] was[0] preventing[0] most[0] javax[0] [[Sentence=-1,1=word max, 1-5]] net[0] [[Sentence=-1,1=word max, 1-5]] ssl[0] tests[0] from[0] working[0] luni/src/main/java/javax/crypto/cipher[0] [[Sentence=-1,1=word max, 1-5]] java[0] ri[0] 6[0] has[0] introduced[0] the[0] concept[0] of[0] a[0] default[-1] sslcontext[0] [[Sentence=-2,1=word max, 1-5]] this[0] is[0] accessed[0] via[0] sslcontext[0] [[Sentence=-1,1=word max, 1-5]] getdefault[0] and[0] also[0] sslcontext[0] [[Sentence=-1,1=word max, 1-5]] getinstance[0] default[-1] [[Sentence=-2,1=word max, 1-5]] harmony[0] had[0] its[0] own[0] defaultsslcontext[0] but[0] it[0] was[0] not[0] created[0] via[0] an[0] sslcontextspi[0] [[Sentence=-1,1=word max, 1-5]] it[0] also[0] was[0] a[0] single[0] shared[0] instance[0] whereas[0] the[0] new[0] ri6[0] default[-1] sslcontext[0] shares[0] internal[0] sslsessioncontext[0] instances[0] between[0] different[0] default[-1] sslcontexts[0] [[Sentence=-2,1=word max, 1-5]] refactored[0] the[0] old[0] code[0] into[0] an[0] sslcontextimpl[0] subclass[0] that[0] allows[0] it[0] to[0] be[0] created[0] via[0] sslcontext[0] [[Sentence=-1,1=word max, 1-5]] getinstance[0] [[Sentence=-1,1=word max, 1-5]] sslcontextimpl[0] ensures[0] that[0] we[0] only[0] ever[0] create[0] one[0] set[0] of[0] sslsessioncontext[0] instances[0] for[0] the[0] default[-1] context[0] [[Sentence=-2,1=word max, 1-5]] luni/src/main/java/javax/net/ssl/defaultsslcontext[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/defaultsslcontextimpl[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/sslcontextimpl[0] [[Sentence=-1,1=word max, 1-5]] java[0] added[0] sslcontext[0] [[Sentence=-1,1=word max, 1-5]] getdefault[0] and[0] sslcontext[0] [[Sentence=-1,1=word max, 1-5]] setdefault[0] luni/src/main/java/javax/net/ssl/sslcontext[0] [[Sentence=-1,1=word max, 1-5]] java[0] replace[0] dependencies[0] of[0] old[0] defaultsslcontext[0] with[0] use[0] of[0] sslcontext[0] [[Sentence=-1,1=word max, 1-5]] getdefault[0] luni/src/main/java/javax/net/ssl/sslserversocketfactory[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/main/java/javax/net/ssl/sslsocketfactory[0] [[Sentence=-1,1=word max, 1-5]] java[0] register[0] sslcontext[0] [[Sentence=-1,1=word max, 1-5]] default[-1] as[0] defaultsslcontextimpl[0] class[0] for[0] sslcontext[0] [[Sentence=-2,1=word max, 1-5]] getinstance[0] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/jsseprovider[0] [[Sentence=-1,1=word max, 1-5]] java[0] added[0] constant[0] for[0] new[0] default[-1] standard[0] name[0] and[0] added[0] it[0] to[0] ssl_context_protocols[0] [[Sentence=-2,1=word max, 1-5]] new[0] tests[0] based[0] on[0] ssl_context_protocols[0] made[0] it[0] clear[0] that[0] neither[0] android[0] or[0] ri[0] support[0] sslv2[0] so[0] removed[0] it[0] from[0] ssl_context_protocols[0] and[0] ssl_socket_protocols[0] [[Sentence=-1,1=word max, 1-5]] added[0] constant[0] for[0] tls[0] as[0] well[0] which[0] was[0] previously[0] scattered[0] all[0] over[0] tests[0] [[Sentence=-1,1=word max, 1-5]] remove[0] sslv2hello[0] from[0] ssl_socket_protocols[0] for[0] android[0] since[0] with[0] openssl[0] disablign[0] sslv2[0] means[0] you[0] can[0] not[0] use[0] sslv2hello[0] either[0] [[Sentence=-1,1=word max, 1-5]] support/src/test/java/javax/net/ssl/standardnames[0] [[Sentence=-1,1=word max, 1-5]] java[0] added[0] tests[0] for[0] sslcontext[0] [[Sentence=-1,1=word max, 1-5]] getdefault[0] and[0] sslcontext[0] [[Sentence=-1,1=word max, 1-5]] setdefault[0] [[Sentence=-1,1=word max, 1-5]] changed[0] existing[0] tests[0] to[0] work[0] on[0] all[0] protocols[0] including[0] new[0] default[-1] [[Sentence=-2,1=word max, 1-5]] luni/src/test/java/javax/net/ssl/sslcontexttest[0] [[Sentence=-1,1=word max, 1-5]] java[0] ri[0] 6[0] has[0] introduced[0] the[0] notion[0] of[0] sslparameters[0] which[0] encapsulate[0] ssl[0] the[0] handshake[0] parameters[0] of[0] desired[0] cipher[0] suites[0] protocols[0] and[0] client[0] authentication[0] requirements[0] [[Sentence=-1,1=word max, 1-5]] the[0] main[0] new[0] class[0] sslparameters[0] is[0] basically[0] just[0] a[0] bag[0] of[0] fields[0] with[0] accessors[0] and[0] a[0] couple[0] simple[0] constructors[0] [[Sentence=-1,1=word max, 1-5]] the[0] only[0] things[0] of[0] note[0] are[0] that[0] it[0] clones[0] all[0] string[0] arrays[0] on[0] input[0] and[0] output[0] and[0] the[0] setters[0] for[0] the[0] two[0] boolean[0] fields[0] ensure[0] that[0] only[0] one[0] is[0] true[1] at[0] a[0] time[0] [[Sentence=-1,2=word max, 1-5]] luni/src/main/java/javax/net/ssl/sslparameters[0] [[Sentence=-1,1=word max, 1-5]] java[0] added[0] sslcontext[0] [[Sentence=-1,1=word max, 1-5]] getdefaultsslparameters[0] and[0] sslcontext[0] [[Sentence=-1,1=word max, 1-5]] getsupportedsslparameters[0] which[0] simply[0] delegate[0] to[0] the[0] sslcontextspi[0] [[Sentence=-1,1=word max, 1-5]] luni/src/main/java/javax/net/ssl/sslcontext[0] [[Sentence=-1,1=word max, 1-5]] java[0] added[0] abstract[0] sslcontextspi[0] [[Sentence=-1,1=word max, 1-5]] enginegetdefaultsslparameters[0] and[0] sslcontext[0] [[Sentence=-1,1=word max, 1-5]] enginegetsupportedsslparameters[0] [[Sentence=-1,1=word max, 1-5]] luni/src/main/java/javax/net/ssl/sslcontextspi[0] [[Sentence=-1,1=word max, 1-5]] java[0] added[0] enginegetdefaultsslparameters[0] and[0] enginegetsupportedsslparameters[0] implementation[0] [[Sentence=-1,1=word max, 1-5]] the[0] ri[0] documents[0] in[0] sslcontextspi[0] that[0] these[0] are[0] implemented[0] by[0] default[-1] by[0] creating[0] a[0] socket[0] via[0] the[0] sslcontext's[0] socketfactory[0] and[0] asking[0] for[0] the[0] enabled/supported[0] cipher[0] suites[0] and[0] protocols[0] respectively[2] so[0] that[0] is[0] what[0] is[0] done[0] [[Sentence=-2,3=word max, 1-5]] the[0] doc[0] mentions[0] throwing[0] unsupportedoperationexception[0] if[0] there[0] is[0] a[0] problem[-1] so[0] we[0] do[0] that[0] as[0] well[0] [[Sentence=-2,1=word max, 1-5]] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/sslcontextimpl[0] [[Sentence=-1,1=word max, 1-5]] java[0] added[0] {sslengine[0] sslsocket}[0] .{getsslparameters[0] setsslparameters}[0] which[0] are[0] analogous[0] [[Sentence=-1,1=word max, 1-5]] luni/src/main/java/javax/net/ssl/sslengine[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/main/java/javax/net/ssl/sslsocket[0] [[Sentence=-1,1=word max, 1-5]] java[0] added[0] sslparameterstest[0] luni/src/test/java/javax/net/ssl/sslparameterstest[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/javax/net/ssl/alltests[0] [[Sentence=-1,1=word max, 1-5]] java[0] added[0] sslcontext[0] [[Sentence=-1,1=word max, 1-5]] get{default[0] supported}sslparameters[0] tests[0] luni/src/test/java/javax/net/ssl/sslcontexttest[0] [[Sentence=-1,1=word max, 1-5]] java[0] added[0] sslsocket[0] .{getsslparameters[0] setsslparameters}[0] tests[0] and[0] added[0] some[0] extra[0] asserts[0] to[0] test_sslsocketpair_create[0] based[0] on[0] experience[0] with[0] test_sslenginepair_create[0] [[Sentence=-1,1=word max, 1-5]] luni/src/test/java/javax/net/ssl/sslsockettest[0] [[Sentence=-1,1=word max, 1-5]] java[0] dummy[0] implementation[0] of[0] new[0] sslcontextspi[0] for[0] test[0] classes[0] [[Sentence=-1,1=word max, 1-5]] support/src/test/java/org/apache/harmony/security/tests/support/mysslcontextspi[0] [[Sentence=-1,1=word max, 1-5]] java[0] support/src/test/java/org/apache/harmony/xnet/tests/support/mysslcontextspi[0] [[Sentence=-1,1=word max, 1-5]] java[0] other[0] minor[0] ri[0] 6[0] api[0] changes[0] ri[0] 6[0] removed[0] serializable[0] from[0] handshakecompletedevent[0] and[0] sslsessionbindingevent[0] luni/src/main/java/javax/net/ssl/handshakecompletedevent[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/main/java/javax/net/ssl/sslsessionbindingevent[0] [[Sentence=-1,1=word max, 1-5]] java[0] ri[0] 6[0] added[0] generic[0] types[0] to[0] the[0] keystorebuilderparameters[0] list[0] constructor[0] and[0] accessor[0] as[0] well[0] as[0] to[0] sslsessioncontext[0] [[Sentence=-1,1=word max, 1-5]] getids[0] [[Sentence=-1,1=word max, 1-5]] fixed[0] tests[0] to[0] compile[0] with[0] generic[0] types[0] [[Sentence=-1,1=word max, 1-5]] luni/src/main/java/javax/net/ssl/keystorebuilderparameters[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/main/java/javax/net/ssl/sslsessioncontext[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/tests/api/javax/net/ssl/keystorebuilderparameterstest[0] [[Sentence=-1,1=word max, 1-5]] java[0] sslengine[0] improvements[1] [[Sentence=-1,2=word max, 1-5]] since[0] i[0] was[0] changing[0] sslengine[0] i[0] wrote[0] an[0] sslenginetest[0] based[0] on[0] my[0] sslsockettest[0] to[0] do[0] some[0] simply[0] sanity[0] checking[0] [[Sentence=-1,1=word max, 1-5]] it[0] expose[-1] a[0] number[0] of[0] issues[0] [[Sentence=-2,1=word max, 1-5]] i've[0] fixed[0] the[0] small[0] ones[0] marked[0] the[0] rest[0] as[0] known[0] failures[0] [[Sentence=-1,1=word max, 1-5]] renamed[0] some[0] tls_[0] cipher[0] suites[0] to[0] ssl_[0] to[0] match[0] jsse[0] standard[0] names[0] [[Sentence=-1,1=word max, 1-5]] these[0] were[0] all[0] old[0] suites[0] no[0] longer[0] supported[1] by[0] ri[0] or[0] openssl[0] which[0] is[0] why[0] they[0] were[0] missed[-1] in[0] an[0] earlier[0] cleanup[0] of[0] this[0] type[0] in[0] this[0] class[0] [[Sentence=-2,2=word max, 1-5]] also[0] fixed[0] sslengine[0] supported[1] cipher[0] suites[0] list[0] not[0] to[0] include[0] ssl_null_with_null_null[0] which[0] is[0] not[0] a[0] valid[0] suite[0] to[0] negotiate[0] [[Sentence=-1,2=word max, 1-5]] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/ciphersuite[0] [[Sentence=-1,1=word max, 1-5]] java[0] sslengine[0] instances[0] can[0] have[0] null[0] host[0] values[1] which[0] caused[0] a[0] nullpointerexception[0] in[0] the[0] clientsessioncontext[0] implementation[0] [[Sentence=-1,2=word max, 1-5]] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/clientsessioncontext[0] [[Sentence=-1,1=word max, 1-5]] java[0] sslengine[0] tests[0] were[0] failing[0] because[0] sslparameters[0] was[0] throwing[0] nullpointerexception[0] instead[0] of[0] illegalargument[0] exception[0] on[0] null[0] element[0] values[1] [[Sentence=-1,2=word max, 1-5]] fixed[0] null[0] pointer[0] message[0] style[0] while[0] i[0] was[0] here[0] [[Sentence=-1,1=word max, 1-5]] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/sslparameters[0] [[Sentence=-1,1=word max, 1-5]] java[0] fixed[0] sslengine[0] instances[0] to[0] default[-1] to[0] server[0] mode[0] like[0] ri[0] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/sslcontextimpl[0] [[Sentence=-2,1=word max, 1-5]] java[0] fixed[0] key_types[0] based[0] on[0] sslengine[0] implementation[0] [[Sentence=-1,1=word max, 1-5]] removed[0] dead[0] code[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] getenabledprotocols[0] which[0] was[0] recently[0] made[0] obsolete[0] [[Sentence=-1,1=word max, 1-5]] cleaned[0] up[0] null[0] exception[0] messages[0] to[0] follow[0] our[0] convention[0] [[Sentence=-1,1=word max, 1-5]] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] java[0] added[0] sslenginetest[0] which[0] parallels[0] sslsockettest[0] in[0] its[0] coverage[0] [[Sentence=-1,1=word max, 1-5]] similarly[0] added[0] testsslenginepair[0] which[0] loosely[0] parallels[0] testsslsocketpair[0] [[Sentence=-1,1=word max, 1-5]] luni/src/test/java/javax/net/ssl/sslenginetest[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/javax/net/ssl/alltests[0] [[Sentence=-1,1=word max, 1-5]] java[0] support/src/test/java/javax/net/ssl/testsslenginepair[0] [[Sentence=-1,1=word max, 1-5]] java[0] sslenginetest[0] betters[0] exposed[-1] the[0] differences[0] between[0] sslsocket[0] and[0] sslengine[0] supported[1] cipher[0] suites[0] [[Sentence=-2,2=word max, 1-5]] standardnames[0] now[0] has[0] an[0] cipher_suites_sslengine[0] definition[0] which[0] denotes[0] what[0] is[0] missing[0] and[0] what[0] is[0] extra[0] and[0] why[0] in[0] the[0] sslengine[0] implementation[0] [[Sentence=-1,1=word max, 1-5]] support/src/test/java/javax/net/ssl/standardnames[0] [[Sentence=-1,1=word max, 1-5]] java[0] created[0] standardnames[0] [[Sentence=-1,1=word max, 1-5]] assert{valid[0] supported}{ciphersuites[0] protocols}[0] to[0] factor[0] out[0] some[0] code[0] test[0] code[0] that[0] is[0] also[0] used[0] by[0] new[0] tests[0] [[Sentence=-1,1=word max, 1-5]] support/src/test/java/javax/net/ssl/standardnames[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/javax/net/ssl/sslsocketfactorytest[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/javax/net/ssl/sslsockettest[0] [[Sentence=-1,1=word max, 1-5]] java[0] remove[0] sslsockettest[0] known[0] failure[0] and[0] add[0] new[0] sslenginetest[0] known[0] failures[0] expectations/knownfailures[0] [[Sentence=-1,1=word max, 1-5]] txt[0] ssl_op_no_ticket[0] change[0] was[0] recently[0] merged[0] from[0] master[0] which[0] required[0] some[0] fixes[0] [[Sentence=-1,1=word max, 1-5]] for[0] the[0] moment[0] sslserversocketsupportssessiontickets[0] always[0] returns[0] false[0] [[Sentence=-1,1=word max, 1-5]] support/src/test/java/javax/net/ssl/testsslcontext[0] [[Sentence=-1,1=word max, 1-5]] java[0] fixed[0] flakey[0] test_sslsocket_handshakecompletedlistener[0] which[0] had[0] a[0] race[0] because[0] the[0] client[0] thread[0] look[0] in[0] the[0] server[0] session[0] context[0] for[0] an[0] session[0] by[0] id[0] potentially[0] before[0] the[0] server[0] thread[0] had[0] a[0] chance[0] to[0] store[0] its[0] session[0] [[Sentence=-1,1=word max, 1-5]] made[0] noticable[0] because[0] of[0] ssl_op_no_ticket[0] recently[0] merged[0] from[0] master[0] before[0] this[0] code[0] path[0] was[0] host[0] only[0] not[0] device[0] luni/src/test/java/javax/net/ssl/sslsockettest[0] [[Sentence=-1,1=word max, 1-5]] java[0] fix[0] checkjni[0] issue[0] where[0] we[0] need[0] to[0] check[0] for[0] pending[0] exception[0] in[0] openssl[0] callback[0] [[Sentence=-1,1=word max, 1-5]] possibly[0] introduced[0] by[0] recent[0] merge[0] of[0] ssl_op_no_ticket[0] from[0] master[0] [[Sentence=-1,1=word max, 1-5]] luni/src/main/native/org_apache_harmony_xnet_provider_jsse_nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] cpp/cp[0] expectation[0] updates[0] remove[0] sslsockettest[0] known[0] failure[0] and[0] add[0] new[0] sslenginetest[0] known[0] failures[0] expectations/knownfailures[0] [[Sentence=-1,1=word max, 1-5]] txt[0] tag[0] test_sslsocket_getsupportedciphersuites_connect[0] as[0] large[0] expectations/taggedtests[0] [[Sentence=-1,1=word max, 1-5]] txt[0] misc[0] changes[0] opening[0] brace[0] on[0] wrong[0] line[0] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/serversessioncontext[0] [[Sentence=-1,1=word max, 1-5]] java[0] long[0] line[0] cleanup[0] while[0] debugging[0] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/handshakeprotocol[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslserversocketfactoryimpl[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketfactoryimpl[0] [[Sentence=-1,1=word max, 1-5]] java[0] support/src/test/java/javax/net/ssl/testkeystore[0] [[Sentence=-1,1=word max, 1-5]] java[0] removed[0] bogus[-1] import[0] luni/src/test/java/javax/net/ssl/sslsessioncontexttest[0] [[Sentence=-2,1=word max, 1-5]] java[0] comment[0] clarify[0] while[0] debugging[0] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl[0] [[Sentence=-1,1=word max, 1-5]] java[0] ctor[0] constructor[0] in[0] comment[0] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/sslengineimpl[0] [[Sentence=-1,1=word max, 1-5]] java[0] fixed[0] naming[0] of[0] sockettest_test_create[0] to[0] testsocketpair_create[0] to[0] match[0] renamed[0] classes[0] luni/src/test/java/javax/net/ssl/sslsockettest[0] [[Sentence=-1,1=word max, 1-5]] java[0] change[0] id[0] i99505e97d6047eeabe4a0b93202075a0b2d486ec[0] [[Sentence=-1,1=word max, 1-5]][[[3,-2 max of sentences]]]
11399 commit 204cab3c22b4d75c866c95e2d2eec42e14cbd924 supported cipher suites improvements added new test_sslsocket_getsupportedciphersuites_connect to make sure all cipher suites we claim work actually do. it clearly exposed that although a large number of cipher suites are supported by libssl.so, they are not properly wired up into the openssl jsse implementation. in particular elliptic curve has been disabled in our version bouncy castle does not work. in addition diffie-hellman does not work because we need to further integration work with openssl via ssl_set_tmp_dh_callback or ssl_set_tmp_dh. finally, ssl_rsa_export_with_rc4_40_md5 doesn't work but that is being left as knownfailure for more immediate cleanup based on serverhandshakeimpl's handling of keyexchange_rsa_export as part of having openssl call us back for certificates dynamically. luni/src/test/java/javax/net/ssl/sslsockettest.java refactored testsslcontext.createkeystore to create testkeystore which now factors out testsslcontext.createkeys from the old createkeystore method, which allows createkeys to be called multiple times for different key algorithms (for example dsa in addition to rsa). also added a reusable singleton instance to cut down on test execution time. support/src/test/java/javax/net/ssl/testkeystore.java removed publicalias/privatealias from testsslcontext since we now include both rsa and dsa key pairs in they keystore by default. added testsslcontext.assertcertificateinkeystore methods to help tests the previously used the alias fields fields. testsslcontext.create api changed as well since the alias names are no longer required. testsslcontext.createclient now needs to iterate over all server certificates when setting up its trustmanager instead of just grabbing one by alias name. support/src/test/java/javax/net/ssl/testsslcontext.java luni/src/test/java/javax/net/ssl/sslcontexttest.java luni/src/test/java/javax/net/ssl/sslsessiontest.java luni/src/test/java/javax/net/ssl/sslsockettest.java testsslsocketpair.connect now allows optional inclusion of server cipher suite list. support/src/test/java/javax/net/ssl/testsslsocketpair.java luni/src/test/java/javax/net/ssl/sslsessioncontexttest.java turning off elliptic curve and diffie-hellman which are not currently working. updating test expectations to match. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/nativecrypto.java support/src/test/java/javax/net/ssl/standardnames.java turn on registration of ecdsa and dsa since this part is currently functional (and excercised by testkeystore.create()) luni/src/main/java/org/bouncycastle/x509/x509util.java improve logging by including ssl pointer in error messages, which makes it easier to relate these errors to jni_trace messages. luni/src/main/native/org_apache_harmony_xnet_provider_jsse_nativecrypto.cpp change-id: i014d001a6a21a46c360678a346d3a3c8232f4d53 	11399 commit 204cab3c22b4d75c866c95e2d2eec42e14cbd924 supported cipher suites improvements added new test_sslsocket_getsupportedciphersuites_connect to make sure all cipher suites we claim work actually do.<br> it clearly exposed that although a large number of cipher suites are supported by libssl.<br>so, they are not properly wired up into the openssl jsse implementation.<br> in particular elliptic curve has been disabled in our version bouncy castle does not work.<br> in addition diffie-hellman does not work because we need to further integration work with openssl via ssl_set_tmp_dh_callback or ssl_set_tmp_dh.<br> finally, ssl_rsa_export_with_rc4_40_md5 doesn't work but that is being left as knownfailure for more immediate cleanup based on serverhandshakeimpl's handling of keyexchange_rsa_export as part of having openssl call us back for certificates dynamically.<br> luni/src/test/java/javax/net/ssl/sslsockettest.<br>java refactored testsslcontext.<br>createkeystore to create testkeystore which now factors out testsslcontext.<br>createkeys from the old createkeystore method, which allows createkeys to be called multiple times for different key algorithms (for example dsa in addition to rsa)<br> also added a reusable singleton instance to cut down on test execution time.<br> support/src/test/java/javax/net/ssl/testkeystore.<br>java removed publicalias/privatealias from testsslcontext since we now include both rsa and dsa key pairs in they keystore by default.<br> added testsslcontext.<br>assertcertificateinkeystore methods to help tests the previously used the alias fields fields.<br> testsslcontext.<br>create api changed as well since the alias names are no longer required.<br> testsslcontext.<br>createclient now needs to iterate over all server certificates when setting up its trustmanager instead of just grabbing one by alias name.<br> support/src/test/java/javax/net/ssl/testsslcontext.<br>java luni/src/test/java/javax/net/ssl/sslcontexttest.<br>java luni/src/test/java/javax/net/ssl/sslsessiontest.<br>java luni/src/test/java/javax/net/ssl/sslsockettest.<br>java testsslsocketpair.<br>connect now allows optional inclusion of server cipher suite list.<br> support/src/test/java/javax/net/ssl/testsslsocketpair.<br>java luni/src/test/java/javax/net/ssl/sslsessioncontexttest.<br>java turning off elliptic curve and diffie-hellman which are not currently working.<br> updating test expectations to match.<br> luni/src/main/java/org/apache/harmony/xnet/provider/jsse/nativecrypto.<br>java support/src/test/java/javax/net/ssl/standardnames.<br>java turn on registration of ecdsa and dsa since this part is currently functional (and excercised by testkeystore.<br>create( luni/src/main/java/org/bouncycastle/x509/x509util.<br>java improve logging by including ssl pointer in error messages, which makes it easier to relate these errors to jni_trace messages.<br> luni/src/main/native/org_apache_harmony_xnet_provider_jsse_nativecrypto.<br>chat post change-id: i014d001a6a21a46c360678a346d3a3c8232f4d53	2	-2	 11399[0] commit[0] 204cab3c22b4d75c866c95e2d2eec42e14cbd924[0] supported[1] cipher[0] suites[0] improvements[1] added[0] new[0] test_sslsocket_getsupportedciphersuites_connect[0] to[0] make[0] sure[0] all[0] cipher[0] suites[0] we[0] claim[0] work[0] actually[0] do[0] [[Sentence=-1,2=word max, 1-5]] it[0] clearly[0] exposed[-1] that[0] although[0] a[0] large[0] number[0] of[0] cipher[0] suites[0] are[0] supported[1] by[0] libssl[0] [[Sentence=-2,2=word max, 1-5]] so[0] they[0] are[0] not[0] properly[0] wired[0] up[0] into[0] the[0] openssl[0] jsse[0] implementation[0] [[Sentence=-1,1=word max, 1-5]] in[0] particular[0] elliptic[0] curve[0] has[0] been[0] disabled[0] in[0] our[0] version[0] bouncy[0] castle[0] does[0] not[0] work[0] [[Sentence=-1,1=word max, 1-5]] in[0] addition[0] diffie[0] hellman[0] does[0] not[0] work[0] because[0] we[0] need[0] to[0] further[0] integration[0] work[0] with[0] openssl[0] via[0] ssl_set_tmp_dh_callback[0] or[0] ssl_set_tmp_dh[0] [[Sentence=-1,1=word max, 1-5]] finally[0] ssl_rsa_export_with_rc4_40_md5[0] doesn't[0] work[0] but[0] that[0] is[0] being[0] left[0] as[0] knownfailure[0] for[0] more[0] immediate[0] cleanup[0] based[0] on[0] serverhandshakeimpl's[0] handling[0] of[0] keyexchange_rsa_export[0] as[0] part[0] of[0] having[0] openssl[0] call[0] us[0] back[0] for[0] certificates[0] dynamically[0] [[Sentence=-1,1=word max, 1-5]] luni/src/test/java/javax/net/ssl/sslsockettest[0] [[Sentence=-1,1=word max, 1-5]] java[0] refactored[0] testsslcontext[0] [[Sentence=-1,1=word max, 1-5]] createkeystore[0] to[0] create[0] testkeystore[0] which[0] now[0] factors[0] out[0] testsslcontext[0] [[Sentence=-1,1=word max, 1-5]] createkeys[0] from[0] the[0] old[0] createkeystore[0] method[0] which[0] allows[0] createkeys[0] to[0] be[0] called[0] multiple[0] times[0] for[0] different[0] key[0] algorithms[0] for[0] example[0] dsa[0] in[0] addition[0] to[0] rsa[0] [[Sentence=-1,1=word max, 1-5]] also[0] added[0] a[0] reusable[0] singleton[0] instance[0] to[0] cut[0] down[0] on[0] test[0] execution[0] time[0] [[Sentence=-1,1=word max, 1-5]] support/src/test/java/javax/net/ssl/testkeystore[0] [[Sentence=-1,1=word max, 1-5]] java[0] removed[0] publicalias/privatealias[0] from[0] testsslcontext[0] since[0] we[0] now[0] include[0] both[0] rsa[0] and[0] dsa[0] key[0] pairs[0] in[0] they[0] keystore[0] by[0] default[-1] [[Sentence=-2,1=word max, 1-5]] added[0] testsslcontext[0] [[Sentence=-1,1=word max, 1-5]] assertcertificateinkeystore[0] methods[0] to[0] help[0] tests[0] the[0] previously[0] used[0] the[0] alias[0] fields[0] fields[0] [[Sentence=-1,1=word max, 1-5]] testsslcontext[0] [[Sentence=-1,1=word max, 1-5]] create[0] api[0] changed[0] as[0] well[0] since[0] the[0] alias[0] names[0] are[0] no[0] longer[0] required[0] [[Sentence=-1,1=word max, 1-5]] testsslcontext[0] [[Sentence=-1,1=word max, 1-5]] createclient[0] now[0] needs[0] to[0] iterate[0] over[0] all[0] server[0] certificates[0] when[0] setting[0] up[0] its[0] trustmanager[1] instead[0] of[0] just[0] grabbing[-1][--1 LastWordBoosterStrength] one[0] by[0] alias[0] name[0] [[Sentence=-1,2=word max, 1-5]] support/src/test/java/javax/net/ssl/testsslcontext[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/javax/net/ssl/sslcontexttest[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/javax/net/ssl/sslsessiontest[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/javax/net/ssl/sslsockettest[0] [[Sentence=-1,1=word max, 1-5]] java[0] testsslsocketpair[0] [[Sentence=-1,1=word max, 1-5]] connect[0] now[0] allows[0] optional[0] inclusion[0] of[0] server[0] cipher[0] suite[0] list[0] [[Sentence=-1,1=word max, 1-5]] support/src/test/java/javax/net/ssl/testsslsocketpair[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/javax/net/ssl/sslsessioncontexttest[0] [[Sentence=-1,1=word max, 1-5]] java[0] turning[0] off[0] elliptic[0] curve[0] and[0] diffie[0] hellman[0] which[0] are[0] not[0] currently[0] working[0] [[Sentence=-1,1=word max, 1-5]] updating[0] test[0] expectations[0] to[0] match[0] [[Sentence=-1,1=word max, 1-5]] luni/src/main/java/org/apache/harmony/xnet/provider/jsse/nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] java[0] support/src/test/java/javax/net/ssl/standardnames[0] [[Sentence=-1,1=word max, 1-5]] java[0] turn[0] on[0] registration[0] of[0] ecdsa[0] and[0] dsa[0] since[0] this[0] part[0] is[0] currently[0] functional[0] and[0] excercised[0] by[0] testkeystore[0] [[Sentence=-1,1=word max, 1-5]] create[0] luni/src/main/java/org/bouncycastle/x509/x509util[0] [[Sentence=-1,1=word max, 1-5]] java[0] improve[1] logging[0] by[0] including[0] ssl[0] pointer[0] in[0] error[0] messages[0] which[0] makes[0] it[0] easier[0] to[0] relate[0] these[0] errors[0] to[0] jni_trace[0] messages[0] [[Sentence=-1,2=word max, 1-5]] luni/src/main/native/org_apache_harmony_xnet_provider_jsse_nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] cpp/cp[0] change[0] id[0] i014d001a6a21a46c360678a346d3a3c8232f4d53[0] [[Sentence=-1,1=word max, 1-5]][[[2,-2 max of sentences]]]
11483 commit bcfb325d5b1f9529b439cc0805a1c140521510f7 opensslsocket handshake overhaul summary: - sslsocket.starthandshake now generalized to handle both client and server handshaking as well as client/server role reversal - handshake_cutthrough.patch is properly integrated with support delayed handshake completion now integrated with delayed updates to session cache and callbacks to handshakecompletedlisteners - many fixes to sslsession, which is the end product of the handshake - generally more ri and sslengine compliant behavior. - more native code deletion through unification of client/server handshake, unification of client/server certificate chain verification, etc. more native code moved from various openssl classes to cleaner nativecrypto interfaces that more directly mirror the openssl interfaces. details: delay ssl_new call until handshake time when we know for sure whether the opensslsocket will be used in client or server mode and we can allocate the ssl_new from the apppriate client or server ssl_ctx used for session caching. now that no ssl is allocated for an opensslserversocketimpl, store enabledprotocols and enabledciphersuites in instance string arrays. use new nativecrypto.checkenabled* methdods for argument validation. opensslserversocketimpl passes these enabled arrays to a new opensslsocket constructor during accept(). removed finalizer from opensslserversocketimpl since it no longer has any native storage and socket is already closed by plainsocketimpl finalizer. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslserversocketimpl.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl.java opensslsocket major overhaul to properly implement handshaking including switching client and server roles and session id caching with handshake_cutthrough.patch. - now implements nativecrypto.handshakecompletedlisteners for properly timed callback when handshake_cutthrough.patch delays handshake completion until first sslsocket.getinputstream() read. - similar enabledprotocols/enabledciphersuites changes as opensslserversocketimpl since we need to store the state somewhere other than an openssl ssl struct until we are sure if we are doing a client or server handshake. - added handshake completed field so that starthandshake can tell if handshake was completed during ssl_do_handshake or will be completed later by a call to handshakecompletedcallback.handshakecompleted. - removed nativegetsession as the equivalent value is now returned by ssl_do_handshake - removed nativecipherauthenticationmethod as the value is now passed to verifycertificatechain - starthandshake is now a wrapper that forces a fully synchronous handshake - starthandshake(boolean) is the the most changed method in this changelist, combinding both the old starthandshake logic, but also the opensslsocketimpl.accept code as well. notable differences from the old code: * now responsible for ssl_new * single code path for client/server handshaking dealing with sslsession caching * now handles server certificate requests previously in opensslserversocketimpl, since a client can request to act like a server and therefore need to be able to make suck demands on its peer. * supports turning off handshake_cutthrough at a callers request via explicit call to starthandshake() * certificate verification happens during an upcall from openssl during ssl_do_handshake to verifycertificatechain for both client and server cases. previously there was not quite right upcall support on the server side and post-handshake checking on the client, which did not allow for a proper alert to be sent to the peer informing them of the issue, which the ri and sslengine code do. * similarly, setenablesessioncreation(false) did not send an alert to the peer as the ri and sslengine code in the client case. in the server case, nothing was previously done. * the use of local certificates was not determined from introspecting the ssl struct post-handshake. this is now partially implemented and will be completed in a later change. - sslsocket.{shutdowninput,shutdownoutput} are now restored to the proper behavior of throwing unsupportedoperationexception. - gutted opensslsocketimpl finalizer. the comment explains in detail the trouble of having the finalizer do anything more than touch its the instances own state due to unpredictable order of finalization and the future possability of parallel finalization. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl.java sslsession fixes - made opensslsessionimpl.sessioncontext non-final so it could be nulled by sslsession.invalidate to match ri behavior. - as noted in abstractsessioncontext discussion, removed opensslsessionimpl constructor that took sslparameters, instead we take the possibly null localcertificates directly. opensslsessionimpl.getlocalcertificates now simply returns the localcertificates member variable instead of incorrectly trying to query the keymanager for certificates that may not have been used. - opensslsessionimpl now caches its native id to avoid numerious native calls but also now provides as resetid which will update the cache when a delayed handshake happens due to the handshake_cutthrough.patch - fixed bug in getpeerprincipal that it wasn't calling getpeercertificates to initialize peercertificates field. - freeimpl is now 'public static' in preparation for move to nativecrypto. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsessionimpl.java the old sslsessionimpl class that is still used for representing the invalid session now returns isvalid    false and getprotocol    "none" to match the ri. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/sslsessionimpl.java nativecrypto improvements - adding nativecrypto.ssl_{get,set,clear}_mode similar to nativecrypto.ssl_{get,set,clear}_options along with ssl_mode_handshake_cutthrough constant which is used to explicitly disable/enable the android handshake_cutthrough.patch behavior. - added missing nativecrypto.ssl_clear_options and used to properly implement nativecrypto.setenabledprotocols. - added nativecrypto.checkenabledprotocols and nativecrypto.checkenabledciphersuites helpers to implement exception compatability with the ri. while some of this code is refactored from existing nativecrypto code, it is now also used by opensslserversocketimpl and opensslsocketimpl which maintain their own string[]s of what is enabled until starthandshake time. (see below) - changed nativecrypto.findsuite to use foreach style loop for clarity. - moved opensslserversocketimpl nativesetclientauth and ssl_verify_* constants to nativecrypto.ssl_set_verify - added nativecrypto.ssl_set_session based on part of old opensslsocketimpl.nativeconnect - added nativecrypto.ssl_set_session_creation_enabled to properly implement sslsocket.setenablesessioncreation(false) which uses new external/openssl/patches/jsse.patch functionality. - new nativecrypto.ssl_do_handshake consolidates opensslsocketimpl.{nativeconnect, nativeaccept} while properly implementing sslsocket.setuseclientmode(false) for clients and sslsocket.setuseclientmode(true) for servers. - new nativecrypto.ssl_get_certificate is determine if local certificate requested by peer. while functional, currently nativecrypto.ssl_new always sets a value via ssl_use_certificate instead of relying on a callback set via ssl_ctx_set_client_cert_cb. - changed nativecrypto.certificatechainverifier.verifycertificatechain to throw a checked certificateexception to match trustmanager.{checkservertrusted, checkclienttrusted}. it also takes an authmethod so avoid the need to call the old opensslsocketimpl.nativecipherauthenticationmethod. - added nativecrypto.handshakecompletedcallback which has its handshakecompleted method called from openssl when the now delayed handshake_cutthrough.patch handshake is completed so sslsession caching can be delayed until a session id is available and to provide a better time for handshakecompletedlisteners to be notified. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/nativecrypto.java x-net/src/main/native/org_apache_harmony_xnet_provider_jsse_nativecrypto.cpp some other changes specific to the naitve side of the code - added jnitrace calls (enabled at compile time with jni_trace) for future debugging. - throw sslexception subclass of ioexception instead ioexception itself for better ri compatability x-net/src/main/native/org_apache_harmony_xnet_provider_jsse_nativecrypto.cpp - changed from old struct app_data to new class appdata at enh's request remove dubious usage of sslparameters within abstractsessioncontext to pass through to opensslsessionimpl constructor for use in calling getlocalcertificates for sessions created from a byte array with abstractsessioncontext.tosession. our abstractsessioncontext.tobytes doesn't currently include the local certificates in its output, so it cannot be expected to have in tosession. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/abstractsessioncontext.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/clientsessioncontext.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/serversessioncontext.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/sslparameters.java test maintenance openssl 1.0.0 adds support for rfc 4507 session tickets which remove the need for server side session state. these tests needed to be updated for this new behavior. if is_ri is true, they still follow the old behavior. luni/src/test/java/javax/net/ssl/sslsessioncontexttest.java luni/src/test/java/javax/net/ssl/sslsessiontest.java luni/src/test/java/javax/net/ssl/sslsockettest.java update knownfailures and add specific comments at point of failure about what remains to be fixed. luni/src/test/java/javax/net/ssl/sslsessiontest.java added tests to cover the use of standard cipher suite names. historically android has used openssl string constants for cipher suite names, but jsse actually specifies supported and expected names. luni/src/test/java/javax/net/ssl/sslsocketfactorytest.java luni/src/test/java/javax/net/ssl/sslsockettest.java create new support/src/test/java/javax/net/ssl with old helper support code pulled from javax.net.ssl tests: sslcontexttest.helper -  testsslcontext sslsockettest.helper -  testsslsocketpair sslsessiontest.helper -  testsslsessions also added new standardnames here, which contains a collection of expected constants for test validation. luni/src/test/java/javax/net/ssl/sslcontexttest.java luni/src/test/java/javax/net/ssl/sslsockettest.java luni/src/test/java/javax/net/ssl/sslsessiontest.java support/src/test/java/javax/net/ssl/testsslcontext.java support/src/test/java/javax/net/ssl/testsslsocketpair.java support/src/test/java/javax/net/ssl/testsslsessions.java support/src/test/java/javax/net/ssl/standardnames.java removed some now fixed knownfailures and unneeded !is_ri code. marked some [un]knownfailures where exceptions are thrown and visible in the output but aren't correctly causing the test to fail. fixed assertnonnull to asserttrue in test_sslsockettest_test_create. added stress_test_sslsockettest_test_create to track down test flakiness, leading to rewrite of sslsocket finalization. luni/src/test/java/javax/net/ssl/sslsockettest.java reenable javax.net.ssl.alltests now that it is does not hang luni/src/test/java/tests/alltests.java improve error messages while debugging overflow problem. added new assert when debugging new rfc 4507 behavior. removed knownfailure annotation for now working test case. x-net/src/test/java/tests/api/javax/net/ssl/sslsessiontest.java client code changes now that starthandshake implies synchronous vs android's default async handshake, remove unneeded explict calls to sslsocket.starthandshake luni/src/main/java/org/apache/harmony/luni/internal/net/www/protocol/http/httpconnection.java removed ibm 1.4.x codepath that involved starthandshake x-net/src/main/java/javax/net/ssl/defaulthostnameverifier.java unrelated remove unneed sslsocket.setuseclientmode while removing unneeded sslsocket.starthandshake luni/src/main/java/org/apache/harmony/luni/internal/net/www/protocol/http/httpconnection.java removed warnings due to now missing modules in classpath run-core-tests change-id: i6e149ae259b3feccdfb0673209c85cfeb60befc8 	11483 commit bcfb325d5b1f9529b439cc0805a1c140521510f7 opensslsocket handshake overhaul summary: - sslsocket.<br>starthandshake now generalized to handle both client and server handshaking as well as client/server role reversal - handshake_cutthrough.<br>patch is properly integrated with support delayed handshake completion now integrated with delayed updates to session cache and callbacks to handshakecompletedlisteners - many fixes to sslsession, which is the end product of the handshake - generally more ri and sslengine compliant behavior.<br> - more native code deletion through unification of client/server handshake, unification of client/server certificate chain verification, etc.<br> more native code moved from various openssl classes to cleaner nativecrypto interfaces that more directly mirror the openssl interfaces.<br> details: delay ssl_new call until handshake time when we know for sure whether the opensslsocket will be used in client or server mode and we can allocate the ssl_new from the appriate client or server ssl_ctx used for session caching.<br> now that no ssl is allocated for an opensslserversocketimpl, store enabledprotocols and enabledciphersuites in instance string arrays.<br> use new nativecrypto.<br>checkenabled* methdods for argument validation.<br> opensslserversocketimpl passes these enabled arrays to a new opensslsocket constructor during accept(<br> removed finalizer from opensslserversocketimpl since it no longer has any native storage and socket is already closed by plainsocketimpl finalizer.<br> x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslserversocketimpl.<br>java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl.<br>java opensslsocket major overhaul to properly implement handshaking including switching client and server roles and session id caching with handshake_cutthrough.<br>patch.<br> - now implements nativecrypto.<br>handshakecompletedlisteners for properly timed callback when handshake_cutthrough.<br>patch delays handshake completion until first sslsocket.<br>getinputstream( read.<br> - similar enabledprotocols/enabledciphersuites changes as opensslserversocketimpl since we need to store the state somewhere other than an openssl ssl struct until we are sure if we are doing a client or server handshake.<br> - added handshake completed field so that starthandshake can tell if handshake was completed during ssl_do_handshake or will be completed later by a call to handshakecompletedcallback.<br>handshakecompleted.<br> - removed nativegetsession as the equivalent value is now returned by ssl_do_handshake - removed nativecipherauthenticationmethod as the value is now passed to verifycertificatechain - starthandshake is now a wrapper that forces a fully synchronous handshake - starthandshake(boolean) is the the most changed method in this changelist, combinding both the old starthandshake logic, but also the opensslsocketimpl.<br>accept code as well.<br> notable differences from the old code: * now responsible for ssl_new * single code path for client/server handshaking dealing with sslsession caching * now handles server certificate requests previously in opensslserversocketimpl, since a client can request to act like a server and therefore need to be able to make suck demands on its peer.<br> * supports turning off handshake_cutthrough at a callers request via explicit call to starthandshake( * certificate verification happens during an upcall from openssl during ssl_do_handshake to verifycertificatechain for both client and server cases.<br> previously there was not quite right upcall support on the server side and post-handshake checking on the client, which did not allow for a proper alert to be sent to the peer informing them of the issue, which the ri and sslengine code do.<br> * similarly, setenablesessioncreation(false) did not send an alert to the peer as the ri and sslengine code in the client case.<br> in the server case, nothing was previously done.<br> * the use of local certificates was not determined from introspecting the ssl struct post-handshake.<br> this is now partially implemented and will be completed in a later change.<br> - sslsocket.{shutdowninput,shutdownoutput} are now restored to the proper behavior of throwing unsupportedoperationexception.<br> - gutted opensslsocketimpl finalizer.<br> the comment explains in detail the trouble of having the finalizer do anything more than touch its the instances own state due to unpredictable order of finalization and the future possability of parallel finalization.<br> x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl.<br>java sslsession fixes - made opensslsessionimpl.<br>sessioncontext non-final so it could be nulled by sslsession.<br>invalidate to match ri behavior.<br> - as noted in abstractsessioncontext discussion, removed opensslsessionimpl constructor that took sslparameters, instead we take the possibly null localcertificates directly.<br> opensslsessionimpl.<br>getlocalcertificates now simply returns the localcertificates member variable instead of incorrectly trying to query the keymanager for certificates that may not have been used.<br> - opensslsessionimpl now caches its native id to avoid numerious native calls but also now provides as resetid which will update the cache when a delayed handshake happens due to the handshake_cutthrough.<br>patch - fixed bug in getpeerprincipal that it wasn't calling getpeercertificates to initialize peercertificates field.<br> - freeimpl is now 'public static' in preparation for move to nativecrypto.<br> x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsessionimpl.<br>java the old sslsessionimpl class that is still used for representing the invalid session now returns isvalid    false and getprotocol    "none" to match the ri.<br> x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/sslsessionimpl.<br>java nativecrypto improvements - adding nativecrypto.<br>ssl_{get,set,clear}_mode similar to nativecrypto.<br>ssl_{get,set,clear}_options along with ssl_mode_handshake_cutthrough constant which is used to explicitly disable/enable the android handshake_cutthrough.<br>patch behavior.<br> - added missing nativecrypto.<br>ssl_clear_options and used to properly implement nativecrypto.<br>setenabledprotocols.<br> - added nativecrypto.<br>checkenabledprotocols and nativecrypto.<br>checkenabledciphersuites helpers to implement exception compatability with the ri.<br> while some of this code is refactored from existing nativecrypto code, it is now also used by opensslserversocketimpl and opensslsocketimpl which maintain their own string[]s of what is enabled until starthandshake time.<br> (see below) - changed nativecrypto.<br>findsuite to use foreach style loop for clarity.<br> - moved opensslserversocketimpl nativesetclientauth and ssl_verify_* constants to nativecrypto.<br>ssl_set_verify - added nativecrypto.<br>ssl_set_session based on part of old opensslsocketimpl.<br>nativeconnect - added nativecrypto.<br>ssl_set_session_creation_enabled to properly implement sslsocket.<br>setenablesessioncreation(false) which uses new external/openssl/patches/jsse.<br>patch functionality.<br> - new nativecrypto.<br>ssl_do_handshake consolidates opensslsocketimpl.{nativeconnect, nativeaccept} while properly implementing sslsocket.<br>setuseclientmode(false) for clients and sslsocket.<br>setuseclientmode(true) for servers.<br> - new nativecrypto.<br>ssl_get_certificate is determine if local certificate requested by peer.<br> while functional, currently nativecrypto.<br>ssl_new always sets a value via ssl_use_certificate instead of relying on a callback set via ssl_ctx_set_client_cert_cb.<br> - changed nativecrypto.<br>certificatechainverifier.<br>verifycertificatechain to throw a checked certificateexception to match trustmanager.{checkservertrusted, checkclienttrusted}.<br> it also takes an authmethod so avoid the need to call the old opensslsocketimpl.<br>nativecipherauthenticationmethod.<br> - added nativecrypto.<br>handshakecompletedcallback which has its handshakecompleted method called from openssl when the now delayed handshake_cutthrough.<br>patch handshake is completed so sslsession caching can be delayed until a session id is available and to provide a better time for handshakecompletedlisteners to be notified.<br> x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/nativecrypto.<br>java x-net/src/main/native/org_apache_harmony_xnet_provider_jsse_nativecrypto.<br>chat post some other changes specific to the naitve side of the code - added jnitrace calls (enabled at compile time with jni_trace) for future debugging.<br> - throw sslexception subclass of ioexception instead ioexception itself for better ri compatability x-net/src/main/native/org_apache_harmony_xnet_provider_jsse_nativecrypto.<br>chat post - changed from old struct app_data to new class appdata at enh's request remove dubious usage of sslparameters within abstractsessioncontext to pass through to opensslsessionimpl constructor for use in calling getlocalcertificates for sessions created from a byte array with abstractsessioncontext.<br>tosession.<br> our abstractsessioncontext.<br>tobytes doesn't currently include the local certificates in its output, so it cannot be expected to have in tosession.<br> x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/abstractsessioncontext.<br>java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/clientsessioncontext.<br>java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/serversessioncontext.<br>java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/sslparameters.<br>java test maintenance openssl 1.0.0 adds support for rfc 4507 session tickets which remove the need for server side session state.<br> these tests needed to be updated for this new behavior.<br> if is_ri is true, they still follow the old behavior.<br> luni/src/test/java/javax/net/ssl/sslsessioncontexttest.<br>java luni/src/test/java/javax/net/ssl/sslsessiontest.<br>java luni/src/test/java/javax/net/ssl/sslsockettest.<br>java update knownfailures and add specific comments at point of failure about what remains to be fixed.<br> luni/src/test/java/javax/net/ssl/sslsessiontest.<br>java added tests to cover the use of standard cipher suite names.<br> historically android has used openssl string constants for cipher suite names, but jsse actually specifies supported and expected names.<br> luni/src/test/java/javax/net/ssl/sslsocketfactorytest.<br>java luni/src/test/java/javax/net/ssl/sslsockettest.<br>java create new support/src/test/java/javax/net/ssl with old helper support code pulled from javax.<br>net.<br>ssl tests: sslcontexttest.<br>helper -  testsslcontext sslsockettest.<br>helper -  testsslsocketpair sslsessiontest.<br>helper -  testsslsessions also added new standardnames here, which contains a collection of expected constants for test validation.<br> luni/src/test/java/javax/net/ssl/sslcontexttest.<br>java luni/src/test/java/javax/net/ssl/sslsockettest.<br>java luni/src/test/java/javax/net/ssl/sslsessiontest.<br>java support/src/test/java/javax/net/ssl/testsslcontext.<br>java support/src/test/java/javax/net/ssl/testsslsocketpair.<br>java support/src/test/java/javax/net/ssl/testsslsessions.<br>java support/src/test/java/javax/net/ssl/standardnames.<br>java removed some now fixed knownfailures and unneeded !<br>is_ri code.<br> marked some [un]knownfailures where exceptions are thrown and visible in the output but aren't correctly causing the test to fail.<br> fixed assertnonnull to asserttrue in test_sslsockettest_test_create.<br> added stress_test_sslsockettest_test_create to track down test flakiness, leading to rewrite of sslsocket finalization.<br> luni/src/test/java/javax/net/ssl/sslsockettest.<br>java reenable javax.<br>net.<br>ssl.<br>alltests now that it is does not hang luni/src/test/java/tests/alltests.<br>java improve error messages while debugging overflow problem.<br> added new assert when debugging new rfc 4507 behavior.<br> removed knownfailure annotation for now working test case.<br> x-net/src/test/java/tests/api/javax/net/ssl/sslsessiontest.<br>java client code changes now that starthandshake implies synchronous vs android's default async handshake, remove unneeded explict calls to sslsocket.<br>starthandshake luni/src/main/java/org/apache/harmony/luni/internal/net/ww/protocol/http/httpconnection.<br>java removed ibm 1.4.<br>x codepath that involved starthandshake x-net/src/main/java/javax/net/ssl/defaulthostnameverifier.<br>java unrelated remove unneed sslsocket.<br>setuseclientmode while removing unneeded sslsocket.<br>starthandshake luni/src/main/java/org/apache/harmony/luni/internal/net/ww/protocol/http/httpconnection.<br>java removed warnings due to now missing modules in classpath run-core-tests change-id: i6e149ae259b3feccdfb0673209c85cfeb60befc8	2	-2	 11483[0] commit[0] bcfb325d5b1f9529b439cc0805a1c140521510f7[0] opensslsocket[0] handshake[0] overhaul[0] summary[0] sslsocket[0] [[Sentence=-1,1=word max, 1-5]] starthandshake[0] now[0] generalized[0] to[0] handle[0] both[0] client[0] and[0] server[0] handshaking[0] as[0] well[0] as[0] client/server[0] role[0] reversal[0] handshake_cutthrough[0] [[Sentence=-1,1=word max, 1-5]] patch[0] is[0] properly[0] integrated[0] with[0] support[0] delayed[0] handshake[0] completion[0] now[0] integrated[0] with[0] delayed[0] updates[0] to[0] session[0] cache[0] and[0] callbacks[0] to[0] handshakecompletedlisteners[0] many[0] fixes[0] to[0] sslsession[0] which[0] is[0] the[0] end[0] product[0] of[0] the[0] handshake[0] generally[0] more[0] ri[0] and[0] sslengine[0] compliant[0] behavior[0] [[Sentence=-1,1=word max, 1-5]] more[0] native[0] code[0] deletion[0] through[0] unification[0] of[0] client/server[0] handshake[0] unification[0] of[0] client/server[0] certificate[0] chain[0] verification[0] etc[0] [[Sentence=-1,1=word max, 1-5]] more[0] native[0] code[0] moved[0] from[0] various[0] openssl[0] classes[0] to[0] cleaner[0] nativecrypto[0] interfaces[0] that[0] more[0] directly[0] mirror[0] the[0] openssl[0] interfaces[0] [[Sentence=-1,1=word max, 1-5]] details[0] delay[-1] ssl_new[0] call[0] until[0] handshake[0] time[0] when[0] we[0] know[0] for[0] sure[0] whether[0] the[0] opensslsocket[0] will[0] be[0] used[0] in[0] client[0] or[0] server[0] mode[0] and[0] we[0] can[0] allocate[0] the[0] ssl_new[0] from[0] the[0] apppriate/appriate[0] client[0] or[0] server[0] ssl_ctx[0] used[0] for[0] session[0] caching[0] [[Sentence=-2,1=word max, 1-5]] now[0] that[0] no[0] ssl[0] is[0] allocated[0] for[0] an[0] opensslserversocketimpl[0] store[0] enabledprotocols[0] and[0] enabledciphersuites[0] in[0] instance[0] string[0] arrays[0] [[Sentence=-1,1=word max, 1-5]] use[0] new[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] checkenabled[0] methdods[0] for[0] argument[-1] validation[0] [[Sentence=-2,1=word max, 1-5]] opensslserversocketimpl[0] passes[0] these[0] enabled[0] arrays[0] to[0] a[0] new[0] opensslsocket[0] constructor[0] during[0] accept[0] [[Sentence=-1,1=word max, 1-5]] removed[0] finalizer[0] from[0] opensslserversocketimpl[0] since[0] it[0] no[0] longer[0] has[0] any[0] native[0] storage[0] and[0] socket[0] is[0] already[0] closed[0] by[0] plainsocketimpl[0] finalizer[0] [[Sentence=-1,1=word max, 1-5]] x[1] net/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslserversocketimpl[0] [[Sentence=-1,2=word max, 1-5]] java[0] x[1] net/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl[0] [[Sentence=-1,2=word max, 1-5]] java[0] opensslsocket[0] major[0] overhaul[0] to[0] properly[0] implement[0] handshaking[0] including[0] switching[0] client[0] and[0] server[0] roles[0] and[0] session[0] id[0] caching[0] with[0] handshake_cutthrough[0] [[Sentence=-1,1=word max, 1-5]] patch[0] [[Sentence=-1,1=word max, 1-5]] now[0] implements[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] handshakecompletedlisteners[0] for[0] properly[0] timed[0] callback[0] when[0] handshake_cutthrough[0] [[Sentence=-1,1=word max, 1-5]] patch[0] delays[0] handshake[0] completion[0] until[0] first[0] sslsocket[0] [[Sentence=-1,1=word max, 1-5]] getinputstream[0] read[0] [[Sentence=-1,1=word max, 1-5]] similar[0] enabledprotocols/enabledciphersuites[0] changes[0] as[0] opensslserversocketimpl[0] since[0] we[0] need[0] to[0] store[0] the[0] state[0] somewhere[0] other[0] than[0] an[0] openssl[0] ssl[0] struct[0] until[0] we[0] are[0] sure[0] if[0] we[0] are[0] doing[0] a[0] client[0] or[0] server[0] handshake[0] [[Sentence=-1,1=word max, 1-5]] added[0] handshake[0] completed[0] field[0] so[0] that[0] starthandshake[0] can[0] tell[0] if[0] handshake[0] was[0] completed[0] during[0] ssl_do_handshake[0] or[0] will[0] be[0] completed[0] later[0] by[0] a[0] call[0] to[0] handshakecompletedcallback[0] [[Sentence=-1,1=word max, 1-5]] handshakecompleted[0] [[Sentence=-1,1=word max, 1-5]] removed[0] nativegetsession[0] as[0] the[0] equivalent[0] value[0] is[0] now[0] returned[0] by[0] ssl_do_handshake[0] removed[0] nativecipherauthenticationmethod[0] as[0] the[0] value[0] is[0] now[0] passed[0] to[0] verifycertificatechain[0] starthandshake[0] is[0] now[0] a[0] wrapper[0] that[0] forces[0] a[0] fully[0] synchronous[0] handshake[0] starthandshake[0] boolean[0] is[0] the[0] the[0] most[0] changed[0] method[0] in[0] this[0] changelist[0] combinding[0] both[0] the[0] old[0] starthandshake[0] logic[0] but[0] also[0] the[0] opensslsocketimpl[0] [[Sentence=-1,1=word max, 1-5]] accept[0] code[0] as[0] well[0] [[Sentence=-1,1=word max, 1-5]] notable[0] differences[0] from[0] the[0] old[0] code[0] now[0] responsible[0] for[0] ssl_new[0] single[0] code[0] path[0] for[0] client/server[0] handshaking[0] dealing[0] with[0] sslsession[0] caching[0] now[0] handles[0] server[0] certificate[0] requests[0] previously[0] in[0] opensslserversocketimpl[0] since[0] a[0] client[0] can[0] request[0] to[0] act[0] like[0] a[0] server[0] and[0] therefore[0] need[0] to[0] be[0] able[0] to[0] make[0] suck[-1] demands[0] on[0] its[0] peer[0] [[Sentence=-2,1=word max, 1-5]] supports[1] turning[0] off[0] handshake_cutthrough[0] at[0] a[0] callers[0] request[0] via[0] explicit[0] call[0] to[0] starthandshake[0] certificate[0] verification[0] happens[0] during[0] an[0] upcall[0] from[0] openssl[0] during[0] ssl_do_handshake[0] to[0] verifycertificatechain[0] for[0] both[0] client[0] and[0] server[0] cases[0] [[Sentence=-1,2=word max, 1-5]] previously[0] there[0] was[0] not[0] quite[0] right[0] upcall[0] support[0] on[0] the[0] server[0] side[0] and[0] post[0] handshake[0] checking[0] on[0] the[0] client[0] which[0] did[0] not[0] allow[0] for[0] a[0] proper[0] alert[0] to[0] be[0] sent[0] to[0] the[0] peer[0] informing[0] them[0] of[0] the[0] issue[0] which[0] the[0] ri[0] and[0] sslengine[0] code[0] do[0] [[Sentence=-1,1=word max, 1-5]] similarly[0] setenablesessioncreation[0] false[0] did[0] not[0] send[0] an[0] alert[0] to[0] the[0] peer[0] as[0] the[0] ri[0] and[0] sslengine[0] code[0] in[0] the[0] client[0] case[0] [[Sentence=-1,1=word max, 1-5]] in[0] the[0] server[0] case[0] nothing[0] was[0] previously[0] done[0] [[Sentence=-1,1=word max, 1-5]] the[0] use[0] of[0] local[0] certificates[0] was[0] not[0] determined[0] from[0] introspecting[0] the[0] ssl[0] struct[0] post[0] handshake[0] [[Sentence=-1,1=word max, 1-5]] this[0] is[0] now[0] partially[0] implemented[0] and[0] will[0] be[0] completed[0] in[0] a[0] later[0] change[0] [[Sentence=-1,1=word max, 1-5]] sslsocket[0] .{shutdowninput[0] shutdownoutput}[0] are[0] now[0] restored[0] to[0] the[0] proper[0] behavior[0] of[0] throwing[0] unsupportedoperationexception[0] [[Sentence=-1,1=word max, 1-5]] gutted[0] opensslsocketimpl[0] finalizer[0] [[Sentence=-1,1=word max, 1-5]] the[0] comment[0] explains[0] in[0] detail[0] the[0] trouble[-1] of[0] having[0] the[0] finalizer[0] do[0] anything[0] more[0] than[0] touch[0] its[0] the[0] instances[0] own[0] state[0] due[0] to[0] unpredictable[0] order[0] of[0] finalization[0] and[0] the[0] future[0] possability[0] of[0] parallel[0] finalization[0] [[Sentence=-2,1=word max, 1-5]] x[1] net/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsocketimpl[0] [[Sentence=-1,2=word max, 1-5]] java[0] sslsession[0] fixes[0] made[0] opensslsessionimpl[0] [[Sentence=-1,1=word max, 1-5]] sessioncontext[0] non[0] final[0] so[0] it[0] could[0] be[0] nulled[0] by[0] sslsession[0] [[Sentence=-1,1=word max, 1-5]] invalidate[-1] to[0] match[0] ri[0] behavior[0] [[Sentence=-2,1=word max, 1-5]] as[0] noted[0] in[0] abstractsessioncontext[0] discussion[0] removed[0] opensslsessionimpl[0] constructor[0] that[0] took[0] sslparameters[0] instead[0] we[0] take[0] the[0] possibly[0] null[0] localcertificates[0] directly[0] [[Sentence=-1,1=word max, 1-5]] opensslsessionimpl[0] [[Sentence=-1,1=word max, 1-5]] getlocalcertificates[0] now[0] simply[0] returns[0] the[0] localcertificates[0] member[0] variable[0] instead[0] of[0] incorrectly[0] trying[0] to[0] query[0] the[0] keymanager[0] for[0] certificates[0] that[0] may[0] not[0] have[0] been[0] used[0] [[Sentence=-1,1=word max, 1-5]] opensslsessionimpl[0] now[0] caches[0] its[0] native[0] id[0] to[0] avoid[-1] numerious[0] native[0] calls[0] but[0] also[0] now[0] provides[0] as[0] resetid[0] which[0] will[0] update[0] the[0] cache[0] when[0] a[0] delayed[0] handshake[0] happens[0] due[0] to[0] the[0] handshake_cutthrough[0] [[Sentence=-2,1=word max, 1-5]] patch[0] fixed[0] bug[0] in[0] getpeerprincipal[0] that[0] it[0] wasn't[0] calling[0] getpeercertificates[0] to[0] initialize[0] peercertificates[0] field[0] [[Sentence=-1,1=word max, 1-5]] freeimpl[0] is[0] now[0] 'public[0] static'[0] in[0] preparation[0] for[0] move[0] to[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] x[1] net/src/main/java/org/apache/harmony/xnet/provider/jsse/opensslsessionimpl[0] [[Sentence=-1,2=word max, 1-5]] java[0] the[0] old[0] sslsessionimpl[0] class[0] that[0] is[0] still[0] used[0] for[0] representing[0] the[0] invalid[-1] session[0] now[0] returns[0] isvalid[0] false[0] and[0] getprotocol[0] none[0] to[0] match[0] the[0] ri[0] [[Sentence=-2,1=word max, 1-5]] x[1] net/src/main/java/org/apache/harmony/xnet/provider/jsse/sslsessionimpl[0] [[Sentence=-1,2=word max, 1-5]] java[0] nativecrypto[0] improvements[1] adding[0] nativecrypto[0] [[Sentence=-1,2=word max, 1-5]] ssl_{get[0] set[0] clear}_mode[0] similar[0] to[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] ssl_{get[0] set[0] clear}_options[0] along[0] with[0] ssl_mode_handshake_cutthrough[0] constant[0] which[0] is[0] used[0] to[0] explicitly[0] disable/enable[0] the[0] android[0] handshake_cutthrough[0] [[Sentence=-1,1=word max, 1-5]] patch[0] behavior[0] [[Sentence=-1,1=word max, 1-5]] added[0] missing[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] ssl_clear_options[0] and[0] used[0] to[0] properly[0] implement[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] setenabledprotocols[0] [[Sentence=-1,1=word max, 1-5]] added[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] checkenabledprotocols[0] and[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] checkenabledciphersuites[0] helpers[0] to[0] implement[0] exception[0] compatability[0] with[0] the[0] ri[0] [[Sentence=-1,1=word max, 1-5]] while[0] some[0] of[0] this[0] code[0] is[0] refactored[0] from[0] existing[0] nativecrypto[0] code[0] it[0] is[0] now[0] also[0] used[0] by[0] opensslserversocketimpl[0] and[0] opensslsocketimpl[0] which[0] maintain[0] their[0] own[0] string[]s[0] of[0] what[0] is[0] enabled[0] until[0] starthandshake[0] time[0] [[Sentence=-1,1=word max, 1-5]] see[0] below[0] changed[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] findsuite[0] to[0] use[0] foreach[0] style[0] loop[0] for[0] clarity[0] [[Sentence=-1,1=word max, 1-5]] moved[0] opensslserversocketimpl[0] nativesetclientauth[0] and[0] ssl_verify_[0] constants[0] to[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] ssl_set_verify[0] added[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] ssl_set_session[0] based[0] on[0] part[0] of[0] old[0] opensslsocketimpl[0] [[Sentence=-1,1=word max, 1-5]] nativeconnect[0] added[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] ssl_set_session_creation_enabled[0] to[0] properly[0] implement[0] sslsocket[0] [[Sentence=-1,1=word max, 1-5]] setenablesessioncreation[0] false[0] which[0] uses[0] new[0] external/openssl/patches/jsse[0] [[Sentence=-1,1=word max, 1-5]] patch[0] functionality[0] [[Sentence=-1,1=word max, 1-5]] new[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] ssl_do_handshake[0] consolidates[0] opensslsocketimpl[0] .{nativeconnect[0] nativeaccept}[0] while[0] properly[0] implementing[0] sslsocket[0] [[Sentence=-1,1=word max, 1-5]] setuseclientmode[0] false[0] for[0] clients[0] and[0] sslsocket[0] [[Sentence=-1,1=word max, 1-5]] setuseclientmode[0] true[1] for[0] servers[0] [[Sentence=-1,2=word max, 1-5]] new[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] ssl_get_certificate[0] is[0] determine[0] if[0] local[0] certificate[0] requested[0] by[0] peer[0] [[Sentence=-1,1=word max, 1-5]] while[0] functional[0] currently[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] ssl_new[0] always[0] sets[0] a[0] value[0] via[0] ssl_use_certificate[0] instead[0] of[0] relying[0] on[0] a[0] callback[0] set[0] via[0] ssl_ctx_set_client_cert_cb[0] [[Sentence=-1,1=word max, 1-5]] changed[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] certificatechainverifier[0] [[Sentence=-1,1=word max, 1-5]] verifycertificatechain[0] to[0] throw[0] a[0] checked[0] certificateexception[0] to[0] match[0] trustmanager[1] .{checkservertrusted[0] checkclienttrusted}[0] [[Sentence=-1,2=word max, 1-5]] it[0] also[0] takes[0] an[0] authmethod[0] so[0] avoid[-1] the[0] need[0] to[0] call[0] the[0] old[0] opensslsocketimpl[0] [[Sentence=-2,1=word max, 1-5]] nativecipherauthenticationmethod[0] [[Sentence=-1,1=word max, 1-5]] added[0] nativecrypto[0] [[Sentence=-1,1=word max, 1-5]] handshakecompletedcallback[0] which[0] has[0] its[0] handshakecompleted[0] method[0] called[0] from[0] openssl[0] when[0] the[0] now[0] delayed[0] handshake_cutthrough[0] [[Sentence=-1,1=word max, 1-5]] patch[0] handshake[0] is[0] completed[0] so[0] sslsession[0] caching[0] can[0] be[0] delayed[0] until[0] a[0] session[0] id[0] is[0] available[0] and[0] to[0] provide[0] a[0] better[0] time[0] for[0] handshakecompletedlisteners[0] to[0] be[0] notified[0] [[Sentence=-1,1=word max, 1-5]] x[1] net/src/main/java/org/apache/harmony/xnet/provider/jsse/nativecrypto[0] [[Sentence=-1,2=word max, 1-5]] java[0] x[1] net/src/main/native/org_apache_harmony_xnet_provider_jsse_nativecrypto[0] [[Sentence=-1,2=word max, 1-5]] cpp/cp[0] some[0] other[0] changes[0] specific[0] to[0] the[0] naitve[0] side[0] of[0] the[0] code[0] added[0] jnitrace[0] calls[0] enabled[0] at[0] compile[0] time[0] with[0] jni_trace[0] for[0] future[0] debugging[0] [[Sentence=-1,1=word max, 1-5]] throw[0] sslexception[0] subclass[0] of[0] ioexception[0] instead[0] ioexception[0] itself[0] for[0] better[0] ri[0] compatability[0] x[1] net/src/main/native/org_apache_harmony_xnet_provider_jsse_nativecrypto[0] [[Sentence=-1,2=word max, 1-5]] cpp/cp[0] changed[0] from[0] old[0] struct[0] app_data[0] to[0] new[0] class[0] appdata[0] at[0] enh's[0] request[0] remove[0] dubious[-1] usage[0] of[0] sslparameters[0] within[0] abstractsessioncontext[0] to[0] pass[0] through[0] to[0] opensslsessionimpl[0] constructor[0] for[0] use[0] in[0] calling[0] getlocalcertificates[0] for[0] sessions[0] created[0] from[0] a[0] byte[0] array[0] with[0] abstractsessioncontext[0] [[Sentence=-2,1=word max, 1-5]] tosession[0] [[Sentence=-1,1=word max, 1-5]] our[0] abstractsessioncontext[0] [[Sentence=-1,1=word max, 1-5]] tobytes[0] doesn't[0] currently[0] include[0] the[0] local[0] certificates[0] in[0] its[0] output[0] so[0] it[0] cannot[0] be[0] expected[0] to[0] have[0] in[0] tosession[0] [[Sentence=-1,1=word max, 1-5]] x[1] net/src/main/java/org/apache/harmony/xnet/provider/jsse/abstractsessioncontext[0] [[Sentence=-1,2=word max, 1-5]] java[0] x[1] net/src/main/java/org/apache/harmony/xnet/provider/jsse/clientsessioncontext[0] [[Sentence=-1,2=word max, 1-5]] java[0] x[1] net/src/main/java/org/apache/harmony/xnet/provider/jsse/serversessioncontext[0] [[Sentence=-1,2=word max, 1-5]] java[0] x[1] net/src/main/java/org/apache/harmony/xnet/provider/jsse/sslparameters[0] [[Sentence=-1,2=word max, 1-5]] java[0] test[0] maintenance[0] openssl[0] 1[0] .0[0] .0[0] adds[0] support[0] for[0] rfc[0] 4507[0] session[0] tickets[0] which[0] remove[0] the[0] need[0] for[0] server[0] side[0] session[0] state[0] [[Sentence=-1,1=word max, 1-5]] these[0] tests[0] needed[0] to[0] be[0] updated[0] for[0] this[0] new[0] behavior[0] [[Sentence=-1,1=word max, 1-5]] if[0] is_ri[0] is[0] true[1] they[0] still[0] follow[0] the[0] old[0] behavior[0] [[Sentence=-1,2=word max, 1-5]] luni/src/test/java/javax/net/ssl/sslsessioncontexttest[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/javax/net/ssl/sslsessiontest[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/javax/net/ssl/sslsockettest[0] [[Sentence=-1,1=word max, 1-5]] java[0] update[0] knownfailures[0] and[0] add[0] specific[0] comments[0] at[0] point[0] of[0] failure[0] about[0] what[0] remains[0] to[0] be[0] fixed[0] [[Sentence=-1,1=word max, 1-5]] luni/src/test/java/javax/net/ssl/sslsessiontest[0] [[Sentence=-1,1=word max, 1-5]] java[0] added[0] tests[0] to[0] cover[0] the[0] use[0] of[0] standard[0] cipher[0] suite[0] names[0] [[Sentence=-1,1=word max, 1-5]] historically[0] android[0] has[0] used[0] openssl[0] string[0] constants[0] for[0] cipher[0] suite[0] names[0] but[0] jsse[0] actually[0] specifies[0] supported[1] and[0] expected[0] names[0] [[Sentence=-1,2=word max, 1-5]] luni/src/test/java/javax/net/ssl/sslsocketfactorytest[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/javax/net/ssl/sslsockettest[0] [[Sentence=-1,1=word max, 1-5]] java[0] create[0] new[0] support/src/test/java/javax/net/ssl[0] with[0] old[0] helper[0] support[0] code[0] pulled[0] from[0] javax[0] [[Sentence=-1,1=word max, 1-5]] net[0] [[Sentence=-1,1=word max, 1-5]] ssl[0] tests[0] sslcontexttest[0] [[Sentence=-1,1=word max, 1-5]] helper[0] testsslcontext[0] sslsockettest[0] [[Sentence=-1,1=word max, 1-5]] helper[0] testsslsocketpair[0] sslsessiontest[0] [[Sentence=-1,1=word max, 1-5]] helper[0] testsslsessions[0] also[0] added[0] new[0] standardnames[0] here[0] which[0] contains[0] a[0] collection[0] of[0] expected[0] constants[0] for[0] test[0] validation[0] [[Sentence=-1,1=word max, 1-5]] luni/src/test/java/javax/net/ssl/sslcontexttest[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/javax/net/ssl/sslsockettest[0] [[Sentence=-1,1=word max, 1-5]] java[0] luni/src/test/java/javax/net/ssl/sslsessiontest[0] [[Sentence=-1,1=word max, 1-5]] java[0] support/src/test/java/javax/net/ssl/testsslcontext[0] [[Sentence=-1,1=word max, 1-5]] java[0] support/src/test/java/javax/net/ssl/testsslsocketpair[0] [[Sentence=-1,1=word max, 1-5]] java[0] support/src/test/java/javax/net/ssl/testsslsessions[0] [[Sentence=-1,1=word max, 1-5]] java[0] support/src/test/java/javax/net/ssl/standardnames[0] [[Sentence=-1,1=word max, 1-5]] java[0] removed[0] some[0] now[0] fixed[0] knownfailures[0] and[0] unneeded[0] [[Sentence=-1,1=word max, 1-5]] is_ri[0] code[0] [[Sentence=-1,1=word max, 1-5]] marked[0] some[0] [un]knownfailures[0] where[0] exceptions[0] are[0] thrown[0] and[0] visible[0] in[0] the[0] output[0] but[0] aren't[0] correctly[0] causing[0] the[0] test[0] to[0] fail[0] [[Sentence=-1,1=word max, 1-5]] fixed[0] assertnonnull[0] to[0] asserttrue[0] in[0] test_sslsockettest_test_create[0] [[Sentence=-1,1=word max, 1-5]] added[0] stress_test_sslsockettest_test_create[-1] to[0] track[0] down[0] test[0] flakiness[0] leading[0] to[0] rewrite[0] of[0] sslsocket[0] finalization[0] [[Sentence=-2,1=word max, 1-5]] luni/src/test/java/javax/net/ssl/sslsockettest[0] [[Sentence=-1,1=word max, 1-5]] java[0] reenable[0] javax[0] [[Sentence=-1,1=word max, 1-5]] net[0] [[Sentence=-1,1=word max, 1-5]] ssl[0] [[Sentence=-1,1=word max, 1-5]] alltests[0] now[0] that[0] it[0] is[0] does[0] not[0] hang[-1][NegatedDueToPreviousWord] luni/src/test/java/tests/alltests[0] [[Sentence=-1,2=word max, 1-5]] java[0] improve[1] error[0] messages[0] while[0] debugging[0] overflow[0] problem[-1] [[Sentence=-2,2=word max, 1-5]] added[0] new[0] assert[0] when[0] debugging[0] new[0] rfc[0] 4507[0] behavior[0] [[Sentence=-1,1=word max, 1-5]] removed[0] knownfailure[0] annotation[0] for[0] now[0] working[0] test[0] case[0] [[Sentence=-1,1=word max, 1-5]] x[1] net/src/test/java/tests/api/javax/net/ssl/sslsessiontest[0] [[Sentence=-1,2=word max, 1-5]] java[0] client[0] code[0] changes[0] now[0] that[0] starthandshake[0] implies[0] synchronous[0] vs[0] android's[0] default[-1] async[0] handshake[0] remove[0] unneeded[0] explict[0] calls[0] to[0] sslsocket[0] [[Sentence=-2,1=word max, 1-5]] starthandshake[0] luni/src/main/java/org/apache/harmony/luni/internal/net/www/protocol/http/httpconnection/luni/src/main/java/org/apache/harmony/luni/internal/net/ww/protocol/http/httpconnection[0] [[Sentence=-1,1=word max, 1-5]] java[0] removed[0] ibm[0] 1[0] .4[0] [[Sentence=-1,1=word max, 1-5]] x[1] codepath[0] that[0] involved[0] starthandshake[0] x[1] net/src/main/java/javax/net/ssl/defaulthostnameverifier[0] [[Sentence=-1,2=word max, 1-5]] java[0] unrelated[0] remove[0] unneed[0] sslsocket[0] [[Sentence=-1,1=word max, 1-5]] setuseclientmode[0] while[0] removing[0] unneeded[0] sslsocket[0] [[Sentence=-1,1=word max, 1-5]] starthandshake[0] luni/src/main/java/org/apache/harmony/luni/internal/net/www/protocol/http/httpconnection/luni/src/main/java/org/apache/harmony/luni/internal/net/ww/protocol/http/httpconnection[0] [[Sentence=-1,1=word max, 1-5]] java[0] removed[0] warnings[0] due[0] to[0] now[0] missing[0] modules[0] in[0] classpath[0] run[0] core[0] tests[0] change[0] id[0] i6e149ae259b3feccdfb0673209c85cfeb60befc8[0] [[Sentence=-1,1=word max, 1-5]][[[2,-2 max of sentences]]]
12313 commit a1df197865bf7c86448ad5434ac56e6a9020e2d1 dalvikrunner can run a test as an android.app.activity & pathclassloader.tostring change summary: - pathclassloader.tostring prints path - dalvikrunner --mode activity now working - new dalvikrunner --no-clean vs --no-clean-after behavior details dalvik runtime change changed pathclassloader.tostring to print the class loaders path also fixed variable name in commented out debug code libcore/dalvik/src/main/java/dalvik/system/pathclassloader.java dalvik runner changes mode is the new abstract superclass of the existing vm class. activitymode is for the new mode of running as a activity on the device. vm is now a subclass of mode and its javavm and devicedalvikvm still exist although some code has been refactored into the new environment clases (see below) libcore/tools/runner/java/dalvik/runner/mode.java libcore/tools/runner/java/dalvik/runner/activitymode.java libcore/tools/runner/java/dalvik/runner/devicedalvikvm.java libcore/tools/runner/java/dalvik/runner/javavm.java libcore/tools/runner/java/dalvik/runner/vm.java environment and its subclasses environmenthost and environmentdevice allow us to reuse some common code between the two different device modes (activitymode and devicedalvikvm). basically code that was more about where and how to do things based on where the code was running as opposed to how the code was running moved to the environment classes. for example, prepare() logic for /sdcard/ and adb code in general. libcore/tools/runner/java/dalvik/runner/devicedalvikvm.java libcore/tools/runner/java/dalvik/runner/environment.java libcore/tools/runner/java/dalvik/runner/environmentdevice.java libcore/tools/runner/java/dalvik/runner/environmenthost.java libcore/tools/runner/java/dalvik/runner/javavm.java libcore/tools/runner/java/dalvik/runner/vm.java adding new files libcore/tools/runner/android.mk aapt is a wrapper for "aapt" similar to adb and dx libcore/tools/runner/java/dalvik/runner/aapt.java added adb.install and adb.uninstall methods changed from using file.tostring to file.getpath for clarity libcore/tools/runner/java/dalvik/runner/adb.java codefinder has been extended so that driver can ask finders what they need to build and run, specifically through the new getrunnerjava and getrunnerclasspath. (as part of this namingpatterncodefinder's runnerclass was changed to getrunnerclass for consistency with the superclass.) this was important for running as an activity because we want to minimize what we pack into the apk file because of the "dx --dex" runtime and not just pull in all possible runners and supporting libraries. testrun objects also hold onto this information from their finders. libcore/tools/runner/java/dalvik/runner/driver.java libcore/tools/runner/java/dalvik/runner/codefinder.java libcore/tools/runner/java/dalvik/runner/caliperfinder.java libcore/tools/runner/java/dalvik/runner/junitfinder.java libcore/tools/runner/java/dalvik/runner/jtregfinder.java libcore/tools/runner/java/dalvik/runner/mainfinder.java libcore/tools/runner/java/dalvik/runner/namingpatterncodefinder.java libcore/tools/runner/java/dalvik/runner/testrun.java testrunner testrunner's classname is now testclass to clarifiy it from the runnerclass. libcore/tools/runner/java/dalvik/runner/testrunner.java libcore/tools/runner/java/dalvik/runner/caliperrunner.java libcore/tools/runner/java/dalvik/runner/junitrunner.java libcore/tools/runner/java/dalvik/runner/jtregrunner.java libcore/tools/runner/java/dalvik/runner/mainrunner.java classpath now has a collection.of and collection.addall that take a collection file  instead if just a file... libcore/tools/runner/java/dalvik/runner/classpath.java added command.args(file arg) to avoid a lot of args(file.getpath()) libcore/tools/runner/java/dalvik/runner/command.java option --clean has expanded to --clean-before, --clean-after, and --clean. now --no-clean will remove nothing as elliot requested. --no-clean-after is now what is useful for dalvikrunner debuggin. default is still to clean before and after. libcore/tools/runner/java/dalvik/runner/dalvikrunner.java moved vm.dalvik_runner_home to dalvikrunner.home. /tmp/ uuid  paths are now /tmp/dalvikrunner/ uuid  paths are easier cleanup. libcore/tools/runner/java/dalvik/runner/dalvikrunner.java driver was changed to use a executorcompletionservice around the executorservice so that exceptions from the execute threads could be reported on the main thread. libcore/tools/runner/java/dalvik/runner/driver.java we now build the testrunner before the test so that its classes will be around to be packed into apk files. libcore/tools/runner/java/dalvik/runner/driver.java dx.dex now takes file arguments instread of strings. dx.dex also needs to pass additional memory arguments to not run out of memory building the big dex for the apk. the values i used where from the build/core/definitions.mk libcore/tools/runner/java/dalvik/runner/dx.java postcompile was split into postcompiletestrunner and postcompiletest because the packaging requires are very different in each case for activitymode. specifically, the test runner is not post-packaged seperately, but packaged in the apk with each test. libcore/tools/runner/java/dalvik/runner/activitymode.java libcore/tools/runner/java/dalvik/runner/devicedalvikvm.java libcore/tools/runner/java/dalvik/runner/javavm.java libcore/tools/runner/java/dalvik/runner/vm.java changed testclass to test to avoid collision with new superclass field libcore/tools/runner/java/dalvik/runner/jtregrunner.java libcore/tools/runner/java/dalvik/runner/mainrunner.java added @suppresswarnings("unchecked") libcore/tools/runner/java/dalvik/runner/optionparser.java new android.app.activity based on elliot's testapk. it encapsulates an activityrunner that invokes the appropriate testrunner based on test.properties. libcore/tools/runner/java/dalvik/runner/testactivity.java new class that shared contains (old and some new) between the dalvikrunner and the testrunner. libcore/tools/runner/java/dalvik/runner/testproperties.java regression test script for debugging the matrix of various dalvikrunner modes and test types: libcore/tools/runner/test-dalvik-runner.sh 	12313 commit a1df197865bf7c86448ad5434ac56e6a9020e2d1 dalvikrunner can run a test as an android.<br>ap.<br>activity & pathclassloader.<br>tostring change summary: - pathclassloader.<br>tostring prints path - dalvikrunner -mode activity now working - new dalvikrunner -no-clean vs -no-clean-after behavior details dalvik runtime change changed pathclassloader.<br>tostring to print the class loaders path also fixed variable name in commented out debug code libcore/dalvik/src/main/java/dalvik/system/pathclassloader.<br>java dalvik runner changes mode is the new abstract superclass of the existing vm class.<br> activitymode is for the new mode of running as a activity on the device.<br> vm is now a subclass of mode and its javavm and devicedalvikvm still exist although some code has been refactored into the new environment clases (see below) libcore/tools/runner/java/dalvik/runner/mode.<br>java libcore/tools/runner/java/dalvik/runner/activitymode.<br>java libcore/tools/runner/java/dalvik/runner/devicedalvikvm.<br>java libcore/tools/runner/java/dalvik/runner/javavm.<br>java libcore/tools/runner/java/dalvik/runner/vm.<br>java environment and its subclasses environmenthost and environmentdevice allow us to reuse some common code between the two different device modes (activitymode and devicedalvikvm)<br> basically code that was more about where and how to do things based on where the code was running as opposed to how the code was running moved to the environment classes.<br> for example, prepare( logic for /sdcard/ and adb code in general.<br> libcore/tools/runner/java/dalvik/runner/devicedalvikvm.<br>java libcore/tools/runner/java/dalvik/runner/environment.<br>java libcore/tools/runner/java/dalvik/runner/environmentdevice.<br>java libcore/tools/runner/java/dalvik/runner/environmenthost.<br>java libcore/tools/runner/java/dalvik/runner/javavm.<br>java libcore/tools/runner/java/dalvik/runner/vm.<br>java adding new files libcore/tools/runner/android.<br>mk apt is a wrapper for "apt" similar to adb and dx libcore/tools/runner/java/dalvik/runner/apt.<br>java added adb.<br>install and adb.<br>uninstall methods changed from using file.<br>tostring to file.<br>getpath for clarity libcore/tools/runner/java/dalvik/runner/adb.<br>java codefinder has been extended so that driver can ask finders what they need to build and run, specifically through the new getrunnerjava and getrunnerclasspath.<br> (as part of this namingpatterncodefinder's runnerclass was changed to getrunnerclass for consistency with the superclass.<br> this was important for running as an activity because we want to minimize what we pack into the apk file because of the "dx -dex" runtime and not just pull in all possible runners and supporting libraries.<br> testrun objects also hold onto this information from their finders.<br> libcore/tools/runner/java/dalvik/runner/driver.<br>java libcore/tools/runner/java/dalvik/runner/codefinder.<br>java libcore/tools/runner/java/dalvik/runner/caliperfinder.<br>java libcore/tools/runner/java/dalvik/runner/junitfinder.<br>java libcore/tools/runner/java/dalvik/runner/jtregfinder.<br>java libcore/tools/runner/java/dalvik/runner/mainfinder.<br>java libcore/tools/runner/java/dalvik/runner/namingpatterncodefinder.<br>java libcore/tools/runner/java/dalvik/runner/testrun.<br>java testrunner testrunner's classname is now testclass to clarifiy it from the runnerclass.<br> libcore/tools/runner/java/dalvik/runner/testrunner.<br>java libcore/tools/runner/java/dalvik/runner/caliperrunner.<br>java libcore/tools/runner/java/dalvik/runner/junitrunner.<br>java libcore/tools/runner/java/dalvik/runner/jtregrunner.<br>java libcore/tools/runner/java/dalvik/runner/mainrunner.<br>java classpath now has a collection.<br>of and collection.<br>addall that take a collection file  instead if just a file.<br> libcore/tools/runner/java/dalvik/runner/classpath.<br>java added command.<br>args(file arg) to avoid a lot of args(file.<br>getpath( libcore/tools/runner/java/dalvik/runner/command.<br>java option -clean has expanded to -clean-before, -clean-after, and -clean.<br> now -no-clean will remove nothing as elliot requested.<br> -no-clean-after is now what is useful for dalvikrunner debuggin.<br> default is still to clean before and after.<br> libcore/tools/runner/java/dalvik/runner/dalvikrunner.<br>java moved vm.<br>dalvik_runner_home to dalvikrunner.<br>home.<br> /tmp/ uid  paths are now /tmp/dalvikrunner/ uid  paths are easier cleanup.<br> libcore/tools/runner/java/dalvik/runner/dalvikrunner.<br>java driver was changed to use a executorcompletionservice around the executorservice so that exceptions from the execute threads could be reported on the main thread.<br> libcore/tools/runner/java/dalvik/runner/driver.<br>java we now build the testrunner before the test so that its classes will be around to be packed into apk files.<br> libcore/tools/runner/java/dalvik/runner/driver.<br>java dx.<br>dex now takes file arguments instread of strings.<br> dx.<br>dex also needs to pass additional memory arguments to not run out of memory building the big dex for the apk.<br> the values i used where from the build/core/definitions.<br>mk libcore/tools/runner/java/dalvik/runner/dx.<br>java postcompile was split into postcompiletestrunner and postcompiletest because the packaging requires are very different in each case for activitymode.<br> specifically, the test runner is not post-packaged seperately, but packaged in the apk with each test.<br> libcore/tools/runner/java/dalvik/runner/activitymode.<br>java libcore/tools/runner/java/dalvik/runner/devicedalvikvm.<br>java libcore/tools/runner/java/dalvik/runner/javavm.<br>java libcore/tools/runner/java/dalvik/runner/vm.<br>java changed testclass to test to avoid collision with new superclass field libcore/tools/runner/java/dalvik/runner/jtregrunner.<br>java libcore/tools/runner/java/dalvik/runner/mainrunner.<br>java added @suppresswarnings(unchecked" libcore/tools/runner/java/dalvik/runner/optionparser.<br>java new android.<br>ap.<br>activity based on elliot's testapk.<br> it encapsulates an activityrunner that invokes the appropriate testrunner based on test.<br>properties.<br> libcore/tools/runner/java/dalvik/runner/testactivity.<br>java new class that shared contains (old and some new) between the dalvikrunner and the testrunner.<br> libcore/tools/runner/java/dalvik/runner/testproperties.<br>java regression test script for debugging the matrix of various dalvikrunner modes and test types: libcore/tools/runner/test-dalvik-runner.<br>sh	2	-2	 12313[0] commit[0] a1df197865bf7c86448ad5434ac56e6a9020e2d1[0] dalvikrunner[0] can[0] run[0] a[0] test[0] as[0] an[0] android[0] [[Sentence=-1,1=word max, 1-5]] app/ap[0] [[Sentence=-1,1=word max, 1-5]] activity[0] &[0] pathclassloader[0] [[Sentence=-1,1=word max, 1-5]] tostring[0] change[0] summary[0] pathclassloader[0] [[Sentence=-1,1=word max, 1-5]] tostring[0] prints[0] path[0] dalvikrunner[0] mode[0] activity[0] now[0] working[0] new[0] dalvikrunner[0] no[0] clean[0] vs[0] no[0] clean[0] after[0] behavior[0] details[0] dalvik[0] runtime[0] change[0] changed[0] pathclassloader[0] [[Sentence=-1,1=word max, 1-5]] tostring[0] to[0] print[0] the[0] class[0] loaders[0] path[0] also[0] fixed[0] variable[0] name[0] in[0] commented[0] out[0] debug[0] code[0] libcore/dalvik/src/main/java/dalvik/system/pathclassloader[0] [[Sentence=-1,1=word max, 1-5]] java[0] dalvik[0] runner[0] changes[0] mode[0] is[0] the[0] new[0] abstract[0] superclass[0] of[0] the[0] existing[0] vm[0] class[0] [[Sentence=-1,1=word max, 1-5]] activitymode[0] is[0] for[0] the[0] new[0] mode[0] of[0] running[0] as[0] a[0] activity[0] on[0] the[0] device[0] [[Sentence=-1,1=word max, 1-5]] vm[0] is[0] now[0] a[0] subclass[0] of[0] mode[0] and[0] its[0] javavm[0] and[0] devicedalvikvm[0] still[0] exist[0] although[0] some[0] code[0] has[0] been[0] refactored[0] into[0] the[0] new[0] environment[0] clases[0] see[0] below[0] libcore/tools/runner/java/dalvik/runner/mode[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/activitymode[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/devicedalvikvm[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/javavm[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/vm[0] [[Sentence=-1,1=word max, 1-5]] java[0] environment[0] and[0] its[0] subclasses[0] environmenthost[0] and[0] environmentdevice[0] allow[0] us[0] to[0] reuse[0] some[0] common[0] code[0] between[0] the[0] two[0] different[0] device[0] modes[0] activitymode[0] and[0] devicedalvikvm[0] [[Sentence=-1,1=word max, 1-5]] basically[0] code[0] that[0] was[0] more[0] about[0] where[0] and[0] how[0] to[0] do[0] things[0] based[0] on[0] where[0] the[0] code[0] was[0] running[0] as[0] opposed[0] to[0] how[0] the[0] code[0] was[0] running[0] moved[0] to[0] the[0] environment[0] classes[0] [[Sentence=-1,1=word max, 1-5]] for[0] example[0] prepare[0] logic[0] for[0] /sdcard/[0] and[0] adb[0] code[0] in[0] general[0] [[Sentence=-1,1=word max, 1-5]] libcore/tools/runner/java/dalvik/runner/devicedalvikvm[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/environment[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/environmentdevice[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/environmenthost[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/javavm[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/vm[0] [[Sentence=-1,1=word max, 1-5]] java[0] adding[0] new[0] files[0] libcore/tools/runner/android[0] [[Sentence=-1,1=word max, 1-5]] mk[0] aapt/apt[0] is[0] a[0] wrapper[0] for[0] aapt/apt[0] similar[0] to[0] adb[0] and[0] dx[0] libcore/tools/runner/java/dalvik/runner/aapt/libcore/tools/runner/java/dalvik/runner/apt[0] [[Sentence=-1,1=word max, 1-5]] java[0] added[0] adb[0] [[Sentence=-1,1=word max, 1-5]] install[0] and[0] adb[0] [[Sentence=-1,1=word max, 1-5]] uninstall[0] methods[0] changed[0] from[0] using[0] file[0] [[Sentence=-1,1=word max, 1-5]] tostring[0] to[0] file[0] [[Sentence=-1,1=word max, 1-5]] getpath[0] for[0] clarity[0] libcore/tools/runner/java/dalvik/runner/adb[0] [[Sentence=-1,1=word max, 1-5]] java[0] codefinder[0] has[0] been[0] extended[0] so[0] that[0] driver[0] can[0] ask[0] finders[0] what[0] they[0] need[0] to[0] build[0] and[0] run[0] specifically[0] through[0] the[0] new[0] getrunnerjava[0] and[0] getrunnerclasspath[0] [[Sentence=-1,1=word max, 1-5]] as[0] part[0] of[0] this[0] namingpatterncodefinder's[0] runnerclass[0] was[0] changed[0] to[0] getrunnerclass[0] for[0] consistency[0] with[0] the[0] superclass[0] [[Sentence=-1,1=word max, 1-5]] this[0] was[0] important[0] for[0] running[0] as[0] an[0] activity[0] because[0] we[0] want[0] to[0] minimize[0] what[0] we[0] pack[0] into[0] the[0] apk[0] file[0] because[0] of[0] the[0] dx[0] dex[0] runtime[0] and[0] not[0] just[0] pull[0] in[0] all[0] possible[0] runners[0] and[0] supporting[1] libraries[0] [[Sentence=-1,2=word max, 1-5]] testrun[0] objects[0] also[0] hold[0] onto[0] this[0] information[0] from[0] their[0] finders[0] [[Sentence=-1,1=word max, 1-5]] libcore/tools/runner/java/dalvik/runner/driver[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/codefinder[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/caliperfinder[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/junitfinder[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/jtregfinder[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/mainfinder[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/namingpatterncodefinder[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/testrun[0] [[Sentence=-1,1=word max, 1-5]] java[0] testrunner[0] testrunner's[0] classname[0] is[0] now[0] testclass[0] to[0] clarifiy[0] it[0] from[0] the[0] runnerclass[0] [[Sentence=-1,1=word max, 1-5]] libcore/tools/runner/java/dalvik/runner/testrunner[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/caliperrunner[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/junitrunner[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/jtregrunner[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/mainrunner[0] [[Sentence=-1,1=word max, 1-5]] java[0] classpath[0] now[0] has[0] a[0] collection[0] [[Sentence=-1,1=word max, 1-5]] of[0] and[0] collection[0] [[Sentence=-1,1=word max, 1-5]] addall[0] that[0] take[0] a[0] collection[0] file[0] instead[0] if[0] just[0] a[0] file[0] [[Sentence=-1,1=word max, 1-5]] libcore/tools/runner/java/dalvik/runner/classpath[0] [[Sentence=-1,1=word max, 1-5]] java[0] added[0] command[0] [[Sentence=-1,1=word max, 1-5]] args[0] file[0] arg[0] to[0] avoid[-1] a[0] lot[0] of[0] args[0] file[0] [[Sentence=-2,1=word max, 1-5]] getpath[0] libcore/tools/runner/java/dalvik/runner/command[0] [[Sentence=-1,1=word max, 1-5]] java[0] option[0] clean[0] has[0] expanded[0] to[0] clean[0] before[0] clean[0] after[0] and[0] clean[0] [[Sentence=-1,1=word max, 1-5]] now[0] no[0] clean[0] will[0] remove[0] nothing[0] as[0] elliot[0] requested[0] [[Sentence=-1,1=word max, 1-5]] no[0] clean[0] after[0] is[0] now[0] what[0] is[0] useful[1] for[0] dalvikrunner[0] debuggin[0] [[Sentence=-1,2=word max, 1-5]] default[-1] is[0] still[0] to[0] clean[0] before[0] and[0] after[0] [[Sentence=-2,1=word max, 1-5]] libcore/tools/runner/java/dalvik/runner/dalvikrunner[0] [[Sentence=-1,1=word max, 1-5]] java[0] moved[0] vm[0] [[Sentence=-1,1=word max, 1-5]] dalvik_runner_home[0] to[0] dalvikrunner[0] [[Sentence=-1,1=word max, 1-5]] home[0] [[Sentence=-1,1=word max, 1-5]] /tmp/[0] uuid/uid[0] paths[0] are[0] now[0] /tmp/dalvikrunner/[0] uuid/uid[0] paths[0] are[0] easier[0] cleanup[0] [[Sentence=-1,1=word max, 1-5]] libcore/tools/runner/java/dalvik/runner/dalvikrunner[0] [[Sentence=-1,1=word max, 1-5]] java[0] driver[0] was[0] changed[0] to[0] use[0] a[0] executorcompletionservice[0] around[0] the[0] executorservice[0] so[0] that[0] exceptions[0] from[0] the[0] execute[0] threads[0] could[0] be[0] reported[0] on[0] the[0] main[0] thread[0] [[Sentence=-1,1=word max, 1-5]] libcore/tools/runner/java/dalvik/runner/driver[0] [[Sentence=-1,1=word max, 1-5]] java[0] we[0] now[0] build[0] the[0] testrunner[0] before[0] the[0] test[0] so[0] that[0] its[0] classes[0] will[0] be[0] around[0] to[0] be[0] packed[0] into[0] apk[0] files[0] [[Sentence=-1,1=word max, 1-5]] libcore/tools/runner/java/dalvik/runner/driver[0] [[Sentence=-1,1=word max, 1-5]] java[0] dx[0] [[Sentence=-1,1=word max, 1-5]] dex[0] now[0] takes[0] file[0] arguments[-1] instread[0] of[0] strings[0] [[Sentence=-2,1=word max, 1-5]] dx[0] [[Sentence=-1,1=word max, 1-5]] dex[0] also[0] needs[0] to[0] pass[0] additional[0] memory[0] arguments[-1] to[0] not[0] run[0] out[0] of[0] memory[0] building[0] the[0] big[0] dex[0] for[0] the[0] apk[0] [[Sentence=-2,1=word max, 1-5]] the[0] values[1] i[0] used[0] where[0] from[0] the[0] build/core/definitions[0] [[Sentence=-1,2=word max, 1-5]] mk[0] libcore/tools/runner/java/dalvik/runner/dx[0] [[Sentence=-1,1=word max, 1-5]] java[0] postcompile[0] was[0] split[0] into[0] postcompiletestrunner[0] and[0] postcompiletest[0] because[0] the[0] packaging[0] requires[0] are[0] very[0] different[0] in[0] each[0] case[0] for[0] activitymode[0] [[Sentence=-1,1=word max, 1-5]] specifically[0] the[0] test[0] runner[0] is[0] not[0] post[0] packaged[0] seperately[0] but[0] packaged[0] in[0] the[0] apk[0] with[0] each[0] test[0] [[Sentence=-1,1=word max, 1-5]] libcore/tools/runner/java/dalvik/runner/activitymode[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/devicedalvikvm[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/javavm[0] [[Sentence=-1,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/vm[0] [[Sentence=-1,1=word max, 1-5]] java[0] changed[0] testclass[0] to[0] test[0] to[0] avoid[-1] collision[-1] with[0] new[0] superclass[0] field[0] libcore/tools/runner/java/dalvik/runner/jtregrunner[0] [[Sentence=-2,1=word max, 1-5]] java[0] libcore/tools/runner/java/dalvik/runner/mainrunner[0] [[Sentence=-1,1=word max, 1-5]] java[0] added[0] @suppresswarnings[0] unchecked[0] libcore/tools/runner/java/dalvik/runner/optionparser[0] [[Sentence=-1,1=word max, 1-5]] java[0] new[0] android[0] [[Sentence=-1,1=word max, 1-5]] app/ap[0] [[Sentence=-1,1=word max, 1-5]] activity[0] based[0] on[0] elliot's[0] testapk[0] [[Sentence=-1,1=word max, 1-5]] it[0] encapsulates[0] an[0] activityrunner[0] that[0] invokes[0] the[0] appropriate[0] testrunner[0] based[0] on[0] test[0] [[Sentence=-1,1=word max, 1-5]] properties[0] [[Sentence=-1,1=word max, 1-5]] libcore/tools/runner/java/dalvik/runner/testactivity[0] [[Sentence=-1,1=word max, 1-5]] java[0] new[0] class[0] that[0] shared[0] contains[0] old[0] and[0] some[0] new[0] between[0] the[0] dalvikrunner[0] and[0] the[0] testrunner[0] [[Sentence=-1,1=word max, 1-5]] libcore/tools/runner/java/dalvik/runner/testproperties[0] [[Sentence=-1,1=word max, 1-5]] java[0] regression[0] test[0] script[0] for[0] debugging[0] the[0] matrix[0] of[0] various[0] dalvikrunner[0] modes[0] and[0] test[0] types[0] libcore/tools/runner/test[0] dalvik[0] runner[0] [[Sentence=-1,1=word max, 1-5]] sh[0] [[Sentence=-1,1=word max, 1-5]][[[2,-2 max of sentences]]]
