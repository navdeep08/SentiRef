Extract Superclass	Translation	Positive	Negative	EmotionRationale
3998 commit 57eb998efcd6031d01fc441ed0bd8b09c30b78c0 merge: 3a66185 da02c18 merge "resource management refactoring and clean-up." 	3998 commit 57eb998efcd6031d01fc441ed0bd8b09c30b78c0 merge: 3a66185 da02c18 merge "resource management refactoring and clean-up.	1	-1	 3998[0] commit[0] 57eb998efcd6031d01fc441ed0bd8b09c30b78c0[0] merge[0] 3a66185[0] da02c18[0] merge[0] resource[0] management[0] refactoring[0] and[0] clean[0] up[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
4007 commit da02c18ad5b54d97a1fcfd5f6633062b0c873c22 resource management refactoring and clean-up. - (i)resourcerepository is now a common class instead of an interface. this contains most of the code to control a repository (which was extracted from projectresources) projectresources extends it adding minor features such as library support, and inline id definition. frameworkresources extends it adding support for public resources (which used to be duplicated and dispersed in weird places). changed the way resources are reloaded on resource change event. instead of marking the resources as modified (using resource.touch()), the resources are now parsed as the files are processed during the resource delta visitor. this makes more sense as there are now other listeners to the resource changes (hyperlinks) that access the resource list in their listeners, which wouldn't work previously. this also makes the code cleaner as the previous method had to query the repo for items and return a list of new ones, which was kinda crappy. the new code is much simpler, as is the post update process. - resourceitem is now the base class for resource items. it includes all the small methods that were added by all the child classes or interfaces. project/configurableresourceitem are merged into the based class. iidresourceitem and idresourceitem are gone and replaced by a simpler inlineresourceitem. frameworkresourceitem is a simple override for framework resources. - also improved the api of a bit for the resource repository, making more use of unmodifiable lists and emptylist/map() change-id: ie3ac1995213fed66153c7e7ecbdd170ec257be62 	4007 commit da02c18ad5b54d97a1fcfd5f6633062b0c873c22 resource management refactoring and clean-up.<br> - (i)resourcerepository is now a common class instead of an interface.<br> this contains most of the code to control a repository (which was extracted from projectresources) projectresources extends it adding minor features such as library support, and inline id definition.<br> frameworkresources extends it adding support for public resources (which used to be duplicated and dispersed in weird places)<br> changed the way resources are reloaded on resource change event.<br> instead of marking the resources as modified (using resource.<br>touch( the resources are now parsed as the files are processed during the resource delta visitor.<br> this makes more sense as there are now other listeners to the resource changes (hyperlinks) that access the resource list in their listeners, which wouldn't work previously.<br> this also makes the code cleaner as the previous method had to query the repo for items and return a list of new ones, which was kinda crappy.<br> the new code is much simpler, as is the post update process.<br> - resourceitem is now the base class for resource items.<br> it includes all the small methods that were added by all the child classes or interfaces.<br> project/configurableresourceitem are merged into the based class.<br> idresourceitem and idresourceitem are gone and replaced by a simpler inlineresourceitem.<br> frameworkresourceitem is a simple override for framework resources.<br> - also improved the api of a bit for the resource repository, making more use of unmodifiable lists and emptylist/map( change-id: ie3ac1995213fed66153c7e7ecbdd170ec257be62	2	-3	 4007[0] commit[0] da02c18ad5b54d97a1fcfd5f6633062b0c873c22[0] resource[0] management[0] refactoring[0] and[0] clean[0] up[0] [[Sentence=-1,1=word max, 1-5]] i[0] resourcerepository[0] is[0] now[0] a[0] common[0] class[0] instead[0] of[0] an[0] interface[0] [[Sentence=-1,1=word max, 1-5]] this[0] contains[0] most[0] of[0] the[0] code[0] to[0] control[0] a[0] repository[0] which[0] was[0] extracted[0] from[0] projectresources[0] projectresources[0] extends[0] it[0] adding[0] minor[0] features[0] such[0] as[0] library[0] support[0] and[0] inline[0] id[0] definition[0] [[Sentence=-1,1=word max, 1-5]] frameworkresources[0] extends[0] it[0] adding[0] support[0] for[0] public[0] resources[0] which[0] used[0] to[0] be[0] duplicated[0] and[0] dispersed[0] in[0] weird[-1] places[0] [[Sentence=-2,1=word max, 1-5]] changed[0] the[0] way[0] resources[0] are[0] reloaded[0] on[0] resource[0] change[0] event[0] [[Sentence=-1,1=word max, 1-5]] instead[0] of[0] marking[0] the[0] resources[0] as[0] modified[0] using[0] resource[0] [[Sentence=-1,1=word max, 1-5]] touch[0] the[0] resources[0] are[0] now[0] parsed[0] as[0] the[0] files[0] are[0] processed[0] during[0] the[0] resource[0] delta[0] visitor[0] [[Sentence=-1,1=word max, 1-5]] this[0] makes[0] more[0] sense[0] as[0] there[0] are[0] now[0] other[0] listeners[0] to[0] the[0] resource[0] changes[0] hyperlinks[0] that[0] access[0] the[0] resource[0] list[0] in[0] their[0] listeners[0] which[0] wouldn't[0] work[0] previously[0] [[Sentence=-1,1=word max, 1-5]] this[0] also[0] makes[0] the[0] code[0] cleaner[0] as[0] the[0] previous[0] method[0] had[0] to[0] query[0] the[0] repo[0] for[0] items[0] and[0] return[0] a[0] list[0] of[0] new[0] ones[0] which[0] was[0] kinda[0] crappy[-2] [[Sentence=-3,1=word max, 1-5]] the[0] new[0] code[0] is[0] much[0] simpler[0] as[0] is[0] the[0] post[0] update[0] process[0] [[Sentence=-1,1=word max, 1-5]] resourceitem[0] is[0] now[0] the[0] base[0] class[0] for[0] resource[0] items[0] [[Sentence=-1,1=word max, 1-5]] it[0] includes[0] all[0] the[0] small[0] methods[0] that[0] were[0] added[0] by[0] all[0] the[0] child[0] classes[0] or[0] interfaces[0] [[Sentence=-1,1=word max, 1-5]] project/configurableresourceitem[0] are[0] merged[0] into[0] the[0] based[0] class[0] [[Sentence=-1,1=word max, 1-5]] iidresourceitem/idresourceitem[0] and[0] idresourceitem[0] are[0] gone[0] and[0] replaced[0] by[0] a[0] simpler[0] inlineresourceitem[0] [[Sentence=-1,1=word max, 1-5]] frameworkresourceitem[0] is[0] a[0] simple[0] override[0] for[0] framework[0] resources[0] [[Sentence=-1,1=word max, 1-5]] also[0] improved[1] the[0] api[0] of[0] a[0] bit[0] for[0] the[0] resource[0] repository[0] making[0] more[0] use[0] of[0] unmodifiable[0] lists[0] and[0] emptylist/map[0] change[0] id[0] ie3ac1995213fed66153c7e7ecbdd170ec257be62[0] [[Sentence=-1,2=word max, 1-5]][[[2,-3 max of sentences]]]
5068 commit b293bb776f0e48674fb5f6e6a822a23011dab305 merge: 12479c5 83dba50 merge "add gesture support, marquee selection, and refactoring" 	5068 commit b293bb776f0e48674fb5f6e6a822a23011dab305 merge: 12479c5 83dba50 merge "add gesture support, marquee selection, and refactoring"	1	-1	 5068[0] commit[0] b293bb776f0e48674fb5f6e6a822a23011dab305[0] merge[0] 12479c5[0] 83dba50[0] merge[0] add[0] gesture[0] support[0] marquee[0] selection[0] and[0] refactoring[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
5072 commit 83dba505e22985fd2f9414e7c6ef14ce29d31713 add gesture support, marquee selection, and refactoring this checkin adds support for gestures and overlays. gestures are sessions of mouse/keyboard activity, and this is documented in the javadoc for the new gesture class. overlays are units of graphics, and these are documented in the overlay javadoc. the gesture architecture lets us isolate the logic for each different type of operation (marquee, resize, move, etc), and with associated overlays we don't attempt to for example paint drag feedback during a resize operation, etc. the checkin also adds marquee selection (as a second gesture, in addition to the existing drag & drop based move gesture), along with some associated changes in how the root view is treated. as part of isolating the mouse handling and painting related to gestures, painting etc., i also refactored the code quite a bit. layoutcanvas which used to be a large class has been split into a number of new classes, one for each area of responsibility: - the mouse listener and drag & drop code has been moved into a gesturemanager. (a lot of the drop handling code also came from the canvasdroplistener class.) - code related to maintaining the set of rendered views, and performing searches in the views, has been moved into a viewhierarchy class. - code related to selection has been moved into a selectionmanager. - various individual painting pieces (outline, hover, etc) have been moved into individual overlay classes such as outlineoverlay, hoveroverlay, selectionoverlay, etc. this also moved associated resource allocation and cleanup into the overlays. - new coordinate classes, controlpoint and layoutpoint, are used instead of ints and plain points to make it really clear which methods require coordinates in the layout (such as the viewhieararchy search methods) and which ones require coordinates in the canvas control (such as paint methods). there are factory methods to automatically construct the right kind of coordinate from different types of mouse events, as well as methods to convert between the two. i also tweaked the visual appearance of selection a bit more, and some other misc cleanup. change-id: i666aabdcd36720bebe406b68237e8966d985fb8f 	5072 commit 83dba505e22985fd2f9414e7c6ef14ce29d31713 add gesture support, marquee selection, and refactoring this checkin adds support for gestures and overlays.<br> gestures are sessions of mouse/keyboard activity, and this is documented in the javadoc for the new gesture class.<br> overlays are units of graphics, and these are documented in the overlay javadoc.<br> the gesture architecture lets us isolate the logic for each different type of operation (marquee, resize, move, etc) and with associated overlays we don't attempt to for example paint drag feedback during a resize operation, etc.<br> the checkin also adds marquee selection (as a second gesture, in addition to the existing drag & drop based move gesture) along with some associated changes in how the root view is treated.<br> as part of isolating the mouse handling and painting related to gestures, painting etc.<br> i also refactored the code quite a bit.<br> layoutcanvas which used to be a large class has been split into a number of new classes, one for each area of responsibility: - the mouse listener and drag & drop code has been moved into a gesturemanager.<br> (a lot of the drop handling code also came from the canvasdroplistener class.<br> - code related to maintaining the set of rendered views, and performing searches in the views, has been moved into a viewhierarchy class.<br> - code related to selection has been moved into a selectionmanager.<br> - various individual painting pieces (outline, hover, etc) have been moved into individual overlay classes such as outlineoverlay, hoveroverlay, selectionoverlay, etc.<br> this also moved associated resource allocation and cleanup into the overlays.<br> - new coordinate classes, controlpoint and layoutpoint, are used instead of ints and plain points to make it really clear which methods require coordinates in the layout (such as the viewhieararchy search methods) and which ones require coordinates in the canvas control (such as paint methods)<br> there are factory methods to automatically construct the right kind of coordinate from different types of mouse events, as well as methods to convert between the two.<br> i also tweaked the visual appearance of selection a bit more, and some other misc cleanup.<br> change-id: i66abdcd36720bebe406b68237e8966d985fb8f	2	-2	 5072[0] commit[0] 83dba505e22985fd2f9414e7c6ef14ce29d31713[0] add[0] gesture[0] support[0] marquee[0] selection[0] and[0] refactoring[0] this[0] checkin[0] adds[0] support[0] for[0] gestures[0] and[0] overlays[0] [[Sentence=-1,1=word max, 1-5]] gestures[0] are[0] sessions[0] of[0] mouse/keyboard[0] activity[0] and[0] this[0] is[0] documented[0] in[0] the[0] javadoc[0] for[0] the[0] new[0] gesture[0] class[0] [[Sentence=-1,1=word max, 1-5]] overlays[0] are[0] units[0] of[0] graphics[0] and[0] these[0] are[0] documented[0] in[0] the[0] overlay[0] javadoc[0] [[Sentence=-1,1=word max, 1-5]] the[0] gesture[0] architecture[0] lets[0] us[0] isolate[-1] the[0] logic[0] for[0] each[0] different[0] type[0] of[0] operation[0] marquee[0] resize[0] move[0] etc[0] and[0] with[0] associated[0] overlays[0] we[0] don't[0] attempt[0] to[0] for[0] example[0] paint[0] drag[0] feedback[0] during[0] a[0] resize[0] operation[0] etc[0] [[Sentence=-2,1=word max, 1-5]] the[0] checkin[0] also[0] adds[0] marquee[0] selection[0] as[0] a[0] second[0] gesture[0] in[0] addition[0] to[0] the[0] existing[0] drag[0] &[0] drop[-1] based[0] move[0] gesture[0] along[0] with[0] some[0] associated[0] changes[0] in[0] how[0] the[0] root[0] view[0] is[0] treated[0] [[Sentence=-2,1=word max, 1-5]] as[0] part[0] of[0] isolating[-1] the[0] mouse[0] handling[0] and[0] painting[0] related[0] to[0] gestures[0] painting[0] etc[0] [[Sentence=-2,1=word max, 1-5]] i[0] also[0] refactored[0] the[0] code[0] quite[0] a[0] bit[0] [[Sentence=-1,1=word max, 1-5]] layoutcanvas[0] which[0] used[0] to[0] be[0] a[0] large[0] class[0] has[0] been[0] split[0] into[0] a[0] number[0] of[0] new[0] classes[0] one[0] for[0] each[0] area[0] of[0] responsibility[0] the[0] mouse[0] listener[0] and[0] drag[0] &[0] drop[-1] code[0] has[0] been[0] moved[0] into[0] a[0] gesturemanager[0] [[Sentence=-2,1=word max, 1-5]] a[0] lot[0] of[0] the[0] drop[-1] handling[0] code[0] also[0] came[0] from[0] the[0] canvasdroplistener[0] class[0] [[Sentence=-2,1=word max, 1-5]] code[0] related[0] to[0] maintaining[0] the[0] set[0] of[0] rendered[0] views[0] and[0] performing[0] searches[0] in[0] the[0] views[0] has[0] been[0] moved[0] into[0] a[0] viewhierarchy[0] class[0] [[Sentence=-1,1=word max, 1-5]] code[0] related[0] to[0] selection[0] has[0] been[0] moved[0] into[0] a[0] selectionmanager[0] [[Sentence=-1,1=word max, 1-5]] various[0] individual[0] painting[0] pieces[0] outline[0] hover[0] etc[0] have[0] been[0] moved[0] into[0] individual[0] overlay[0] classes[0] such[0] as[0] outlineoverlay[0] hoveroverlay[0] selectionoverlay[0] etc[0] [[Sentence=-1,1=word max, 1-5]] this[0] also[0] moved[0] associated[0] resource[0] allocation[0] and[0] cleanup[0] into[0] the[0] overlays[0] [[Sentence=-1,1=word max, 1-5]] new[0] coordinate[0] classes[0] controlpoint[0] and[0] layoutpoint[0] are[0] used[0] instead[0] of[0] ints[0] and[0] plain[0] points[0] to[0] make[0] it[0] really[0] clear[0] which[0] methods[0] require[0] coordinates[0] in[0] the[0] layout[0] such[0] as[0] the[0] viewhieararchy[0] search[0] methods[0] and[0] which[0] ones[0] require[0] coordinates[0] in[0] the[0] canvas[0] control[0] such[0] as[0] paint[0] methods[0] [[Sentence=-1,1=word max, 1-5]] there[0] are[0] factory[0] methods[0] to[0] automatically[0] construct[0] the[0] right[0] kind[1] of[0] coordinate[0] from[0] different[0] types[0] of[0] mouse[0] events[0] as[0] well[0] as[0] methods[0] to[0] convert[0] between[0] the[0] two[0] [[Sentence=-1,2=word max, 1-5]] i[0] also[0] tweaked[0] the[0] visual[0] appearance[0] of[0] selection[0] a[0] bit[0] more[0] and[0] some[0] other[0] misc[0] cleanup[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i666aabdcd36720bebe406b68237e8966d985fb8f/i66abdcd36720bebe406b68237e8966d985fb8f[0][+0.6 MultipleLetters] [[Sentence=-1,2=word max, 1-5]][[[2,-2 max of sentences]]]
7929 commit bcf38645bef192b380f0d338b263aea075cd1aeb add method profiling support to ddms. new button allows to start/stop tracing. when clicking stop, ddms downloads the trace file and starts traceview. also refactored some common parts of the hprof and tracing handlers into a common class. the goal is to have a default, extensible implementation of the hprof handler that ddms and the plug-in can reuse. this will reduce duplicated code. change-id: ifc48926c7f6f1c3ea49a4aa94053664be83cbb06 	7929 commit bcf38645bef192b380f0d338b263aea075cd1aeb add method profiling support to ddms.<br> new button allows to start/stop tracing.<br> when clicking stop, ddms downloads the trace file and starts traceview.<br> also refactored some common parts of the hprof and tracing handlers into a common class.<br> the goal is to have a default, extensible implementation of the hprof handler that ddms and the plug-in can reuse.<br> this will reduce duplicated code.<br> change-id: ifc48926c7f6f1c3ea49a4a94053664be83cbb06	1	-2	 7929[0] commit[0] bcf38645bef192b380f0d338b263aea075cd1aeb[0] add[0] method[0] profiling[0] support[0] to[0] ddms[0] [[Sentence=-1,1=word max, 1-5]] new[0] button[0] allows[0] to[0] start/stop[0] tracing[0] [[Sentence=-1,1=word max, 1-5]] when[0] clicking[0] stop[0] ddms[0] downloads[0] the[0] trace[0] file[0] and[0] starts[0] traceview[0] [[Sentence=-1,1=word max, 1-5]] also[0] refactored[0] some[0] common[0] parts[0] of[0] the[0] hprof[0] and[0] tracing[0] handlers[0] into[0] a[0] common[0] class[0] [[Sentence=-1,1=word max, 1-5]] the[0] goal[0] is[0] to[0] have[0] a[0] default[-1] extensible[0] implementation[0] of[0] the[0] hprof[0] handler[0] that[0] ddms[0] and[0] the[0] plug[0] in[0] can[0] reuse[0] [[Sentence=-2,1=word max, 1-5]] this[0] will[0] reduce[0] duplicated[0] code[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] ifc48926c7f6f1c3ea49a4aa94053664be83cbb06/ifc48926c7f6f1c3ea49a4a94053664be83cbb06[0] [[Sentence=-1,1=word max, 1-5]][[[1,-2 max of sentences]]]
