Extract Method	Translation	Positive	Negative	EmotionRationale
840 commit 6462650a787c96cbb371d6aca201af3d613aad24 sdk manager dialog to enable 3rd party addons. - change addonuser dialog: transform current dialog in 2 pages. one is for user to add custom addon site urls (like the dialog was doing before, unchanged.) - other tab is to select which official addon sites should be enabled. - support enable/disable state for each source. - display disabled sources as such in the tree when in "per-repository" view. - persist the enable bit state via local pref file. - refactor a few inner classes out of packagespage. change-id: icc8e392d90550e53f1c76dd7aefb31669219973b 	840 commit 6462650a787c96cbb371d6aca201af3d613ad24 sdk manager dialog to enable 3rd party addons.<br> - change addonuser dialog: transform current dialog in 2 pages.<br> one is for user to add custom addon site urls (like the dialog was doing before, unchanged.<br> - other tab is to select which official addon sites should be enabled.<br> - support enable/disable state for each source.<br> - display disabled sources as such in the tree when in "per-repository" view.<br> - persist the enable bit state via local pref file.<br> - refactor a few inner classes out of packagespage.<br> change-id: icc8e392d90550e53f1c76dd7aefb31669219973b	1	-2	 840[0] commit[0] 6462650a787c96cbb371d6aca201af3d613aad24/6462650a787c96cbb371d6aca201af3d613ad24[0] sdk[0] manager[0] dialog[0] to[0] enable[0] 3rd[0] party[0] addons[0] [[Sentence=-1,1=word max, 1-5]] change[0] addonuser[0] dialog[0] transform[0] current[0] dialog[0] in[0] 2[0] pages[0] [[Sentence=-1,1=word max, 1-5]] one[0] is[0] for[0] user[0] to[0] add[0] custom[0] addon[0] site[0] urls[0] like[0] the[0] dialog[0] was[0] doing[0] before[0] unchanged[0] [[Sentence=-1,1=word max, 1-5]] other[0] tab[0] is[0] to[0] select[0] which[0] official[0] addon[0] sites[0] should[0] be[0] enabled[0] [[Sentence=-1,1=word max, 1-5]] support[0] enable/disable[0] state[0] for[0] each[0] source[-1] [[Sentence=-2,1=word max, 1-5]] display[0] disabled[0] sources[-1] as[0] such[0] in[0] the[0] tree[0] when[0] in[0] per[0] repository[0] view[0] [[Sentence=-2,1=word max, 1-5]] persist[0] the[0] enable[0] bit[0] state[0] via[0] local[0] pref[0] file[0] [[Sentence=-1,1=word max, 1-5]] refactor[0] a[0] few[0] inner[0] classes[0] out[0] of[0] packagespage[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] icc8e392d90550e53f1c76dd7aefb31669219973b[0] [[Sentence=-1,1=word max, 1-5]][[[1,-2 max of sentences]]]
1478 commit fefa8b7d47b787d2250dc2fd0f35cac5540241e2 add quick fix for the usecompounddrawable lint warning this changeset adds a quickfix for the "use compound drawable" lint warning. that warning identifies a linearlayout which contains exactly one textview and one imageview (in either order, and the linear layout can be in either orientation), and suggests replacing it by just the single textview along with a drawable attribute. the description alone wasn't clear, so the quickfix performs the conversion automatically. in addition to the conversion it also needs to transfer any layout param references from the old linearlayout to the textview (and assign it an id if necessary), so the quickfix is implemented as a visual refactoring. it's also made available from the visual refactoring menu. this changeset also updates a couple of unrelated golden files in the refactoring unit tests to track a message change a few months back. change-id: iecb544d196fdd4bcabf13a3fdb82ef1ea063f4c2 	1478 commit fefa8b7d47b787d2250dc2fd0f35cac5540241e2 add quick fix for the usecompounddrawable lint warning this changeset adds a quickfix for the "use compound drawable" lint warning.<br> that warning identifies a linearlayout which contains exactly one textview and one imageview (in either order, and the linear layout can be in either orientation) and suggests replacing it by just the single textview along with a drawable attribute.<br> the description alone wasn't clear, so the quickfix performs the conversion automatically.<br> in addition to the conversion it also needs to transfer any layout param references from the old linearlayout to the textview (and assign it an id if necessary) so the quickfix is implemented as a visual refactoring.<br> it's also made available from the visual refactoring menu.<br> this changeset also updates a couple of unrelated golden files in the refactoring unit tests to track a message change a few months back.<br> change-id: iecb544d196fdd4bcabf13a3fdb82ef1ea063f4c2	1	-1	 1478[0] commit[0] fefa8b7d47b787d2250dc2fd0f35cac5540241e2[0] add[0] quick[0] fix[0] for[0] the[0] usecompounddrawable[0] lint[0] warning[0] this[0] changeset[0] adds[0] a[0] quickfix[0] for[0] the[0] use[0] compound[0] drawable[0] lint[0] warning[0] [[Sentence=-1,1=word max, 1-5]] that[0] warning[0] identifies[0] a[0] linearlayout[0] which[0] contains[0] exactly[0] one[0] textview[0] and[0] one[0] imageview[0] in[0] either[0] order[0] and[0] the[0] linear[0] layout[0] can[0] be[0] in[0] either[0] orientation[0] and[0] suggests[0] replacing[0] it[0] by[0] just[0] the[0] single[0] textview[0] along[0] with[0] a[0] drawable[0] attribute[0] [[Sentence=-1,1=word max, 1-5]] the[0] description[0] alone[0] wasn't[0] clear[0] so[0] the[0] quickfix[0] performs[0] the[0] conversion[0] automatically[0] [[Sentence=-1,1=word max, 1-5]] in[0] addition[0] to[0] the[0] conversion[0] it[0] also[0] needs[0] to[0] transfer[0] any[0] layout[0] param[0] references[0] from[0] the[0] old[0] linearlayout[0] to[0] the[0] textview[0] and[0] assign[0] it[0] an[0] id[0] if[0] necessary[0] so[0] the[0] quickfix[0] is[0] implemented[0] as[0] a[0] visual[0] refactoring[0] [[Sentence=-1,1=word max, 1-5]] it's[0] also[0] made[0] available[0] from[0] the[0] visual[0] refactoring[0] menu[0] [[Sentence=-1,1=word max, 1-5]] this[0] changeset[0] also[0] updates[0] a[0] couple[0] of[0] unrelated[0] golden[0] files[0] in[0] the[0] refactoring[0] unit[0] tests[0] to[0] track[0] a[0] message[0] change[0] a[0] few[0] months[0] back[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] iecb544d196fdd4bcabf13a3fdb82ef1ea063f4c2[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
1608 commit d7f5ef53fe74b55f0c8b385b32e94fae6671910a add textfield to resource chooser for @string resources this changeset adds a new textfield to the bottom of the resource chooser in some scenarios, such as when editing @string resources via edit text in the layout editor. this text field updates to show the @string/resourcename value whenever you update the selection in the filter, but it also allows you to edit the text to anything else, such as a literla string (not a resource). this makes it easy to edit simple labels. see the following adt-dev thread for some background on this: http://groups.google.com/group/adt-dev/browse_thread/ thread/d53e71c2970ce369?pli 1 there is also a new label below the text field which shows the "resolved value". for example, if you've chosen "hello" in the filter list, the new value text will show "@string/hello", and the new label will show "hello world". this will hopefully make it more obvious what it is you're editing. and, similar to the widget render preview for drawable resources, this makes it easier to browse and pick labels, especially when browsing framework resources. this is currently only enabled for @string and @dimen resources, but we could conceivably add it for other resource types too. longer term, we need inline editing of widgets (where values entered automatically get translated into resources), but this is a stopgap measure which makes it easier to build simple apps quickly, and which still makes it simple to create new strings or select existing ones from the filter list. (and we have both lint and the extract string refactoring to help identify and fix hardcoded strings later on.) while working on this i also discovered the root cause for this bug: 20589: the reference chooser is not usable for framework styles turns out org.eclipse.ui.dialogs.abstractelementlistselectiondialog has a handleemptylist() method which calls setenabled(false) on the filter list when the list is empty. crucially, there is no corresponding setenabled(true) call when the list is made non-empty! when the user switches between framework and project resources, the list is temporarily empty, so the list gets disabled, and that's why it's not responding to menu clicks at all. this changeset also fixes that bug. change-id: id441104d617fa4440daba3da2dc63e2c999f48c1 	1608 commit d7f5ef53fe74b55f0c8b385b32e94fae6671910a add textfield to resource chooser for @string resources this changeset adds a new textfield to the bottom of the resource chooser in some scenarios, such as when editing @string resources via edit text in the layout editor.<br> this text field updates to show the @string/resourcename value whenever you update the selection in the filter, but it also allows you to edit the text to anything else, such as a literla string (not a resource)<br> this makes it easy to edit simple labels.<br> see the following adt-dev thread for some background on this: http://groups.<br>google.<br>com/group/adt-dev/browse_thread/ thread/d53e71c2970ce369?<br>pli 1 there is also a new label below the text field which shows the "resolved value"<br> for example, if you've chosen "hello" in the filter list, the new value text will show "@string/hello" and the new label will show "hello world"<br> this will hopefully make it more obvious what it is you're editing.<br> and, similar to the widget render preview for drawable resources, this makes it easier to browse and pick labels, especially when browsing framework resources.<br> this is currently only enabled for @string and @dimen resources, but we could conceivably add it for other resource types too.<br> longer term, we need inline editing of widgets (where values entered automatically get translated into resources) but this is a stopgap measure which makes it easier to build simple apps quickly, and which still makes it simple to create new strings or select existing ones from the filter list.<br> (and we have both lint and the extract string refactoring to help identify and fix hardcoded strings later on.<br> while working on this i also discovered the root cause for this bug: 20589: the reference chooser is not usable for framework styles turns out org.<br>eclipse.<br>ui.<br>dialogs.<br>abstractelementlistselectiondialog has a handleemptylist( method which calls setenabled(false) on the filter list when the list is empty.<br> crucially, there is no corresponding setenabled(true) call when the list is made non-empty!<br> when the user switches between framework and project resources, the list is temporarily empty, so the list gets disabled, and that's why it's not responding to menu clicks at all.<br> this changeset also fixes that bug.<br> change-id: id441104d617fa440daba3da2dc63e2c99f48c1	2	-2	 1608[0] commit[0] d7f5ef53fe74b55f0c8b385b32e94fae6671910a[0] add[0] textfield[0] to[0] resource[0] chooser[0] for[0] @string[0] resources[0] this[0] changeset[0] adds[0] a[0] new[0] textfield[0] to[0] the[0] bottom[0] of[0] the[0] resource[0] chooser[0] in[0] some[0] scenarios[0] such[0] as[0] when[0] editing[0] @string[0] resources[0] via[0] edit[0] text[0] in[0] the[0] layout[0] editor[0] [[Sentence=-1,1=word max, 1-5]] this[0] text[0] field[0] updates[0] to[0] show[0] the[0] @string/resourcename[0] value[0] whenever[0] you[0] update[0] the[0] selection[0] in[0] the[0] filter[0] but[0] it[0] also[0] allows[0] you[0] to[0] edit[0] the[0] text[0] to[0] anything[0] else[0] such[0] as[0] a[0] literla[0] string[0] not[0] a[0] resource[0] [[Sentence=-1,1=word max, 1-5]] this[0] makes[0] it[0] easy[0] to[0] edit[0] simple[0] labels[0] [[Sentence=-1,1=word max, 1-5]] see[0] the[0] following[0] adt[0] dev[0] thread[0] for[0] some[0] background[0] on[0] this[0] http[0] ://groups[0] [[Sentence=-1,1=word max, 1-5]] google[0] [[Sentence=-1,1=word max, 1-5]] com/group/adt[0] dev/browse_thread/[0] thread/d53e71c2970ce369[0] [[Sentence=-1,1=word max, 1-5]] pli[0] 1[0] there[0] is[0] also[0] a[0] new[0] label[0] below[0] the[0] text[0] field[0] which[0] shows[0] the[0] resolved[1] value[0] [[Sentence=-1,2=word max, 1-5]] for[0] example[0] if[0] you've[0] chosen[0] hello[0] in[0] the[0] filter[0] list[0] the[0] new[0] value[0] text[0] will[0] show[0] "@string/hello[0] and[0] the[0] new[0] label[0] will[0] show[0] hello[0] world[0] [[Sentence=-1,1=word max, 1-5]] this[0] will[0] hopefully[0] make[0] it[0] more[0] obvious[0] what[0] it[0] is[0] you're[0] editing[0] [[Sentence=-1,1=word max, 1-5]] and[0] similar[0] to[0] the[0] widget[0] render[0] preview[0] for[0] drawable[0] resources[0] this[0] makes[0] it[0] easier[0] to[0] browse[0] and[0] pick[0] labels[0] especially[0] when[0] browsing[0] framework[0] resources[0] [[Sentence=-1,1=word max, 1-5]] this[0] is[0] currently[0] only[0] enabled[0] for[0] @string[0] and[0] @dimen[0] resources[0] but[0] we[0] could[0] conceivably[0] add[0] it[0] for[0] other[0] resource[0] types[0] too[0] [[Sentence=-1,1=word max, 1-5]] longer[0] term[0] we[0] need[0] inline[0] editing[0] of[0] widgets[0] where[0] values[1] entered[0] automatically[0] get[0] translated[0] into[0] resources[0] but[0] this[0] is[0] a[0] stopgap[0] measure[0] which[0] makes[0] it[0] easier[0] to[0] build[0] simple[0] apps[0] quickly[0] and[0] which[0] still[0] makes[0] it[0] simple[0] to[0] create[0] new[0] strings[0] or[0] select[0] existing[0] ones[0] from[0] the[0] filter[0] list[0] [[Sentence=-1,2=word max, 1-5]] and[0] we[0] have[0] both[0] lint[0] and[0] the[0] extract[0] string[0] refactoring[0] to[0] help[0] identify[0] and[0] fix[0] hardcoded[0] strings[0] later[0] on[0] [[Sentence=-1,1=word max, 1-5]] while[0] working[0] on[0] this[0] i[0] also[0] discovered[0] the[0] root[0] cause[0] for[0] this[0] bug[0] 20589[0] the[0] reference[0] chooser[0] is[0] not[0] usable[0] for[0] framework[0] styles[0] turns[0] out[0] org[0] [[Sentence=-1,1=word max, 1-5]] eclipse[0] [[Sentence=-1,1=word max, 1-5]] ui[0] [[Sentence=-1,1=word max, 1-5]] dialogs[0] [[Sentence=-1,1=word max, 1-5]] abstractelementlistselectiondialog[0] has[0] a[0] handleemptylist[0] method[0] which[0] calls[0] setenabled[0] false[0] on[0] the[0] filter[0] list[0] when[0] the[0] list[0] is[0] empty[0] [[Sentence=-1,1=word max, 1-5]] crucially[0] there[0] is[0] no[0] corresponding[0] setenabled[0] true[1] call[0] when[0] the[0] list[0] is[0] made[0] non[0] empty[0] [[Sentence=-1,2=word max, 1-5]] when[0] the[0] user[0] switches[0] between[0] framework[0] and[0] project[0] resources[0] the[0] list[0] is[0] temporarily[-1] empty[0] so[0] the[0] list[0] gets[0] disabled[0] and[0] that's[0] why[0] it's[0] not[0] responding[0] to[0] menu[0] clicks[0] at[0] all[0] [[Sentence=-2,1=word max, 1-5]] this[0] changeset[0] also[0] fixes[0] that[0] bug[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] id441104d617fa4440daba3da2dc63e2c999f48c1/id441104d617fa440daba3da2dc63e2c99f48c1[0][+0.6 MultipleLetters] [[Sentence=-1,2=word max, 1-5]][[[2,-2 max of sentences]]]
1713 commit 3ce45b249f898697ae82e8c6dd045966227f3438 lint infrastructure improvements this changeset fixes a bunch of issues in the infrastructure: (1) it cleans up the context class quite a bit. it had some hardcoded xml stuff in it, which is now in a separate xmlcontext class (and there will be a javacontext class in the java support cl). it also hides a bunch of public fields, cleans up some unused stuff, and introduces a couple of wrapper methods to make detector code cleaner; in particular, rather than calling context.client.report(context, ... you can now just call context.report(... and similarly there are wrappers for logging and checking for disabled issues. (2) the iparser interface is renamed to idomparser since in the next cl there will also be an ijavaparser. some other related cleanup. (3) there is now a "location.handle" interface. this allows detectors to create light-weight location holders, and later on call handle.resolve() to create a full-fledged location. this is useful when detectors don't yet know whether they'll need a location for a node, but want to store it for later in case they do. as an example, the unused resource detector creates location handles for declaration and only resolves full locations for those that are found to be unused. locations can now carry custom messages. for example, for a duplicate id error, the secondary location now contains a "original declaration here" message. and the cli and html reports now include alternate locations in the output. some other location cleanup too; using factory methods to make the code cleaner, some default implementations that can be shared, etc. (4) there's a new sdk info class intended to provide sdk information from a tool client (such as resource resolution). it currently just contains parent-view information, used for the obsoletelayoutparams detector and an upcoming cl for a viewtypedetector. (5) the detector class now provides dummy implementations for the inner-interfaces, so we no longer need the adapter classes. this makes it easy to implement the xmlscanner or javascanner interfaces without needing to also stub out a bunch of methods. change-id: i4b3aaabe51febb25b000f9086703653bea6cf7c9 	1713 commit 3ce45b249f898697ae82e8c6dd045966227f3438 lint infrastructure improvements this changeset fixes a bunch of issues in the infrastructure: (1) it cleans up the context class quite a bit.<br> it had some hardcoded xml stuff in it, which is now in a separate xmlcontext class (and there will be a javacontext class in the java support cl)<br> it also hides a bunch of public fields, cleans up some unused stuff, and introduces a couple of wrapper methods to make detector code cleaner; in particular, rather than calling context.<br>client.<br>report(context, .<br> you can now just call context.<br>report(<br> and similarly there are wrappers for logging and checking for disabled issues.<br> (2) the iparser interface is renamed to idomparser since in the next cl there will also be an ijavaparser.<br> some other related cleanup.<br> (3) there is now a "location.<br>handle" interface.<br> this allows detectors to create light-weight location holders, and later on call handle.<br>resolve( to create a full-fledged location.<br> this is useful when detectors don't yet know whether they'll need a location for a node, but want to store it for later in case they do.<br> as an example, the unused resource detector creates location handles for declaration and only resolves full locations for those that are found to be unused.<br> locations can now carry custom messages.<br> for example, for a duplicate id error, the secondary location now contains a "original declaration here" message.<br> and the cli and html reports now include alternate locations in the output.<br> some other location cleanup too; using factory methods to make the code cleaner, some default implementations that can be shared, etc.<br> (4) there's a new sdk info class intended to provide sdk information from a tool client (such as resource resolution)<br> it currently just contains parent-view information, used for the obsoletelayoutparams detector and an upcoming cl for a viewtypedetector.<br> (5) the detector class now provides dummy implementations for the inner-interfaces, so we no longer need the adapter classes.<br> this makes it easy to implement the xmlscanner or javascanner interfaces without needing to also stub out a bunch of methods.<br> change-id: i4b3abe51febb25b00f9086703653bea6cf7c9	2	-1	 1713[0] commit[0] 3ce45b249f898697ae82e8c6dd045966227f3438[0] lint[0] infrastructure[0] improvements[1] this[0] changeset[0] fixes[0] a[0] bunch[0] of[0] issues[0] in[0] the[0] infrastructure[0] (1[0] it[0] cleans[0] up[0] the[0] context[0] class[0] quite[0] a[0] bit[0] [[Sentence=-1,2=word max, 1-5]] it[0] had[0] some[0] hardcoded[0] xml[0] stuff[0] in[0] it[0] which[0] is[0] now[0] in[0] a[0] separate[0] xmlcontext[0] class[0] and[0] there[0] will[0] be[0] a[0] javacontext[0] class[0] in[0] the[0] java[0] support[0] cl[0] [[Sentence=-1,1=word max, 1-5]] it[0] also[0] hides[0] a[0] bunch[0] of[0] public[0] fields[0] cleans[0] up[0] some[0] unused[0] stuff[0] and[0] introduces[0] a[0] couple[0] of[0] wrapper[0] methods[0] to[0] make[0] detector[0] code[0] cleaner[0] in[0] particular[0] rather[0] than[0] calling[0] context[0] [[Sentence=-1,1=word max, 1-5]] client[0] [[Sentence=-1,1=word max, 1-5]] report[0] context[0] [[Sentence=-1,1=word max, 1-5]] you[0] can[0] now[0] just[0] call[0] context[0] [[Sentence=-1,1=word max, 1-5]] report[0] [[Sentence=-1,1=word max, 1-5]] and[0] similarly[0] there[0] are[0] wrappers[0] for[0] logging[0] and[0] checking[0] for[0] disabled[0] issues[0] [[Sentence=-1,1=word max, 1-5]] (2[0] the[0] iparser[0] interface[0] is[0] renamed[0] to[0] idomparser[0] since[0] in[0] the[0] next[0] cl[0] there[0] will[0] also[0] be[0] an[0] ijavaparser[0] [[Sentence=-1,1=word max, 1-5]] some[0] other[0] related[0] cleanup[0] [[Sentence=-1,1=word max, 1-5]] (3[0] there[0] is[0] now[0] a[0] location[0] [[Sentence=-1,1=word max, 1-5]] handle[0] interface[0] [[Sentence=-1,1=word max, 1-5]] this[0] allows[0] detectors[0] to[0] create[0] light[0] weight[0] location[0] holders[0] and[0] later[0] on[0] call[0] handle[0] [[Sentence=-1,1=word max, 1-5]] resolve[0] to[0] create[0] a[0] full[0] fledged[0] location[0] [[Sentence=-1,1=word max, 1-5]] this[0] is[0] useful[1] when[0] detectors[0] don't[0] yet[0] know[0] whether[0] they'll[0] need[0] a[0] location[0] for[0] a[0] node[0] but[0] want[0] to[0] store[0] it[0] for[0] later[0] in[0] case[0] they[0] do[0] [[Sentence=-1,2=word max, 1-5]] as[0] an[0] example[0] the[0] unused[0] resource[0] detector[0] creates[0] location[0] handles[0] for[0] declaration[0] and[0] only[0] resolves[1] full[0] locations[0] for[0] those[0] that[0] are[0] found[0] to[0] be[0] unused[0] [[Sentence=-1,2=word max, 1-5]] locations[0] can[0] now[0] carry[0] custom[0] messages[0] [[Sentence=-1,1=word max, 1-5]] for[0] example[0] for[0] a[0] duplicate[0] id[0] error[0] the[0] secondary[0] location[0] now[0] contains[0] a[0] original[0] declaration[0] here[0] message[0] [[Sentence=-1,1=word max, 1-5]] and[0] the[0] cli[0] and[0] html[0] reports[0] now[0] include[0] alternate[0] locations[0] in[0] the[0] output[0] [[Sentence=-1,1=word max, 1-5]] some[0] other[0] location[0] cleanup[0] too[0] using[0] factory[0] methods[0] to[0] make[0] the[0] code[0] cleaner[0] some[0] default[-1][--1 LastWordBoosterStrength] implementations[0] that[0] can[0] be[0] shared[0] etc[0] [[Sentence=-1,1=word max, 1-5]] (4[0] there's[0] a[0] new[0] sdk[0] info[0] class[0] intended[0] to[0] provide[0] sdk[0] information[0] from[0] a[0] tool[0] client[0] such[0] as[0] resource[0] resolution[0] [[Sentence=-1,1=word max, 1-5]] it[0] currently[0] just[0] contains[0] parent[0] view[0] information[0] used[0] for[0] the[0] obsoletelayoutparams[0] detector[0] and[0] an[0] upcoming[0] cl[0] for[0] a[0] viewtypedetector[0] [[Sentence=-1,1=word max, 1-5]] (5[0] the[0] detector[0] class[0] now[0] provides[0] dummy[0] implementations[0] for[0] the[0] inner[0] interfaces[0] so[0] we[0] no[0] longer[0] need[0] the[0] adapter[0] classes[0] [[Sentence=-1,1=word max, 1-5]] this[0] makes[0] it[0] easy[0] to[0] implement[0] the[0] xmlscanner[0] or[0] javascanner[0] interfaces[0] without[0] needing[0] to[0] also[0] stub[0] out[0] a[0] bunch[0] of[0] methods[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i4b3aaabe51febb25b000f9086703653bea6cf7c9/i4b3abe51febb25b00f9086703653bea6cf7c9[0][+0.6 MultipleLetters] [[Sentence=-1,2=word max, 1-5]][[[2,-1 max of sentences]]]
1945 commit 8027fad9680e1622d7c70be330422d6b11fc6c88 more lint checks: translation, i18n, proguard, gridlayout, "px" this changeset adds more lint checks: (1) translation. it looks at all the string values in the application, and if there are discrepancies (where a translatable string is not defined in all provided languages and regions) then these are listed. (2) internationalization. it looks for text: and contentdescription: attributes and ensures that these refer to @string resources, not hardcoded string values. this lint warning also has an associated quickfix when shown in eclipse which invokes the extract string refactoring wizard on the right selection context. (3) proguard. it looks for the old (broken) patterns we had in older proguard.cfg files (-keepclasseswithmembernames instead of -keepclasseswithmembers which implies shrinking.) (4) gridlayout. it looks at the layout constraints provided on views in a gridlayout and ensures that they fall within the overall dimensions of the grid. (5) "px" usage. it looks for dimensions using "px" as a unit and recommends switching to dp instead. this lint warning also has a quickfix in eclipse which pops up a dialog asking for the screen density and then converts the px value to the right dp value and changes the unit. (6) textfields. it looks at edittexts and makes sure they either set inputtype, hint or inputmethod. there's a quickfix in eclipse for setting the inputtype, which adds the property and automatically invokes content assist for showing the possible values. this changeset also adds some quick fixes for a few existing lint warnings: (7) accessibility: insert a content description attribute, front the editor and select the placeholder value. (8) useless leaf layout: remove the leaf layout (9) useless middle layout: invoke the remove container visual refactoring 10) inefficient linear layout weights: change the attribute to 0dp plus unit tests. change-id: iebd7b23224a898bd1851abd578460019aee44df5 	1945 commit 8027fad9680e1622d7c70be330422d6b11fc6c88 more lint checks: translation, i18n, proguard, gridlayout, "px" this changeset adds more lint checks: (1) translation.<br> it looks at all the string values in the application, and if there are discrepancies (where a translatable string is not defined in all provided languages and regions) then these are listed.<br> (2) internationalization.<br> it looks for text: and contentdescription: attributes and ensures that these refer to @string resources, not hardcoded string values.<br> this lint warning also has an associated quickfix when shown in eclipse which invokes the extract string refactoring wizard on the right selection context.<br> (3) proguard.<br> it looks for the old (broken) patterns we had in older proguard.<br>cfg files (keepclasseswithmembernames instead of -keepclasseswithmembers which implies shrinking.<br> (4) gridlayout.<br> it looks at the layout constraints provided on views in a gridlayout and ensures that they fall within the overall dimensions of the grid.<br> (5) "px" usage.<br> it looks for dimensions using "px" as a unit and recommends switching to dp instead.<br> this lint warning also has a quickfix in eclipse which pops up a dialog asking for the screen density and then converts the px value to the right dp value and changes the unit.<br> (6) textfields.<br> it looks at edittexts and makes sure they either set inputtype, hint or inputmethod.<br> there's a quickfix in eclipse for setting the inputtype, which adds the property and automatically invokes content assist for showing the possible values.<br> this changeset also adds some quick fixes for a few existing lint warnings: (7) accessibility: insert a content description attribute, front the editor and select the placeholder value.<br> (8) useless leaf layout: remove the leaf layout (9) useless middle layout: invoke the remove container visual refactoring 10) inefficient linear layout weights: change the attribute to 0dp plus unit tests.<br> change-id: iebd7b23224a898bd1851abd578460019aee44df5	2	-3	 1945[0] commit[0] 8027fad9680e1622d7c70be330422d6b11fc6c88[0] more[0] lint[0] checks[0] translation[0] i18n[0] proguard[0] gridlayout[0] px[0] this[0] changeset[0] adds[0] more[0] lint[0] checks[0] (1[0] translation[0] [[Sentence=-1,1=word max, 1-5]] it[0] looks[0] at[0] all[0] the[0] string[0] values[1] in[0] the[0] application[0] and[0] if[0] there[0] are[0] discrepancies[0] where[0] a[0] translatable[0] string[0] is[0] not[0] defined[0] in[0] all[0] provided[0] languages[0] and[0] regions[0] then[0] these[0] are[0] listed[0] [[Sentence=-1,2=word max, 1-5]] (2[0] internationalization[0] [[Sentence=-1,1=word max, 1-5]] it[0] looks[0] for[0] text[0] and[0] contentdescription[0] attributes[0] and[0] ensures[0] that[0] these[0] refer[0] to[0] @string[0] resources[0] not[0] hardcoded[0] string[0] values[1] [[Sentence=-1,2=word max, 1-5]] this[0] lint[0] warning[0] also[0] has[0] an[0] associated[0] quickfix[0] when[0] shown[0] in[0] eclipse[0] which[0] invokes[0] the[0] extract[0] string[0] refactoring[0] wizard[0] on[0] the[0] right[0] selection[0] context[0] [[Sentence=-1,1=word max, 1-5]] (3[0] proguard[0] [[Sentence=-1,1=word max, 1-5]] it[0] looks[0] for[0] the[0] old[0] broken[-1] patterns[0] we[0] had[0] in[0] older[0] proguard[0] [[Sentence=-2,1=word max, 1-5]] cfg[0] files[0] keepclasseswithmembernames[0] instead[0] of[0] keepclasseswithmembers[0] which[0] implies[0] shrinking[0] [[Sentence=-1,1=word max, 1-5]] (4[0] gridlayout[0] [[Sentence=-1,1=word max, 1-5]] it[0] looks[0] at[0] the[0] layout[0] constraints[0] provided[0] on[0] views[0] in[0] a[0] gridlayout[0] and[0] ensures[0] that[0] they[0] fall[0] within[0] the[0] overall[0] dimensions[0] of[0] the[0] grid[0] [[Sentence=-1,1=word max, 1-5]] (5[0] px[0] usage[0] [[Sentence=-1,1=word max, 1-5]] it[0] looks[0] for[0] dimensions[0] using[0] px[0] as[0] a[0] unit[0] and[0] recommends[0] switching[0] to[0] dp[0] instead[0] [[Sentence=-1,1=word max, 1-5]] this[0] lint[0] warning[0] also[0] has[0] a[0] quickfix[0] in[0] eclipse[0] which[0] pops[0] up[0] a[0] dialog[0] asking[0] for[0] the[0] screen[0] density[0] and[0] then[0] converts[0] the[0] px[0] value[0] to[0] the[0] right[0] dp[0] value[0] and[0] changes[0] the[0] unit[0] [[Sentence=-1,1=word max, 1-5]] (6[0] textfields[0] [[Sentence=-1,1=word max, 1-5]] it[0] looks[0] at[0] edittexts[0] and[0] makes[0] sure[0] they[0] either[0] set[0] inputtype[0] hint[0] or[0] inputmethod[0] [[Sentence=-1,1=word max, 1-5]] there's[0] a[0] quickfix[0] in[0] eclipse[0] for[0] setting[0] the[0] inputtype[0] which[0] adds[0] the[0] property[0] and[0] automatically[0] invokes[0] content[0] assist[0] for[0] showing[0] the[0] possible[0] values[1] [[Sentence=-1,2=word max, 1-5]] this[0] changeset[0] also[0] adds[0] some[0] quick[0] fixes[0] for[0] a[0] few[0] existing[0] lint[0] warnings[0] (7[0] accessibility[0] insert[0] a[0] content[0] description[0] attribute[0] front[0] the[0] editor[0] and[0] select[0] the[0] placeholder[0] value[0] [[Sentence=-1,1=word max, 1-5]] (8[0] useless[-2] leaf[0] layout[0] remove[0] the[0] leaf[0] layout[0] (9[0] useless[-2] middle[0] layout[0] invoke[0] the[0] remove[0] container[0] visual[0] refactoring[0] 10[0] inefficient[0] linear[0] layout[0] weights[0] change[0] the[0] attribute[0] to[0] 0dp[0] plus[0] unit[0] tests[0] [[Sentence=-3,1=word max, 1-5]] change[0] id[0] iebd7b23224a898bd1851abd578460019aee44df5[0] [[Sentence=-1,1=word max, 1-5]][[[2,-3 max of sentences]]]
2054 commit 26d35ede022f3c5a319dedb3623170f72223b4db merge: 78be428 5ee7e3b am 5ee7e3ba: merge "support for palette configurations in change layout refactoring" * commit '5ee7e3bab395fa0b1c6c20bfa9c7efb600b7f834': support for palette configurations in change layout refactoring 	2054 commit 26d35ede022f3c5a319dedb3623170f7223b4db merge: 78be428 5ee7e3b am 5ee7e3ba: merge "support for palette configurations in change layout refactoring" * commit '5ee7e3bab395fa0b1c6c20bfa9c7efb600b7f834': support for palette configurations in change layout refactoring	1	-1	 2054[0] commit[0] 26d35ede022f3c5a319dedb3623170f72223b4db/26d35ede022f3c5a319dedb3623170f7223b4db[0] merge[0] 78be428[0] 5ee7e3b[0] am[0] 5ee7e3ba[0] merge[0] support[0] for[0] palette[0] configurations[0] in[0] change[0] layout[0] refactoring[0] commit[0] '5ee7e3bab395fa0b1c6c20bfa9c7efb600b7f834'[0] support[0] for[0] palette[0] configurations[0] in[0] change[0] layout[0] refactoring[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
2098 commit ae686e0f86181bf5a6512afa0198367650d2d71f merge: fda8724 cb82285 am cb822859: merge "add gridlayout support to the changelayout refactoring" * commit 'cb8228592503170f3e3136146f893d4d06d54ee9': add gridlayout support to the changelayout refactoring 	2098 commit ae686e0f86181bf5a6512afa0198367650d2d71f merge: fda8724 cb82285 am cb822859: merge "add gridlayout support to the changelayout refactoring" * commit 'cb8228592503170f3e3136146f893d4d06d54ee9': add gridlayout support to the changelayout refactoring	1	-1	 2098[0] commit[0] ae686e0f86181bf5a6512afa0198367650d2d71f[0] merge[0] fda8724[0] cb82285[0] am[0] cb822859[0] merge[0] add[0] gridlayout[0] support[0] to[0] the[0] changelayout[0] refactoring[0] commit[0] 'cb8228592503170f3e3136146f893d4d06d54ee9'[0] add[0] gridlayout[0] support[0] to[0] the[0] changelayout[0] refactoring[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
2334 commit 1cb7304d90ddcc2c316ebb3410d232f0ed4fc369 minor refactor: keep sizes of snapshot arraylist's in sync. change-id: i30aef911df1146ff9a64c4d08c4371c2937d4e94 	2334 commit 1cb7304d90ddcc2c316ebb3410d232f0ed4fc369 minor refactor: keep sizes of snapshot arraylist's in sync.<br> change-id: i30aef911df1146ff9a64c4d08c4371c2937d4e94	1	-1	 2334[0] commit[0] 1cb7304d90ddcc2c316ebb3410d232f0ed4fc369[0] minor[0] refactor[0] keep[0] sizes[0] of[0] snapshot[0] arraylist's[0] in[0] sync[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i30aef911df1146ff9a64c4d08c4371c2937d4e94[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
2431 commit 8a06163380b3df70071df08a17f2f8c2aa77513c cherrypick 4cd282 from master. do not merge. grid layout and convert to grid layout improvements first, some improvements to grid layout handling: (1) when dropping a new widget, look up the sizing metadata and use it to determine what fill gravity to set. for example, a button will use gravity left, and a text field will use gravity fill_horizontal. (2) don't warn about reflection problems when failing to find gridlayout layout data; this probably means the layout is being attempted opened in an unsupporting sdk. there's a fallback case to compute the data instead already. second, improvements to the conversion to gridlayout handling: (1) it now looks at the layout_gravity values to see whether each row and column is flexible, and if there's no flexible column in each of the horizontal and vertical dimensions, it will insert a special  space  element to absorb any available extra space. this avoids constraints warnings from gridlayout. (2) it treats layout_width or layout_height attributes of match_parent or fill_parent as the same as a fill gravity (and removes it) and uses this in the flexibility computation above. (3) it removes unsupported layout params for all children (earlier this would only remove unsupported layout params on the direct children of the layout, which isn't enough when a hierarchy is being flattened.) (4) it's smarter about computing implicit rows and columns, so it avoids writing out redundant layout_row and layout_column attributes in some cases. (5) it avoids throwing refactoring errors in cases where an attribute is removed twice (6) fixes a bug where the root layout was included when computing the set of used x and y coordinates, which means you'd often end up with a blank row and column 0. (7) various refactoring to make the code cleaner. (8) more unit tests and updates to existing unit tests to reflect the new behavior such as an absorbing spacer and removal of redundant attributes. change-id: ifaca43458a4961fa032dfe22dc033b6def3c38d3 	2431 commit 8a06163380b3df70071df08a17f2f8c2a77513c cherrypick 4cd282 from master.<br> do not merge.<br> grid layout and convert to grid layout improvements first, some improvements to grid layout handling: (1) when dropping a new widget, look up the sizing metadata and use it to determine what fill gravity to set.<br> for example, a button will use gravity left, and a text field will use gravity fill_horizontal.<br> (2) don't warn about reflection problems when failing to find gridlayout layout data; this probably means the layout is being attempted opened in an unsupporting sdk.<br> there's a fallback case to compute the data instead already.<br> second, improvements to the conversion to gridlayout handling: (1) it now looks at the layout_gravity values to see whether each row and column is flexible, and if there's no flexible column in each of the horizontal and vertical dimensions, it will insert a special  space  element to absorb any available extra space.<br> this avoids constraints warnings from gridlayout.<br> (2) it treats layout_width or layout_height attributes of match_parent or fill_parent as the same as a fill gravity (and removes it) and uses this in the flexibility computation above.<br> (3) it removes unsupported layout params for all children (earlier this would only remove unsupported layout params on the direct children of the layout, which isn't enough when a hierarchy is being flattened.<br> (4) it's smarter about computing implicit rows and columns, so it avoids writing out redundant layout_row and layout_column attributes in some cases.<br> (5) it avoids throwing refactoring errors in cases where an attribute is removed twice (6) fixes a bug where the root layout was included when computing the set of used x and y coordinates, which means you'd often end up with a blank row and column 0.<br> (7) various refactoring to make the code cleaner.<br> (8) more unit tests and updates to existing unit tests to reflect the new behavior such as an absorbing spacer and removal of redundant attributes.<br> change-id: ifaca43458a4961fa032dfe22dc033b6def3c38d3	2	-2	 2431[0] commit[0] 8a06163380b3df70071df08a17f2f8c2aa77513c/8a06163380b3df70071df08a17f2f8c2a77513c[0] cherrypick[0] 4cd282[0] from[0] master[0] [[Sentence=-1,1=word max, 1-5]] do[0] not[0] merge[0] [[Sentence=-1,1=word max, 1-5]] grid[0] layout[0] and[0] convert[0] to[0] grid[0] layout[0] improvements[1] first[0] some[0] improvements[1][-1 LastWordBoosterStrength] to[0] grid[0] layout[0] handling[0] (1[0] when[0] dropping[0] a[0] new[0] widget[0] look[0] up[0] the[0] sizing[0] metadata[0] and[0] use[0] it[0] to[0] determine[0] what[0] fill[0] gravity[0] to[0] set[0] [[Sentence=-1,2=word max, 1-5]] for[0] example[0] a[0] button[0] will[0] use[0] gravity[0] left[0] and[0] a[0] text[0] field[0] will[0] use[0] gravity[0] fill_horizontal[0] [[Sentence=-1,1=word max, 1-5]] (2[0] don't[0] warn[0] about[0] reflection[0] problems[-1] when[0] failing[0] to[0] find[0] gridlayout[0] layout[0] data[0] this[0] probably[0] means[0] the[0] layout[0] is[0] being[0] attempted[0] opened[0] in[0] an[0] unsupporting[0] sdk[0] [[Sentence=-2,1=word max, 1-5]] there's[0] a[0] fallback[0] case[0] to[0] compute[0] the[0] data[0] instead[0] already[0] [[Sentence=-1,1=word max, 1-5]] second[0] improvements[1] to[0] the[0] conversion[0] to[0] gridlayout[0] handling[0] (1[0] it[0] now[0] looks[0] at[0] the[0] layout_gravity[0] values[1] to[0] see[0] whether[0] each[0] row[0] and[0] column[0] is[0] flexible[0] and[0] if[0] there's[0] no[0] flexible[0] column[0] in[0] each[0] of[0] the[0] horizontal[0] and[0] vertical[0] dimensions[0] it[0] will[0] insert[0] a[0] special[1] space[0] element[0] to[0] absorb[0] any[0] available[0] extra[0] space[0] [[Sentence=-1,2=word max, 1-5]] this[0] avoids[-1] constraints[0] warnings[0] from[0] gridlayout[0] [[Sentence=-2,1=word max, 1-5]] (2[0] it[0] treats[0] layout_width[0] or[0] layout_height[0] attributes[0] of[0] match_parent[0] or[0] fill_parent[0] as[0] the[0] same[0] as[0] a[0] fill[0] gravity[0] and[0] removes[0] it[0] and[0] uses[0] this[0] in[0] the[0] flexibility[0] computation[0] above[0] [[Sentence=-1,1=word max, 1-5]] (3[0] it[0] removes[0] unsupported[0] layout[0] params[0] for[0] all[0] children[0] earlier[0] this[0] would[0] only[0] remove[0] unsupported[0] layout[0] params[0] on[0] the[0] direct[0] children[0] of[0] the[0] layout[0] which[0] isn't[0] enough[0] when[0] a[0] hierarchy[0] is[0] being[0] flattened[0] [[Sentence=-1,1=word max, 1-5]] (4[0] it's[0] smarter[1] about[0] computing[0] implicit[0] rows[0] and[0] columns[0] so[0] it[0] avoids[-1] writing[0] out[0] redundant[0] layout_row[0] and[0] layout_column[0] attributes[0] in[0] some[0] cases[0] [[Sentence=-2,2=word max, 1-5]] (5[0] it[0] avoids[-1] throwing[0] refactoring[0] errors[0] in[0] cases[0] where[0] an[0] attribute[0] is[0] removed[0] twice[0] (6[0] fixes[0] a[0] bug[0] where[0] the[0] root[0] layout[0] was[0] included[0] when[0] computing[0] the[0] set[0] of[0] used[0] x[1] and[0] y[0] coordinates[0] which[0] means[0] you'd[0] often[0] end[0] up[0] with[0] a[0] blank[0] row[0] and[0] column[0] 0[0] [[Sentence=-2,2=word max, 1-5]] (7[0] various[0] refactoring[0] to[0] make[0] the[0] code[0] cleaner[0] [[Sentence=-1,1=word max, 1-5]] (8[0] more[0] unit[0] tests[0] and[0] updates[0] to[0] existing[0] unit[0] tests[0] to[0] reflect[0] the[0] new[0] behavior[0] such[0] as[0] an[0] absorbing[0] spacer[0] and[0] removal[0] of[0] redundant[0] attributes[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] ifaca43458a4961fa032dfe22dc033b6def3c38d3[0] [[Sentence=-1,1=word max, 1-5]][[[2,-2 max of sentences]]]
2467 commit 4cd282c7b21dc06c2d2d02748278f07c94282fc1 grid layout and convert to grid layout improvements first, some improvements to grid layout handling: (1) when dropping a new widget, look up the sizing metadata and use it to determine what fill gravity to set. for example, a button will use gravity left, and a text field will use gravity fill_horizontal. (2) don't warn about reflection problems when failing to find gridlayout layout data; this probably means the layout is being attempted opened in an unsupporting sdk. there's a fallback case to compute the data instead already. second, improvements to the conversion to gridlayout handling: (1) it now looks at the layout_gravity values to see whether each row and column is flexible, and if there's no flexible column in each of the horizontal and vertical dimensions, it will insert a special  space  element to absorb any available extra space. this avoids constraints warnings from gridlayout. (2) it treats layout_width or layout_height attributes of match_parent or fill_parent as the same as a fill gravity (and removes it) and uses this in the flexibility computation above. (3) it removes unsupported layout params for all children (earlier this would only remove unsupported layout params on the direct children of the layout, which isn't enough when a hierarchy is being flattened.) (4) it's smarter about computing implicit rows and columns, so it avoids writing out redundant layout_row and layout_column attributes in some cases. (5) it avoids throwing refactoring errors in cases where an attribute is removed twice (6) fixes a bug where the root layout was included when computing the set of used x and y coordinates, which means you'd often end up with a blank row and column 0. (7) various refactoring to make the code cleaner. (8) more unit tests and updates to existing unit tests to reflect the new behavior such as an absorbing spacer and removal of redundant attributes. change-id: iee44c3ca749eefc107b83545669cc9d7f84615b1 	2467 commit 4cd282c7b21dc06c2d2d02748278f07c94282fc1 grid layout and convert to grid layout improvements first, some improvements to grid layout handling: (1) when dropping a new widget, look up the sizing metadata and use it to determine what fill gravity to set.<br> for example, a button will use gravity left, and a text field will use gravity fill_horizontal.<br> (2) don't warn about reflection problems when failing to find gridlayout layout data; this probably means the layout is being attempted opened in an unsupporting sdk.<br> there's a fallback case to compute the data instead already.<br> second, improvements to the conversion to gridlayout handling: (1) it now looks at the layout_gravity values to see whether each row and column is flexible, and if there's no flexible column in each of the horizontal and vertical dimensions, it will insert a special  space  element to absorb any available extra space.<br> this avoids constraints warnings from gridlayout.<br> (2) it treats layout_width or layout_height attributes of match_parent or fill_parent as the same as a fill gravity (and removes it) and uses this in the flexibility computation above.<br> (3) it removes unsupported layout params for all children (earlier this would only remove unsupported layout params on the direct children of the layout, which isn't enough when a hierarchy is being flattened.<br> (4) it's smarter about computing implicit rows and columns, so it avoids writing out redundant layout_row and layout_column attributes in some cases.<br> (5) it avoids throwing refactoring errors in cases where an attribute is removed twice (6) fixes a bug where the root layout was included when computing the set of used x and y coordinates, which means you'd often end up with a blank row and column 0.<br> (7) various refactoring to make the code cleaner.<br> (8) more unit tests and updates to existing unit tests to reflect the new behavior such as an absorbing spacer and removal of redundant attributes.<br> change-id: iee44c3ca749eefc107b83545669cc9d7f84615b1	2	-2	 2467[0] commit[0] 4cd282c7b21dc06c2d2d02748278f07c94282fc1[0] grid[0] layout[0] and[0] convert[0] to[0] grid[0] layout[0] improvements[1] first[0] some[0] improvements[1][-1 LastWordBoosterStrength] to[0] grid[0] layout[0] handling[0] (1[0] when[0] dropping[0] a[0] new[0] widget[0] look[0] up[0] the[0] sizing[0] metadata[0] and[0] use[0] it[0] to[0] determine[0] what[0] fill[0] gravity[0] to[0] set[0] [[Sentence=-1,2=word max, 1-5]] for[0] example[0] a[0] button[0] will[0] use[0] gravity[0] left[0] and[0] a[0] text[0] field[0] will[0] use[0] gravity[0] fill_horizontal[0] [[Sentence=-1,1=word max, 1-5]] (2[0] don't[0] warn[0] about[0] reflection[0] problems[-1] when[0] failing[0] to[0] find[0] gridlayout[0] layout[0] data[0] this[0] probably[0] means[0] the[0] layout[0] is[0] being[0] attempted[0] opened[0] in[0] an[0] unsupporting[0] sdk[0] [[Sentence=-2,1=word max, 1-5]] there's[0] a[0] fallback[0] case[0] to[0] compute[0] the[0] data[0] instead[0] already[0] [[Sentence=-1,1=word max, 1-5]] second[0] improvements[1] to[0] the[0] conversion[0] to[0] gridlayout[0] handling[0] (1[0] it[0] now[0] looks[0] at[0] the[0] layout_gravity[0] values[1] to[0] see[0] whether[0] each[0] row[0] and[0] column[0] is[0] flexible[0] and[0] if[0] there's[0] no[0] flexible[0] column[0] in[0] each[0] of[0] the[0] horizontal[0] and[0] vertical[0] dimensions[0] it[0] will[0] insert[0] a[0] special[1] space[0] element[0] to[0] absorb[0] any[0] available[0] extra[0] space[0] [[Sentence=-1,2=word max, 1-5]] this[0] avoids[-1] constraints[0] warnings[0] from[0] gridlayout[0] [[Sentence=-2,1=word max, 1-5]] (2[0] it[0] treats[0] layout_width[0] or[0] layout_height[0] attributes[0] of[0] match_parent[0] or[0] fill_parent[0] as[0] the[0] same[0] as[0] a[0] fill[0] gravity[0] and[0] removes[0] it[0] and[0] uses[0] this[0] in[0] the[0] flexibility[0] computation[0] above[0] [[Sentence=-1,1=word max, 1-5]] (3[0] it[0] removes[0] unsupported[0] layout[0] params[0] for[0] all[0] children[0] earlier[0] this[0] would[0] only[0] remove[0] unsupported[0] layout[0] params[0] on[0] the[0] direct[0] children[0] of[0] the[0] layout[0] which[0] isn't[0] enough[0] when[0] a[0] hierarchy[0] is[0] being[0] flattened[0] [[Sentence=-1,1=word max, 1-5]] (4[0] it's[0] smarter[1] about[0] computing[0] implicit[0] rows[0] and[0] columns[0] so[0] it[0] avoids[-1] writing[0] out[0] redundant[0] layout_row[0] and[0] layout_column[0] attributes[0] in[0] some[0] cases[0] [[Sentence=-2,2=word max, 1-5]] (5[0] it[0] avoids[-1] throwing[0] refactoring[0] errors[0] in[0] cases[0] where[0] an[0] attribute[0] is[0] removed[0] twice[0] (6[0] fixes[0] a[0] bug[0] where[0] the[0] root[0] layout[0] was[0] included[0] when[0] computing[0] the[0] set[0] of[0] used[0] x[1] and[0] y[0] coordinates[0] which[0] means[0] you'd[0] often[0] end[0] up[0] with[0] a[0] blank[0] row[0] and[0] column[0] 0[0] [[Sentence=-2,2=word max, 1-5]] (7[0] various[0] refactoring[0] to[0] make[0] the[0] code[0] cleaner[0] [[Sentence=-1,1=word max, 1-5]] (8[0] more[0] unit[0] tests[0] and[0] updates[0] to[0] existing[0] unit[0] tests[0] to[0] reflect[0] the[0] new[0] behavior[0] such[0] as[0] an[0] absorbing[0] spacer[0] and[0] removal[0] of[0] redundant[0] attributes[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] iee44c3ca749eefc107b83545669cc9d7f84615b1[0] [[Sentence=-1,1=word max, 1-5]][[[2,-2 max of sentences]]]
2641 commit 5ee7e3bab395fa0b1c6c20bfa9c7efb600b7f834 merge: 81d811c 1294048 merge "support for palette configurations in change layout refactoring" 	2641 commit 5ee7e3bab395fa0b1c6c20bfa9c7efb600b7f834 merge: 81d811c 1294048 merge "support for palette configurations in change layout refactoring"	1	-1	 2641[0] commit[0] 5ee7e3bab395fa0b1c6c20bfa9c7efb600b7f834[0] merge[0] 81d811c[0] 1294048[0] merge[0] support[0] for[0] palette[0] configurations[0] in[0] change[0] layout[0] refactoring[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
2652 commit 1294048c3a602ab0de89f46b0f11cbb19d083bef support for palette configurations in change layout refactoring some items in the palette are just variations of other items with some different initial attributes. the wrap in refactoring already supports these, but the change layout did not - so for example converting to a vertical linear layout would not set the orientation "vertical" attribute. this changeset adds support for these in the change layout refactoring as well. change-id: i9b44a57ebf5cddba7ae381b48b666e53f7f41ab0 	2652 commit 1294048c3a602ab0de89f46b0f11cbb19d083bef support for palette configurations in change layout refactoring some items in the palette are just variations of other items with some different initial attributes.<br> the wrap in refactoring already supports these, but the change layout did not - so for example converting to a vertical linear layout would not set the orientation "vertical" attribute.<br> this changeset adds support for these in the change layout refactoring as well.<br> change-id: i9b44a57ebf5cddba7ae381b48b66e53f7f41ab0	2	-1	 2652[0] commit[0] 1294048c3a602ab0de89f46b0f11cbb19d083bef[0] support[0] for[0] palette[0] configurations[0] in[0] change[0] layout[0] refactoring[0] some[0] items[0] in[0] the[0] palette[0] are[0] just[0] variations[0] of[0] other[0] items[0] with[0] some[0] different[0] initial[0] attributes[0] [[Sentence=-1,1=word max, 1-5]] the[0] wrap[0] in[0] refactoring[0] already[0] supports[1] these[0] but[0] the[0] change[0] layout[0] did[0] not[0] so[0] for[0] example[0] converting[0] to[0] a[0] vertical[0] linear[0] layout[0] would[0] not[0] set[0] the[0] orientation[0] vertical[0] attribute[0] [[Sentence=-1,2=word max, 1-5]] this[0] changeset[0] adds[0] support[0] for[0] these[0] in[0] the[0] change[0] layout[0] refactoring[0] as[0] well[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i9b44a57ebf5cddba7ae381b48b666e53f7f41ab0/i9b44a57ebf5cddba7ae381b48b66e53f7f41ab0[0] [[Sentence=-1,1=word max, 1-5]][[[2,-1 max of sentences]]]
2698 commit cb8228592503170f3e3136146f893d4d06d54ee9 merge: 7d9db8f 564e4b8 merge "add gridlayout support to the changelayout refactoring" 	2698 commit cb8228592503170f3e3136146f893d4d06d54ee9 merge: 7d9db8f 564e4b8 merge "add gridlayout support to the changelayout refactoring"	1	-1	 2698[0] commit[0] cb8228592503170f3e3136146f893d4d06d54ee9[0] merge[0] 7d9db8f[0] 564e4b8[0] merge[0] add[0] gridlayout[0] support[0] to[0] the[0] changelayout[0] refactoring[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
2701 commit 564e4b80f642af7fa13c01f407c112778e25ae1e add gridlayout support to the changelayout refactoring this changeset adds a generic-to-gridlayout converter to the "change layout" refactoring. the converter arranges the views into a grid based on their bounds, uses the sizes to determine row and column spans, and then writes this out as the resulting grid. note that it does not yet consider existing layout knowledge to add better constraints, such as gravity, or arranging vertically overlapping views in a horizontal row into a same shared row. change-id: i78e5fdf49d9e2a838a7229e2e31aa62e190032ad 	2701 commit 564e4b80f642af7fa13c01f407c112778e25ae1e add gridlayout support to the changelayout refactoring this changeset adds a generic-to-gridlayout converter to the "change layout" refactoring.<br> the converter arranges the views into a grid based on their bounds, uses the sizes to determine row and column spans, and then writes this out as the resulting grid.<br> note that it does not yet consider existing layout knowledge to add better constraints, such as gravity, or arranging vertically overlapping views in a horizontal row into a same shared row.<br> change-id: i78e5fdf49d9e2a838a7229e2e31a62e190032ad	1	-1	 2701[0] commit[0] 564e4b80f642af7fa13c01f407c112778e25ae1e[0] add[0] gridlayout[0] support[0] to[0] the[0] changelayout[0] refactoring[0] this[0] changeset[0] adds[0] a[0] generic[0] to[0] gridlayout[0] converter[0] to[0] the[0] change[0] layout[0] refactoring[0] [[Sentence=-1,1=word max, 1-5]] the[0] converter[0] arranges[0] the[0] views[0] into[0] a[0] grid[0] based[0] on[0] their[0] bounds[0] uses[0] the[0] sizes[0] to[0] determine[0] row[0] and[0] column[0] spans[0] and[0] then[0] writes[0] this[0] out[0] as[0] the[0] resulting[0] grid[0] [[Sentence=-1,1=word max, 1-5]] note[0] that[0] it[0] does[0] not[0] yet[0] consider[0] existing[0] layout[0] knowledge[0] to[0] add[0] better[0] constraints[0] such[0] as[0] gravity[0] or[0] arranging[0] vertically[0] overlapping[0] views[0] in[0] a[0] horizontal[0] row[0] into[0] a[0] same[0] shared[0] row[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i78e5fdf49d9e2a838a7229e2e31aa62e190032ad/i78e5fdf49d9e2a838a7229e2e31a62e190032ad[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
2803 commit 6b6b377d706d6a4a6e11f83f6db9424537287952 merge: d17da3b f5256a3 merge "misc refactoring and test fixes" 	2803 commit 6b6b377d706d6a4a6e11f83f6db9424537287952 merge: d17da3b f5256a3 merge "misc refactoring and test fixes"	1	-1	 2803[0] commit[0] 6b6b377d706d6a4a6e11f83f6db9424537287952[0] merge[0] d17da3b[0] f5256a3[0] merge[0] misc[0] refactoring[0] and[0] test[0] fixes[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
2814 commit f5256a38ef2e429b5efd4482808bc902bf7634e3 misc refactoring and test fixes this changeset turns on automatic formatting of the affected regions in extract include, change layout, wrap in and style refactorings. it also fixes a couple of minor bugs - one handling empty tags in the change widget type refactoring, and one handling selection offsets. it also turns on automatic formatting of gui editor changes (there was a previous changeset which prepared for this but forgot to actually switch the default option.) this changeset also makes various test infrastructure fixes: code completion tests recently stopped working for a number of files (something about the initialization order of editor types when running as tests). i also tweaked the goldenfile format of the diffs to avoid trailing diffs on lines with just a " " or " " since gerrit makes thee light up in red. change-id: i78b858f0b21e5b2f25a9566ad495bad09c66a18f 	2814 commit f5256a38ef2e429b5efd4482808bc902bf7634e3 misc refactoring and test fixes this changeset turns on automatic formatting of the affected regions in extract include, change layout, wrap in and style refactorings.<br> it also fixes a couple of minor bugs - one handling empty tags in the change widget type refactoring, and one handling selection offsets.<br> it also turns on automatic formatting of gui editor changes (there was a previous changeset which prepared for this but forgot to actually switch the default option.<br> this changeset also makes various test infrastructure fixes: code completion tests recently stopped working for a number of files (something about the initialization order of editor types when running as tests)<br> i also tweaked the goldenfile format of the diffs to avoid trailing diffs on lines with just a " " or " " since gerrit makes thee light up in red.<br> change-id: i78b858f0b21e5b2f25a9566ad495bad09c66a18f	1	-2	 2814[0] commit[0] f5256a38ef2e429b5efd4482808bc902bf7634e3[0] misc[0] refactoring[0] and[0] test[0] fixes[0] this[0] changeset[0] turns[0] on[0] automatic[0] formatting[0] of[0] the[0] affected[0] regions[0] in[0] extract[0] include[0] change[0] layout[0] wrap[0] in[0] and[0] style[0] refactorings[0] [[Sentence=-1,1=word max, 1-5]] it[0] also[0] fixes[0] a[0] couple[0] of[0] minor[0] bugs[0] one[0] handling[0] empty[0] tags[0] in[0] the[0] change[0] widget[0] type[0] refactoring[0] and[0] one[0] handling[0] selection[0] offsets[0] [[Sentence=-1,1=word max, 1-5]] it[0] also[0] turns[0] on[0] automatic[0] formatting[0] of[0] gui[0] editor[0] changes[0] there[0] was[0] a[0] previous[0] changeset[0] which[0] prepared[0] for[0] this[0] but[0] forgot[0] to[0] actually[0] switch[0] the[0] default[-1] option[0] [[Sentence=-2,1=word max, 1-5]] this[0] changeset[0] also[0] makes[0] various[0] test[0] infrastructure[0] fixes[0] code[0] completion[0] tests[0] recently[0] stopped[0] working[0] for[0] a[0] number[0] of[0] files[0] something[0] about[0] the[0] initialization[0] order[0] of[0] editor[0] types[0] when[0] running[0] as[0] tests[0] [[Sentence=-1,1=word max, 1-5]] i[0] also[0] tweaked[0] the[0] goldenfile[0] format[0] of[0] the[0] diffs[0] to[0] avoid[-1] trailing[0] diffs[0] on[0] lines[0] with[0] just[0] a[0] or[0] since[0] gerrit[0] makes[0] thee[0] light[0] up[0] in[0] red[0] [[Sentence=-2,1=word max, 1-5]] change[0] id[0] i78b858f0b21e5b2f25a9566ad495bad09c66a18f[0] [[Sentence=-1,1=word max, 1-5]][[[1,-2 max of sentences]]]
2840 commit 922e0f13aa83e84727076c48db39df6dde54c951 merge: 0ffb931 fb49439 merge "add unwrap refactoring" 	2840 commit 922e0f13a83e84727076c48db39df6dde54c951 merge: 0ffb931 fb49439 merge "add unwrap refactoring"	1	-1	 2840[0] commit[0] 922e0f13aa83e84727076c48db39df6dde54c951/922e0f13a83e84727076c48db39df6dde54c951[0] merge[0] 0ffb931[0] fb49439[0] merge[0] add[0] unwrap[0] refactoring[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
2841 commit fb49439a6128d6812558d5089f9a4767cd4e3cc0 add unwrap refactoring this changeset adds a new visual refactoring: "remove container". this is basically the reverse of the "wrap in" refactoring (which surrounds the selected views with a new parent layout). instead it takes a parent and removes it, in the process transferring the namespace declaration (if a root element) and any layout params to the children. change-id: id535b88fcf39a8b7a83fd6feb981fff000140e8a 	2841 commit fb49439a6128d6812558d5089f9a4767cd4e3cc0 add unwrap refactoring this changeset adds a new visual refactoring: "remove container"<br> this is basically the reverse of the "wrap in" refactoring (which surrounds the selected views with a new parent layout)<br> instead it takes a parent and removes it, in the process transferring the namespace declaration (if a root element) and any layout params to the children.<br> change-id: id535b88fcf39a8b7a83fd6feb981ff00140e8a	2	-1	 2841[0] commit[0] fb49439a6128d6812558d5089f9a4767cd4e3cc0[0] add[0] unwrap[0] refactoring[0] this[0] changeset[0] adds[0] a[0] new[0] visual[0] refactoring[0] remove[0] container[0] [[Sentence=-1,1=word max, 1-5]] this[0] is[0] basically[0] the[0] reverse[0] of[0] the[0] wrap[0] in[0] refactoring[0] which[0] surrounds[0] the[0] selected[0] views[0] with[0] a[0] new[0] parent[0] layout[0] [[Sentence=-1,1=word max, 1-5]] instead[0] it[0] takes[0] a[0] parent[0] and[0] removes[0] it[0] in[0] the[0] process[0] transferring[0] the[0] namespace[0] declaration[0] if[0] a[0] root[0] element[0] and[0] any[0] layout[0] params[0] to[0] the[0] children[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] id535b88fcf39a8b7a83fd6feb981fff000140e8a/id535b88fcf39a8b7a83fd6feb981ff00140e8a[0][+0.6 MultipleLetters] [[Sentence=-1,2=word max, 1-5]][[[2,-1 max of sentences]]]
3235 commit 122ed4977a42719239e501fc522592994267bd9d sdkmanager: fix issue with double-packages on reload. rewrote the merge in place   sort of packages by api. did some refactoring   added some unit tests. change-id: i168b306853185866606ed76c324a8db6051b15bb 	3235 commit 122ed4977a42719239e501fc522592994267bd9d sdkmanager: fix issue with double-packages on reload.<br> rewrote the merge in place   sort of packages by api.<br> did some refactoring   added some unit tests.<br> change-id: i168b30685318586606ed76c324a8db6051b15bb	1	-1	 3235[0] commit[0] 122ed4977a42719239e501fc522592994267bd9d[0] sdkmanager[0] fix[0] issue[0] with[0] double[0] packages[0] on[0] reload[0] [[Sentence=-1,1=word max, 1-5]] rewrote[0] the[0] merge[0] in[0] place[0] sort[0] of[0] packages[0] by[0] api[0] [[Sentence=-1,1=word max, 1-5]] did[0] some[0] refactoring[0] added[0] some[0] unit[0] tests[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i168b306853185866606ed76c324a8db6051b15bb/i168b30685318586606ed76c324a8db6051b15bb[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
3448 commit 6c69087ee606246bd9f3b88444c162d3c8defe42 merge: 69752e1 09c5980 merge "refactor a method to extract an emulator port." 	3448 commit 6c69087ee606246bd9f3b8844c162d3c8defe42 merge: 69752e1 09c5980 merge "refactor a method to extract an emulator port.	1	-1	 3448[0] commit[0] 6c69087ee606246bd9f3b88444c162d3c8defe42/6c69087ee606246bd9f3b8844c162d3c8defe42[0] merge[0] 69752e1[0] 09c5980[0] merge[0] refactor[0] a[0] method[0] to[0] extract[0] an[0] emulator[0] port[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
3451 commit 09c59804fae9cdb714c596e409c5a4d38927c6c8 refactor a method to extract an emulator port. change-id: i0dbab2c8f44a2114364075a91f31aa0d8d18d3ba 	3451 commit 09c59804fae9cdb714c596e409c5a4d38927c6c8 refactor a method to extract an emulator port.<br> change-id: i0dbab2c8f44a2114364075a91f31a0d8d18d3ba	1	-1	 3451[0] commit[0] 09c59804fae9cdb714c596e409c5a4d38927c6c8[0] refactor[0] a[0] method[0] to[0] extract[0] an[0] emulator[0] port[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i0dbab2c8f44a2114364075a91f31aa0d8d18d3ba/i0dbab2c8f44a2114364075a91f31a0d8d18d3ba[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
3772 commit 9920695ea25aec4589d28c88f8874c86a6e908af separate monkeyrunner core logic refactored the monkeyrunner code to separate core logic from the jython wrapper. the core logic is now usable directly from java w/o the pollution from jython. the existing monkeyrunner classes are now just a thin and dumb wrapper atop the core. change-id: i6ef18ea92e0e9284c1fde949b4efb0e2e7170e57 	3772 commit 9920695ea25aec4589d28c88f8874c86a6e908af separate monkeyrunner core logic refactored the monkeyrunner code to separate core logic from the jython wrapper.<br> the core logic is now usable directly from java w/o the pollution from jython.<br> the existing monkeyrunner classes are now just a thin and dumb wrapper atop the core.<br> change-id: i6ef18ea92e0e9284c1fde949b4efb0e2e7170e57	1	-2	 3772[0] commit[0] 9920695ea25aec4589d28c88f8874c86a6e908af[0] separate[0] monkeyrunner[0] core[0] logic[0] refactored[0] the[0] monkeyrunner[0] code[0] to[0] separate[0] core[0] logic[0] from[0] the[0] jython[0] wrapper[0] [[Sentence=-1,1=word max, 1-5]] the[0] core[0] logic[0] is[0] now[0] usable[0] directly[0] from[0] java[0] w/o[0] the[0] pollution[-1] from[0] jython[0] [[Sentence=-2,1=word max, 1-5]] the[0] existing[0] monkeyrunner[0] classes[0] are[0] now[0] just[0] a[0] thin[0] and[0] dumb[-1] wrapper[0] atop[0] the[0] core[0] [[Sentence=-2,1=word max, 1-5]] change[0] id[0] i6ef18ea92e0e9284c1fde949b4efb0e2e7170e57[0] [[Sentence=-1,1=word max, 1-5]][[[1,-2 max of sentences]]]
3868 commit f979b9484623279babee7efb57231442e3318d98 merge: 4308104 8864367 merge "extract style refactoring" 	3868 commit f979b9484623279babee7efb57231442e3318d98 merge: 4308104 8864367 merge "extract style refactoring"	1	-1	 3868[0] commit[0] f979b9484623279babee7efb57231442e3318d98[0] merge[0] 4308104[0] 8864367[0] merge[0] extract[0] style[0] refactoring[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
3870 commit 886436743d5f723318b56be9942a76b24ce14bc7 extract style refactoring adds a new refactoring, "extract style", which will show the user the attributes for the current selected elements (or if invoked from an editor context, the attributes overlapping the current caret or editor selection). the user can select which attributes to extract, and these are then added as a new style in the styles.xml file in the project (which is created if necessary). the user can optionally replace the attributes that were extracted, and the user can also optionally set the style attribute on the elements to the new style. (both are on by default.) this is integrated with the refactoring quick assistant as well. change-id: i0504e86a824b00730482607150a879ff28233618 	3870 commit 886436743d5f723318b56be9942a76b24ce14bc7 extract style refactoring adds a new refactoring, "extract style" which will show the user the attributes for the current selected elements (or if invoked from an editor context, the attributes overlapping the current caret or editor selection)<br> the user can select which attributes to extract, and these are then added as a new style in the styles.<br>xml file in the project (which is created if necessary)<br> the user can optionally replace the attributes that were extracted, and the user can also optionally set the style attribute on the elements to the new style.<br> (both are on by default.<br> this is integrated with the refactoring quick assistant as well.<br> change-id: i0504e86a824b00730482607150a879ff28233618	1	-2	 3870[0] commit[0] 886436743d5f723318b56be9942a76b24ce14bc7[0] extract[0] style[0] refactoring[0] adds[0] a[0] new[0] refactoring[0] extract[0] style[0] which[0] will[0] show[0] the[0] user[0] the[0] attributes[0] for[0] the[0] current[0] selected[0] elements[0] or[0] if[0] invoked[0] from[0] an[0] editor[0] context[0] the[0] attributes[0] overlapping[0] the[0] current[0] caret[0] or[0] editor[0] selection[0] [[Sentence=-1,1=word max, 1-5]] the[0] user[0] can[0] select[0] which[0] attributes[0] to[0] extract[0] and[0] these[0] are[0] then[0] added[0] as[0] a[0] new[0] style[0] in[0] the[0] styles[0] [[Sentence=-1,1=word max, 1-5]] xml[0] file[0] in[0] the[0] project[0] which[0] is[0] created[0] if[0] necessary[0] [[Sentence=-1,1=word max, 1-5]] the[0] user[0] can[0] optionally[0] replace[0] the[0] attributes[0] that[0] were[0] extracted[0] and[0] the[0] user[0] can[0] also[0] optionally[0] set[0] the[0] style[0] attribute[0] on[0] the[0] elements[0] to[0] the[0] new[0] style[0] [[Sentence=-1,1=word max, 1-5]] both[0] are[0] on[0] by[0] default[-1] [[Sentence=-2,1=word max, 1-5]] this[0] is[0] integrated[0] with[0] the[0] refactoring[0] quick[0] assistant[0] as[0] well[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i0504e86a824b00730482607150a879ff28233618[0] [[Sentence=-1,1=word max, 1-5]][[[1,-2 max of sentences]]]
3927 commit 842b0eb9e2d530c19b9af3981e2d688411c1e554 add newline inside new root elements, and some move code around tweak the "new xml file" creation code to insert a new line inside the created root element, indent, and place the cursor there. this means that you end up with:  linearlayout     /linearlayout  instead of (where   denotes the initial caret position):   linearlayout   /linearlayout  this means you can instantly press ctrl-space to complete on the elements, etc., and is similar to how eclipse creates new method bodies from templates, adding newlines such that you can instantly write code there instead of having to "open them up". all the diffs for this are in newxmlfilewizard.java; the other modifications in this changeset are simple move refactoring operations as described next: the second change in this changeset is moving some code around such that common utility methods live in more natural places rather than where they were first needed. in particular: hyperlinks.openurl    adtplugin hyperlinks.openjavaclass    adtplugin hyperlinks.openfile    adtplugin androidcontentassist.getandroidxmleditor    androidxmleditor resourcechooser.cancreateresource    resourcehelper resourcechooser.createresource    resourcehelper hyperlinks.parseresource    resourcehelper resourcenamevalidator.isvaluebasedresourcetype    resourcehelper resourcenamevalidator.isfilebasedresourcetype    resourcehelper change-id: if7690df9ce59c709c1d909ffd9f74c2684f3dd46 	3927 commit 842b0eb9e2d530c19b9af3981e2d688411c1e554 add newline inside new root elements, and some move code around tweak the "new xml file" creation code to insert a new line inside the created root element, indent, and place the cursor there.<br> this means that you end up with:  linearlayout     /linearlayout  instead of (where   denotes the initial caret positionposition   linearlayout   /linearlayout  this means you can instantly press ctrl-space to complete on the elements, etc.<br> and is similar to how eclipse creates new method bodies from templates, adding newlines such that you can instantly write code there instead of having to "open them up"<br> all the diffs for this are in newxmlfilewizard.<br>java; the other modifications in this changeset are simple move refactoring operations as described next: the second change in this changeset is moving some code around such that common utility methods live in more natural places rather than where they were first needed.<br> in particular: hyperlinks.<br>openurl    adtplugin hyperlinks.<br>openjavaclass    adtplugin hyperlinks.<br>openfile    adtplugin androidcontentassist.<br>getandroidxmleditor    androidxmleditor resourcechooser.<br>cancreateresource    resourcehelper resourcechooser.<br>createresource    resourcehelper hyperlinks.<br>parseresource    resourcehelper resourcenamevalidator.<br>isvaluebasedresourcetype    resourcehelper resourcenamevalidator.<br>isfilebasedresourcetype    resourcehelper change-id: if7690df9ce59c709c1d909ffd9f74c2684f3dd46	1	-2	 3927[0] commit[0] 842b0eb9e2d530c19b9af3981e2d688411c1e554[0] add[0] newline[0] inside[0] new[0] root[0] elements[0] and[0] some[0] move[0] code[0] around[0] tweak[0] the[0] new[0] xml[0] file[0] creation[0] code[0] to[0] insert[0] a[0] new[0] line[0] inside[0] the[0] created[0] root[0] element[0] indent[0] and[0] place[0] the[0] cursor[0] there[0] [[Sentence=-1,1=word max, 1-5]] this[0] means[0] that[0] you[0] end[0] up[0] with[0] linearlayout[0] /linearlayout[0] instead[0] of[0] where[0] denotes[0] the[0] initial[0] caret[0] position[0][-1 Emoticon] linearlayout[0] /linearlayout[0] this[0] means[0] you[0] can[0] instantly[0] press[0] ctrl[0] space[0] to[0] complete[0] on[0] the[0] elements[0] etc[0] [[Sentence=-2,1=word max, 1-5]] and[0] is[0] similar[0] to[0] how[0] eclipse[0] creates[0] new[0] method[0] bodies[0] from[0] templates[0] adding[0] newlines[0] such[0] that[0] you[0] can[0] instantly[0] write[0] code[0] there[0] instead[0] of[0] having[0] to[0] open[0] them[0] up[0] [[Sentence=-1,1=word max, 1-5]] all[0] the[0] diffs[0] for[0] this[0] are[0] in[0] newxmlfilewizard[0] [[Sentence=-1,1=word max, 1-5]] java[0] the[0] other[0] modifications[0] in[0] this[0] changeset[0] are[0] simple[0] move[0] refactoring[0] operations[0] as[0] described[0] next[0] the[0] second[0] change[0] in[0] this[0] changeset[0] is[0] moving[0] some[0] code[0] around[0] such[0] that[0] common[0] utility[0] methods[0] live[0] in[0] more[0] natural[0] places[0] rather[0] than[0] where[0] they[0] were[0] first[0] needed[0] [[Sentence=-1,1=word max, 1-5]] in[0] particular[0] hyperlinks[0] [[Sentence=-1,1=word max, 1-5]] openurl[0] adtplugin[0] hyperlinks[0] [[Sentence=-1,1=word max, 1-5]] openjavaclass[0] adtplugin[0] hyperlinks[0] [[Sentence=-1,1=word max, 1-5]] openfile[0] adtplugin[0] androidcontentassist[0] [[Sentence=-1,1=word max, 1-5]] getandroidxmleditor[0] androidxmleditor[0] resourcechooser[0] [[Sentence=-1,1=word max, 1-5]] cancreateresource[0] resourcehelper[0] resourcechooser[0] [[Sentence=-1,1=word max, 1-5]] createresource[0] resourcehelper[0] hyperlinks[0] [[Sentence=-1,1=word max, 1-5]] parseresource[0] resourcehelper[0] resourcenamevalidator[0] [[Sentence=-1,1=word max, 1-5]] isvaluebasedresourcetype[0] resourcehelper[0] resourcenamevalidator[0] [[Sentence=-1,1=word max, 1-5]] isfilebasedresourcetype[0] resourcehelper[0] change[0] id[0] if7690df9ce59c709c1d909ffd9f74c2684f3dd46[0] [[Sentence=-1,1=word max, 1-5]][[[1,-2 max of sentences]]]
3931 commit 4563c4e2f168df1d6c97206a4ac6444dfa2264ba add custom views and third party views to the palette this changeset adds a new category to the palette, "custom & third party views", which is populated with android.view.view subclasses found in the current project (or any of its libraries), and in any jars included by the project. they can be dragged directly to the canvas, and control clicking on the palette entries will jump to the source. there are a bunch of adjustments in various places to make working with custom views better - from ensuring that we don't use fully qualified class names in default ids, to showing the java class icon for custom views in outline and elsewhere, to making zero-sized view highlight and expand when selected like we do for laoyuts - since with custom views it's quite easy to end up with an "invisible" view that you can't see after dropping it. there are also some fixes to the code which looks up third party and custom views (which was already used by the wrap in refactoring) - to handle inner classes, to filter out non public or abstract classes, and most importantly to only include views reachable from the current project (since the view search necessarily is workspace wide.) change-id: if1d8c7e5c7dd907a68d8d0962e85c5144e911503 	3931 commit 4563c4e2f168df1d6c97206a4ac644dfa2264ba add custom views and third party views to the palette this changeset adds a new category to the palette, "custom & third party views" which is populated with android.<br>view.<br>view subclasses found in the current project (or any of its libraries) and in any jars included by the project.<br> they can be dragged directly to the canvas, and control clicking on the palette entries will jump to the source.<br> there are a bunch of adjustments in various places to make working with custom views better - from ensuring that we don't use fully qualified class names in default ids, to showing the java class icon for custom views in outline and elsewhere, to making zero-sized view highlight and expand when selected like we do for laoyuts - since with custom views it's quite easy to end up with an "invisible" view that you can't see after dropping it.<br> there are also some fixes to the code which looks up third party and custom views (which was already used by the wrap in refactoring) - to handle inner classes, to filter out non public or abstract classes, and most importantly to only include views reachable from the current project (since the view search necessarily is workspace wide.<br> change-id: if1d8c7e5c7dd907a68d8d0962e85c5144e911503	1	-2	 3931[0] commit[0] 4563c4e2f168df1d6c97206a4ac6444dfa2264ba/4563c4e2f168df1d6c97206a4ac644dfa2264ba[0] add[0] custom[0] views[0] and[0] third[0] party[0] views[0] to[0] the[0] palette[0] this[0] changeset[0] adds[0] a[0] new[0] category[0] to[0] the[0] palette[0] custom[0] &[0] third[0] party[0] views[0] which[0] is[0] populated[0] with[0] android[0] [[Sentence=-1,1=word max, 1-5]] view[0] [[Sentence=-1,1=word max, 1-5]] view[0] subclasses[0] found[0] in[0] the[0] current[0] project[0] or[0] any[0] of[0] its[0] libraries[0] and[0] in[0] any[0] jars[0] included[0] by[0] the[0] project[0] [[Sentence=-1,1=word max, 1-5]] they[0] can[0] be[0] dragged[0] directly[0] to[0] the[0] canvas[0] and[0] control[0] clicking[0] on[0] the[0] palette[0] entries[0] will[0] jump[0] to[0] the[0] source[-1] [[Sentence=-2,1=word max, 1-5]] there[0] are[0] a[0] bunch[0] of[0] adjustments[0] in[0] various[0] places[0] to[0] make[0] working[0] with[0] custom[0] views[0] better[0] from[0] ensuring[0] that[0] we[0] don't[0] use[0] fully[0] qualified[0] class[0] names[0] in[0] default[-1] ids[0] to[0] showing[0] the[0] java[0] class[0] icon[0] for[0] custom[0] views[0] in[0] outline[0] and[0] elsewhere[0] to[0] making[0] zero[0] sized[0] view[0] highlight[0] and[0] expand[0] when[0] selected[0] like[0] we[0] do[0] for[0] laoyuts[0] since[0] with[0] custom[0] views[0] it's[0] quite[0] easy[0] to[0] end[0] up[0] with[0] an[0] invisible[-1] view[0] that[0] you[0] can't[0] see[0] after[0] dropping[0] it[0] [[Sentence=-2,1=word max, 1-5]] there[0] are[0] also[0] some[0] fixes[0] to[0] the[0] code[0] which[0] looks[0] up[0] third[0] party[0] and[0] custom[0] views[0] which[0] was[0] already[0] used[0] by[0] the[0] wrap[0] in[0] refactoring[0] to[0] handle[0] inner[0] classes[0] to[0] filter[0] out[0] non[0] public[0] or[0] abstract[0] classes[0] and[0] most[0] importantly[0] to[0] only[0] include[0] views[0] reachable[0] from[0] the[0] current[0] project[0] since[0] the[0] view[0] search[0] necessarily[0] is[0] workspace[0] wide[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] if1d8c7e5c7dd907a68d8d0962e85c5144e911503[0] [[Sentence=-1,1=word max, 1-5]][[[1,-2 max of sentences]]]
3973 commit 9e6db060854d0e890190919a27a1846f50f69d1a extract as include support for configuration variations first, add support for the "extract as include" refactoring to update all identical code fragments in configuration variations of the same file. for example, if you have a particular subtree of xml elements in a file that you have then duplicated into say a landscape mode, then applying the extract as include refactoring will locate the same code fragment in both files, and replace *both* code fragments with an include (and this is optional with a checkbox in the wizard dialog). this only happens when the extracted code fragment is "identical" in both files. the code fragments can vary in terms of xml formatting and attribute order (and namespace prefix choice), but the element hierarchy order, names, attributes defined and attribute values must be identical. second, make fixes to the change layout and change widget type refactorings such that when the id of the converted element is changed, then references to that id are updated as well. third, ensure that the refactorings are enabled even when there is no text selection; in that case the refactoring will apply to the element containing the caret. some test infrastructure improvements. change-id: idb4ba40f4217dba2b13881b3d06e269c80ba4b97 	3973 commit 9e6db060854d0e890190919a27a1846f50f69d1a extract as include support for configuration variations first, add support for the "extract as include" refactoring to update all identical code fragments in configuration variations of the same file.<br> for example, if you have a particular subtree of xml elements in a file that you have then duplicated into say a landscape mode, then applying the extract as include refactoring will locate the same code fragment in both files, and replace *both* code fragments with an include (and this is optional with a checkbox in the wizard dialog)<br> this only happens when the extracted code fragment is "identical" in both files.<br> the code fragments can vary in terms of xml formatting and attribute order (and namespace prefix choice) but the element hierarchy order, names, attributes defined and attribute values must be identical.<br> second, make fixes to the change layout and change widget type refactorings such that when the id of the converted element is changed, then references to that id are updated as well.<br> third, ensure that the refactorings are enabled even when there is no text selection; in that case the refactoring will apply to the element containing the caret.<br> some test infrastructure improvements.<br> change-id: idb4ba40f4217dba2b13881b3d06e269c80ba4b97	2	-1	 3973[0] commit[0] 9e6db060854d0e890190919a27a1846f50f69d1a[0] extract[0] as[0] include[0] support[0] for[0] configuration[0] variations[0] first[0] add[0] support[0] for[0] the[0] extract[0] as[0] include[0] refactoring[0] to[0] update[0] all[0] identical[0] code[0] fragments[0] in[0] configuration[0] variations[0] of[0] the[0] same[0] file[0] [[Sentence=-1,1=word max, 1-5]] for[0] example[0] if[0] you[0] have[0] a[0] particular[0] subtree[0] of[0] xml[0] elements[0] in[0] a[0] file[0] that[0] you[0] have[0] then[0] duplicated[0] into[0] say[0] a[0] landscape[0] mode[0] then[0] applying[0] the[0] extract[0] as[0] include[0] refactoring[0] will[0] locate[0] the[0] same[0] code[0] fragment[0] in[0] both[0] files[0] and[0] replace[0] both[0] code[0] fragments[0] with[0] an[0] include[0] and[0] this[0] is[0] optional[0] with[0] a[0] checkbox[0] in[0] the[0] wizard[0] dialog[0] [[Sentence=-1,1=word max, 1-5]] this[0] only[0] happens[0] when[0] the[0] extracted[0] code[0] fragment[0] is[0] identical[0] in[0] both[0] files[0] [[Sentence=-1,1=word max, 1-5]] the[0] code[0] fragments[0] can[0] vary[0] in[0] terms[0] of[0] xml[0] formatting[0] and[0] attribute[0] order[0] and[0] namespace[0] prefix[0] choice[0] but[0] the[0] element[0] hierarchy[0] order[0] names[0] attributes[0] defined[0] and[0] attribute[0] values[1] must[0] be[0] identical[0] [[Sentence=-1,2=word max, 1-5]] second[0] make[0] fixes[0] to[0] the[0] change[0] layout[0] and[0] change[0] widget[0] type[0] refactorings[0] such[0] that[0] when[0] the[0] id[0] of[0] the[0] converted[0] element[0] is[0] changed[0] then[0] references[0] to[0] that[0] id[0] are[0] updated[0] as[0] well[0] [[Sentence=-1,1=word max, 1-5]] third[0] ensure[0] that[0] the[0] refactorings[0] are[0] enabled[0] even[0] when[0] there[0] is[0] no[0] text[0] selection[0] in[0] that[0] case[0] the[0] refactoring[0] will[0] apply[0] to[0] the[0] element[0] containing[0] the[0] caret[0] [[Sentence=-1,1=word max, 1-5]] some[0] test[0] infrastructure[0] improvements[1] [[Sentence=-1,2=word max, 1-5]] change[0] id[0] idb4ba40f4217dba2b13881b3d06e269c80ba4b97[0] [[Sentence=-1,1=word max, 1-5]][[[2,-1 max of sentences]]]
3998 commit 57eb998efcd6031d01fc441ed0bd8b09c30b78c0 merge: 3a66185 da02c18 merge "resource management refactoring and clean-up." 	3998 commit 57eb998efcd6031d01fc441ed0bd8b09c30b78c0 merge: 3a66185 da02c18 merge "resource management refactoring and clean-up.	1	-1	 3998[0] commit[0] 57eb998efcd6031d01fc441ed0bd8b09c30b78c0[0] merge[0] 3a66185[0] da02c18[0] merge[0] resource[0] management[0] refactoring[0] and[0] clean[0] up[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
4007 commit da02c18ad5b54d97a1fcfd5f6633062b0c873c22 resource management refactoring and clean-up. - (i)resourcerepository is now a common class instead of an interface. this contains most of the code to control a repository (which was extracted from projectresources) projectresources extends it adding minor features such as library support, and inline id definition. frameworkresources extends it adding support for public resources (which used to be duplicated and dispersed in weird places). changed the way resources are reloaded on resource change event. instead of marking the resources as modified (using resource.touch()), the resources are now parsed as the files are processed during the resource delta visitor. this makes more sense as there are now other listeners to the resource changes (hyperlinks) that access the resource list in their listeners, which wouldn't work previously. this also makes the code cleaner as the previous method had to query the repo for items and return a list of new ones, which was kinda crappy. the new code is much simpler, as is the post update process. - resourceitem is now the base class for resource items. it includes all the small methods that were added by all the child classes or interfaces. project/configurableresourceitem are merged into the based class. iidresourceitem and idresourceitem are gone and replaced by a simpler inlineresourceitem. frameworkresourceitem is a simple override for framework resources. - also improved the api of a bit for the resource repository, making more use of unmodifiable lists and emptylist/map() change-id: ie3ac1995213fed66153c7e7ecbdd170ec257be62 	4007 commit da02c18ad5b54d97a1fcfd5f6633062b0c873c22 resource management refactoring and clean-up.<br> - (i)resourcerepository is now a common class instead of an interface.<br> this contains most of the code to control a repository (which was extracted from projectresources) projectresources extends it adding minor features such as library support, and inline id definition.<br> frameworkresources extends it adding support for public resources (which used to be duplicated and dispersed in weird places)<br> changed the way resources are reloaded on resource change event.<br> instead of marking the resources as modified (using resource.<br>touch( the resources are now parsed as the files are processed during the resource delta visitor.<br> this makes more sense as there are now other listeners to the resource changes (hyperlinks) that access the resource list in their listeners, which wouldn't work previously.<br> this also makes the code cleaner as the previous method had to query the repo for items and return a list of new ones, which was kinda crappy.<br> the new code is much simpler, as is the post update process.<br> - resourceitem is now the base class for resource items.<br> it includes all the small methods that were added by all the child classes or interfaces.<br> project/configurableresourceitem are merged into the based class.<br> idresourceitem and idresourceitem are gone and replaced by a simpler inlineresourceitem.<br> frameworkresourceitem is a simple override for framework resources.<br> - also improved the api of a bit for the resource repository, making more use of unmodifiable lists and emptylist/map( change-id: ie3ac1995213fed66153c7e7ecbdd170ec257be62	2	-3	 4007[0] commit[0] da02c18ad5b54d97a1fcfd5f6633062b0c873c22[0] resource[0] management[0] refactoring[0] and[0] clean[0] up[0] [[Sentence=-1,1=word max, 1-5]] i[0] resourcerepository[0] is[0] now[0] a[0] common[0] class[0] instead[0] of[0] an[0] interface[0] [[Sentence=-1,1=word max, 1-5]] this[0] contains[0] most[0] of[0] the[0] code[0] to[0] control[0] a[0] repository[0] which[0] was[0] extracted[0] from[0] projectresources[0] projectresources[0] extends[0] it[0] adding[0] minor[0] features[0] such[0] as[0] library[0] support[0] and[0] inline[0] id[0] definition[0] [[Sentence=-1,1=word max, 1-5]] frameworkresources[0] extends[0] it[0] adding[0] support[0] for[0] public[0] resources[0] which[0] used[0] to[0] be[0] duplicated[0] and[0] dispersed[0] in[0] weird[-1] places[0] [[Sentence=-2,1=word max, 1-5]] changed[0] the[0] way[0] resources[0] are[0] reloaded[0] on[0] resource[0] change[0] event[0] [[Sentence=-1,1=word max, 1-5]] instead[0] of[0] marking[0] the[0] resources[0] as[0] modified[0] using[0] resource[0] [[Sentence=-1,1=word max, 1-5]] touch[0] the[0] resources[0] are[0] now[0] parsed[0] as[0] the[0] files[0] are[0] processed[0] during[0] the[0] resource[0] delta[0] visitor[0] [[Sentence=-1,1=word max, 1-5]] this[0] makes[0] more[0] sense[0] as[0] there[0] are[0] now[0] other[0] listeners[0] to[0] the[0] resource[0] changes[0] hyperlinks[0] that[0] access[0] the[0] resource[0] list[0] in[0] their[0] listeners[0] which[0] wouldn't[0] work[0] previously[0] [[Sentence=-1,1=word max, 1-5]] this[0] also[0] makes[0] the[0] code[0] cleaner[0] as[0] the[0] previous[0] method[0] had[0] to[0] query[0] the[0] repo[0] for[0] items[0] and[0] return[0] a[0] list[0] of[0] new[0] ones[0] which[0] was[0] kinda[0] crappy[-2] [[Sentence=-3,1=word max, 1-5]] the[0] new[0] code[0] is[0] much[0] simpler[0] as[0] is[0] the[0] post[0] update[0] process[0] [[Sentence=-1,1=word max, 1-5]] resourceitem[0] is[0] now[0] the[0] base[0] class[0] for[0] resource[0] items[0] [[Sentence=-1,1=word max, 1-5]] it[0] includes[0] all[0] the[0] small[0] methods[0] that[0] were[0] added[0] by[0] all[0] the[0] child[0] classes[0] or[0] interfaces[0] [[Sentence=-1,1=word max, 1-5]] project/configurableresourceitem[0] are[0] merged[0] into[0] the[0] based[0] class[0] [[Sentence=-1,1=word max, 1-5]] iidresourceitem/idresourceitem[0] and[0] idresourceitem[0] are[0] gone[0] and[0] replaced[0] by[0] a[0] simpler[0] inlineresourceitem[0] [[Sentence=-1,1=word max, 1-5]] frameworkresourceitem[0] is[0] a[0] simple[0] override[0] for[0] framework[0] resources[0] [[Sentence=-1,1=word max, 1-5]] also[0] improved[1] the[0] api[0] of[0] a[0] bit[0] for[0] the[0] resource[0] repository[0] making[0] more[0] use[0] of[0] unmodifiable[0] lists[0] and[0] emptylist/map[0] change[0] id[0] ie3ac1995213fed66153c7e7ecbdd170ec257be62[0] [[Sentence=-1,2=word max, 1-5]][[[2,-3 max of sentences]]]
4118 commit b8d178edb4c159ce4dbd5fe522d584d34ad2c042 merge: 99f1575 7e6f7f3 merge "refactor workingset function." 	4118 commit b8d178edb4c159ce4dbd5fe522d584d34ad2c042 merge: 99f1575 7e6f7f3 merge "refactor workingset function.	1	-1	 4118[0] commit[0] b8d178edb4c159ce4dbd5fe522d584d34ad2c042[0] merge[0] 99f1575[0] 7e6f7f3[0] merge[0] refactor[0] workingset[0] function[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
4119 commit 7e6f7f3fcd78883086a08f0efb647044b883889b refactor workingset function. - refactor working set helper methods out of the main npw class. they were not used by the main npw class, just by the pages and were adding warnings due to *.internal.* class accesses. - respect the ui creation structure (one method for each top level composite). - fix: proper toggle the working set composite in the test project page based on the main "create test project" toggle. - hack around the fact the "add working set" checkbox wasn't initialized properly in the test project page. change-id: i5be81edcb45898b214b4e983a12e080d508b6c18 	4119 commit 7e6f7f3fcd7883086a08f0efb647044b883889b refactor workingset function.<br> - refactor working set helper methods out of the main npw class.<br> they were not used by the main npw class, just by the pages and were adding warnings due to *<br>internal.<br> class accesses.<br> - respect the ui creation structure (one method for each top level composite)<br> - fix: proper toggle the working set composite in the test project page based on the main "create test project" toggle.<br> - hack around the fact the "add working set" checkbox wasn't initialized properly in the test project page.<br> change-id: i5be81edcb45898b214b4e983a12e080d508b6c18	3	-2	 4119[0] commit[0] 7e6f7f3fcd78883086a08f0efb647044b883889b/7e6f7f3fcd7883086a08f0efb647044b883889b[0] refactor[0] workingset[0] function[0] [[Sentence=-1,1=word max, 1-5]] refactor[0] working[0] set[0] helper[0] methods[0] out[0] of[0] the[0] main[0] npw[0] class[0] [[Sentence=-1,1=word max, 1-5]] they[0] were[0] not[0] used[0] by[0] the[0] main[0] npw[0] class[0] just[0] by[0] the[0] pages[0] and[0] were[0] adding[0] warnings[0] due[0] to[0] [[Sentence=-1,1=word max, 1-5]] internal[0] [[Sentence=-1,1=word max, 1-5]] class[0] accesses[0] [[Sentence=-1,1=word max, 1-5]] respect[2] the[0] ui[0] creation[0] structure[0] one[0] method[0] for[0] each[0] top[0] level[0] composite[0] [[Sentence=-1,3=word max, 1-5]] fix[0] proper[0] toggle[0] the[0] working[0] set[0] composite[0] in[0] the[0] test[0] project[0] page[0] based[0] on[0] the[0] main[0] create[0] test[0] project[0] toggle[0] [[Sentence=-1,1=word max, 1-5]] hack[-1] around[0] the[0] fact[0] the[0] add[0] working[0] set[0] checkbox[0] wasn't[0] initialized[0] properly[0] in[0] the[0] test[0] project[0] page[0] [[Sentence=-2,1=word max, 1-5]] change[0] id[0] i5be81edcb45898b214b4e983a12e080d508b6c18[0] [[Sentence=-1,1=word max, 1-5]][[[3,-2 max of sentences]]]
4257 commit f6cb9d0a6104d2dad4893d012b2f32f91b6d04c7 merge: f25f343 5e39089 merge "refactor aidl handling in its own class." 	4257 commit f6cb9d0a6104d2dad4893d012b2f32f91b6d04c7 merge: f25f343 5e39089 merge "refactor aidl handling in its own class.	1	-1	 4257[0] commit[0] f6cb9d0a6104d2dad4893d012b2f32f91b6d04c7[0] merge[0] f25f343[0] 5e39089[0] merge[0] refactor[0] aidl[0] handling[0] in[0] its[0] own[0] class[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
4260 commit 5e39089070b438ba090ac4dee83aaf71dc69ce90 refactor aidl handling in its own class. it extends a new base class that will serve as a base class for the one handling renderscript files. change-id: ibef0c4b9a792fe52bf7b70bf5d24f76a15cb65c9 	4260 commit 5e39089070b438ba090ac4dee83af71dc69ce90 refactor aidl handling in its own class.<br> it extends a new base class that will serve as a base class for the one handling renderscript files.<br> change-id: ibef0c4b9a792fe52bf7b70bf5d24f76a15cb65c9	1	-1	 4260[0] commit[0] 5e39089070b438ba090ac4dee83aaf71dc69ce90/5e39089070b438ba090ac4dee83af71dc69ce90[0] refactor[0] aidl[0] handling[0] in[0] its[0] own[0] class[0] [[Sentence=-1,1=word max, 1-5]] it[0] extends[0] a[0] new[0] base[0] class[0] that[0] will[0] serve[0] as[0] a[0] base[0] class[0] for[0] the[0] one[0] handling[0] renderscript[0] files[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] ibef0c4b9a792fe52bf7b70bf5d24f76a15cb65c9[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
4552 commit 7b6500145fa0b9117225475c6c4cd2236ef8c4e6 merge: 65ad17f a18a523 merge "add "extract as include" refactoring" 	4552 commit 7b6500145fa0b9117225475c6c4cd2236ef8c4e6 merge: 65ad17f a18a523 merge "add "extract as include" refactoring"	1	-1	 4552[0] commit[0] 7b6500145fa0b9117225475c6c4cd2236ef8c4e6[0] merge[0] 65ad17f[0] a18a523[0] merge[0] add[0] extract[0] as[0] include[0] refactoring[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
4553 commit a18a523fa3e21c78320fadd031716963b3a1c501 add "extract as include" refactoring add an "extract as include" action to the context menu which lets you extract a set of selected views and move them into a separate layout file of their own, and insert an  include  reference to the new view in place. you can select multiple items as well (provided they are adjacent siblings) and in that case the newly extracted layout will use the  merge  tag as the root element. this changeset also adds a name validator for resource names, used both in the new-name entry field for extracted include layouts, as well as in the new xml file wizard. it enforces that the name (except for the .xml suffix) is a valid java identifier name (since otherwise the r file will have compilation errors.) this changeset also extracts various inlined string constants like "xmlns", "android" (as used in namespace prefixes), "@id/" etc and replaces them with constants. change-id: i3eca8b6afd23f22ca9299ff22c614b4ffd3299bf 	4553 commit a18a523fa3e21c78320fadd031716963b3a1c501 add "extract as include" refactoring add an "extract as include" action to the context menu which lets you extract a set of selected views and move them into a separate layout file of their own, and insert an  include  reference to the new view in place.<br> you can select multiple items as well (provided they are adjacent siblings) and in that case the newly extracted layout will use the  merge  tag as the root element.<br> this changeset also adds a name validator for resource names, used both in the new-name entry field for extracted include layouts, as well as in the new xml file wizard.<br> it enforces that the name (except for the .<br>xml suffix) is a valid java identifier name (since otherwise the are file will have compilation errors.<br> this changeset also extracts various inlined string constants like "xmlns" "android" (as used in namespace prefixes) "@id/" etc and replaces them with constants.<br> change-id: i3eca8b6afd23f22ca9299ff22c614b4ffd3299bf	1	-2	 4553[0] commit[0] a18a523fa3e21c78320fadd031716963b3a1c501[0] add[0] extract[0] as[0] include[0] refactoring[0] add[0] an[0] extract[0] as[0] include[0] action[0] to[0] the[0] context[0] menu[0] which[0] lets[0] you[0] extract[0] a[0] set[0] of[0] selected[0] views[0] and[0] move[0] them[0] into[0] a[0] separate[0] layout[0] file[0] of[0] their[0] own[0] and[0] insert[0] an[0] include[0] reference[0] to[0] the[0] new[0] view[0] in[0] place[0] [[Sentence=-1,1=word max, 1-5]] you[0] can[0] select[0] multiple[0] items[0] as[0] well[0] provided[0] they[0] are[0] adjacent[0] siblings[0] and[0] in[0] that[0] case[0] the[0] newly[0] extracted[0] layout[0] will[0] use[0] the[0] merge[0] tag[0] as[0] the[0] root[0] element[0] [[Sentence=-1,1=word max, 1-5]] this[0] changeset[0] also[0] adds[0] a[0] name[0] validator[0] for[0] resource[0] names[0] used[0] both[0] in[0] the[0] new[0] name[0] entry[0] field[0] for[0] extracted[0] include[0] layouts[0] as[0] well[0] as[0] in[0] the[0] new[0] xml[0] file[0] wizard[0] [[Sentence=-1,1=word max, 1-5]] it[0] enforces[-1] that[0] the[0] name[0] except[0] for[0] the[0] [[Sentence=-2,1=word max, 1-5]] xml[0] suffix[0] is[0] a[0] valid[0] java[0] identifier[0] name[0] since[0] otherwise[0] the[0] r[0] file[0] will[0] have[0] compilation[0] errors[0] [[Sentence=-1,1=word max, 1-5]] this[0] changeset[0] also[0] extracts[0] various[0] inlined[0] string[0] constants[0] like[0] xmlns[0] android[0] as[0] used[0] in[0] namespace[0] prefixes[0] "@id/[0] etc[0] and[0] replaces[0] them[0] with[0] constants[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i3eca8b6afd23f22ca9299ff22c614b4ffd3299bf[0] [[Sentence=-1,1=word max, 1-5]][[[1,-2 max of sentences]]]
4633 commit 18284d7b4da35a990268f51cdab0abc3a8e6e061 merge: 77e0fde 95b17a5 merge "layoutlib api refactoring" 	4633 commit 18284d7b4da35a990268f51cdab0abc3a8e6e061 merge: 77e0fde 95b17a5 merge "layoutlib api refactoring"	1	-1	 4633[0] commit[0] 18284d7b4da35a990268f51cdab0abc3a8e6e061[0] merge[0] 77e0fde[0] 95b17a5[0] merge[0] layoutlib[0] api[0] refactoring[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
4634 commit 95b17a5e62eeeb7b38ef668508df43a1ee9e0880 layoutlib api refactoring change-id: i40abba4c4f786755c2a1c0e70df4d7bc08e2bcde 	4634 commit 95b17a5e62eeb7b38ef668508df43a1ee9e0880 layoutlib api refactoring change-id: i40abba4c4f786755c2a1c0e70df4d7bc08e2bcde	1	-1	 4634[0] commit[0] 95b17a5e62eeeb7b38ef668508df43a1ee9e0880/95b17a5e62eeb7b38ef668508df43a1ee9e0880[0] layoutlib[0] api[0] refactoring[0] change[0] id[0] i40abba4c4f786755c2a1c0e70df4d7bc08e2bcde[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
4846 commit 19d5babcf9b671385ddaddce05193728a5dfac6a merge: bbdf655 b281c42 merge "adt string refactoring: replace in all files." 	4846 commit 19d5babcf9b671385ddaddce05193728a5dfac6a merge: bbdf655 b281c42 merge "adt string refactoring: replace in all files.	1	-1	 4846[0] commit[0] 19d5babcf9b671385ddaddce05193728a5dfac6a[0] merge[0] bbdf655[0] b281c42[0] merge[0] adt[0] string[0] refactoring[0] replace[0] in[0] all[0] files[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
4847 commit b281c42014e66e6b9ecef5b1911e51ded8d172cb adt string refactoring: replace in all files. when doing an extract string either from java or xml: - can scan/replace in all other java files. - can scan/replace in all other xml files. - in java, also replace in assignements. - in xml, also replace existing string name if already defined. change-id: ifeef5fd444c2c18b9c071955b8e8567d6515ea95 	4847 commit b281c42014e66e6b9ecef5b1911e51ded8d172cb adt string refactoring: replace in all files.<br> when doing an extract string either from java or xml: - can scan/replace in all other java files.<br> - can scan/replace in all other xml files.<br> - in java, also replace in assignements.<br> - in xml, also replace existing string name if already defined.<br> change-id: ifeef5fd44c2c18b9c071955b8e8567d6515ea95	1	-1	 4847[0] commit[0] b281c42014e66e6b9ecef5b1911e51ded8d172cb[0] adt[0] string[0] refactoring[0] replace[0] in[0] all[0] files[0] [[Sentence=-1,1=word max, 1-5]] when[0] doing[0] an[0] extract[0] string[0] either[0] from[0] java[0] or[0] xml[0] can[0] scan/replace[0] in[0] all[0] other[0] java[0] files[0] [[Sentence=-1,1=word max, 1-5]] can[0] scan/replace[0] in[0] all[0] other[0] xml[0] files[0] [[Sentence=-1,1=word max, 1-5]] in[0] java[0] also[0] replace[0] in[0] assignements[0] [[Sentence=-1,1=word max, 1-5]] in[0] xml[0] also[0] replace[0] existing[0] string[0] name[0] if[0] already[0] defined[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] ifeef5fd444c2c18b9c071955b8e8567d6515ea95/ifeef5fd44c2c18b9c071955b8e8567d6515ea95[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
4860 commit 84fe98990992bfd57d327c05839dff6f8ec585cc merge: bda579c c8332dd merge "adt: rework extract string refactoring." 	4860 commit 84fe98990992bfd57d327c05839dff6f8ec585c merge: bda579c c8332dd merge "adt: rework extract string refactoring.	1	-1	 4860[0] commit[0] 84fe98990992bfd57d327c05839dff6f8ec585cc/84fe98990992bfd57d327c05839dff6f8ec585c[0] merge[0] bda579c[0] c8332dd[0] merge[0] adt[0] rework[0] extract[0] string[0] refactoring[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
4864 commit c8332ddc0c817f2f1554118ddd4a71d38d624d7a adt: rework extract string refactoring. this updates the code that inserts new  string  elements in a  resources  xml, replacing my micro-xml stream-oriented parser by one based on the wst sse region model. also added a mini doc to explain the wst region model, since there's no doc anywhere as far as i can see. i choose to place this ad-hoc doc where i need it rather than in a generic place -- it's not a generic doc, more a reminder of the api. change-id: icd39390c4124ce0ec21322ff223390ac4a06f431 	4864 commit c8332ddc0c817f2f1554118dd4a71d38d624d7a adt: rework extract string refactoring.<br> this updates the code that inserts new  string  elements in a  resources  xml, replacing my micro-xml stream-oriented parser by one based on the wst sse region model.<br> also added a mini doc to explain the wst region model, since there's no doc anywhere as far as i can see.<br> i choose to place this ad-hoc doc where i need it rather than in a generic place - it's not a generic doc, more a reminder of the api.<br> change-id: icd39390c4124ce0ec21322ff223390ac4a06f431	1	-1	 4864[0] commit[0] c8332ddc0c817f2f1554118ddd4a71d38d624d7a/c8332ddc0c817f2f1554118dd4a71d38d624d7a[0] adt[0] rework[0] extract[0] string[0] refactoring[0] [[Sentence=-1,1=word max, 1-5]] this[0] updates[0] the[0] code[0] that[0] inserts[0] new[0] string[0] elements[0] in[0] a[0] resources[0] xml[0] replacing[0] my[0] micro[0] xml[0] stream[0] oriented[0] parser[0] by[0] one[0] based[0] on[0] the[0] wst[0] sse[0] region[0] model[0] [[Sentence=-1,1=word max, 1-5]] also[0] added[0] a[0] mini[0] doc[0] to[0] explain[0] the[0] wst[0] region[0] model[0] since[0] there's[0] no[0] doc[0] anywhere[0] as[0] far[0] as[0] i[0] can[0] see[0] [[Sentence=-1,1=word max, 1-5]] i[0] choose[0] to[0] place[0] this[0] ad[0] hoc[0] doc[0] where[0] i[0] need[0] it[0] rather[0] than[0] in[0] a[0] generic[0] place[0] it's[0] not[0] a[0] generic[0] doc[0] more[0] a[0] reminder[0] of[0] the[0] api[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] icd39390c4124ce0ec21322ff223390ac4a06f431[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
5036 commit 6228a860f39b6980de2da62967c24580f8fb3046 merge: 4db3692 5cdaad5 merge "refactor to make model rendering reusable" 	5036 commit 6228a860f39b6980de2da62967c24580f8fb3046 merge: 4db3692 5cdad5 merge "refactor to make model rendering reusable"	1	-1	 5036[0] commit[0] 6228a860f39b6980de2da62967c24580f8fb3046[0] merge[0] 4db3692[0] 5cdaad5/5cdad5[0] merge[0] refactor[0] to[0] make[0] model[0] rendering[0] reusable[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
5037 commit 5cdaad56ce59f9efc92cd8c3c1faf6c58b686a0f refactor to make model rendering reusable this changeset refactors the code in graphicaleditorpart a bit to make the part which renders a model into an image reusable. this will be used by an upcoming changeset to provide previews of palette items as you drag them. the refactoring is straightforward, even though the diffs unfortunately don't show it. i basically split up the large recomputelayout() method into smaller separate chunks (validating the current file, validating the model and validating the sdk and looking up the bridge) and added a new render method which can take just a model (separate from the editor's own model) and render it. change-id: i96603c4beb2d56d36416cd2b6448c87dd306217c 	5037 commit 5cdad56ce59f9efc92cd8c3c1faf6c58b686a0f refactor to make model rendering reusable this changeset refactors the code in graphicaleditorpart a bit to make the part which renders a model into an image reusable.<br> this will be used by an upcoming changeset to provide previews of palette items as you drag them.<br> the refactoring is straightforward, even though the diffs unfortunately don't show it.<br> i basically split up the large recomputelayout( method into smaller separate chunks (validating the current file, validating the model and validating the sdk and looking up the bridge) and added a new render method which can take just a model (separate from the editor's own model) and render it.<br> change-id: i96603c4beb2d56d36416cd2b6448c87dd306217c	1	-2	 5037[0] commit[0] 5cdaad56ce59f9efc92cd8c3c1faf6c58b686a0f/5cdad56ce59f9efc92cd8c3c1faf6c58b686a0f[0] refactor[0] to[0] make[0] model[0] rendering[0] reusable[0] this[0] changeset[0] refactors[0] the[0] code[0] in[0] graphicaleditorpart[0] a[0] bit[0] to[0] make[0] the[0] part[0] which[0] renders[0] a[0] model[0] into[0] an[0] image[0] reusable[0] [[Sentence=-1,1=word max, 1-5]] this[0] will[0] be[0] used[0] by[0] an[0] upcoming[0] changeset[0] to[0] provide[0] previews[0] of[0] palette[0] items[0] as[0] you[0] drag[0] them[0] [[Sentence=-1,1=word max, 1-5]] the[0] refactoring[0] is[0] straightforward[0] even[0] though[0] the[0] diffs[0] unfortunately[-1] don't[0] show[0] it[0] [[Sentence=-2,1=word max, 1-5]] i[0] basically[0] split[0] up[0] the[0] large[0] recomputelayout[0] method[0] into[0] smaller[0] separate[0] chunks[0] validating[0] the[0] current[0] file[0] validating[0] the[0] model[0] and[0] validating[0] the[0] sdk[0] and[0] looking[0] up[0] the[0] bridge[0] and[0] added[0] a[0] new[0] render[0] method[0] which[0] can[0] take[0] just[0] a[0] model[0] separate[0] from[0] the[0] editor's[0] own[0] model[0] and[0] render[0] it[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i96603c4beb2d56d36416cd2b6448c87dd306217c[0] [[Sentence=-1,1=word max, 1-5]][[[1,-2 max of sentences]]]
5494 commit 315d4e3193144c3dd917b9a73bfcc91dfe931f02 gle2: fix comments, refactor context menu code. simple refactor of the main method populating the dynamic context menu. it was started to grow a bit too much. also added some comments to explain what's going on. change-id: id58779da5082bb454c1bcae914582e4471364a12 	5494 commit 315d4e3193144c3dd917b9a73bfcc91dfe931f02 gle2: fix comments, refactor context menu code.<br> simple refactor of the main method populating the dynamic context menu.<br> it was started to grow a bit too much.<br> also added some comments to explain what's going on.<br> change-id: id58779da5082bb454c1bcae914582e4471364a12	1	-1	 5494[0] commit[0] 315d4e3193144c3dd917b9a73bfcc91dfe931f02[0] gle2[0] fix[0] comments[0] refactor[0] context[0] menu[0] code[0] [[Sentence=-1,1=word max, 1-5]] simple[0] refactor[0] of[0] the[0] main[0] method[0] populating[0] the[0] dynamic[0] context[0] menu[0] [[Sentence=-1,1=word max, 1-5]] it[0] was[0] started[0] to[0] grow[0] a[0] bit[0] too[0] much[0] [[Sentence=-1,1=word max, 1-5]] also[0] added[0] some[0] comments[0] to[0] explain[0] what's[0] going[0] on[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] id58779da5082bb454c1bcae914582e4471364a12[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
5499 commit 3d3c3c3a3e4e05f7ae7a0dff440fe500f90b785c adt: make release and debug builds really different. release export should not be debug builds that are stripped of their signature and (optionnaly) resigned. instead they should actually build the apk in "release" mode. refactor postcompilerhelper to be easier to use for export feature (moved all error handling into the actual incrementalbuilder since we don't want the helper to put error/warning marker during release export). update the api of apkbuilder and postcompilerhelper to deal better with signing key: - option to package with a "sign with debug" flag. - new option to package/sign with given keys. debug build (through incremental builder) use the new aapt option --debug-mode that automatically insert debuggable true in the manifest. this allows for the same source code to generate debug and release builds. currently, only the "export unsigned release apk" action use the new "release" build. need to update the export wizard. also need to add support for this in ant. new folder in sdk.git/testapps for test projects to be used in upcoming automated build tests. simple "basicproject" to start with. change-id: i3041312bc817153603656de2aa355f8fcaf00b5b 	5499 commit 3d3c3c3a3e4e05f7ae7a0dff440fe500f90b785c adt: make release and debug builds really different.<br> release export should not be debug builds that are stripped of their signature and (optionnaly) resigned.<br> instead they should actually build the apk in "release" mode.<br> refactor postcompilerhelper to be easier to use for export feature (moved all error handling into the actual incrementalbuilder since we don't want the helper to put error/warning marker during release export)<br> update the api of apkbuilder and postcompilerhelper to deal better with signing key: - option to package with a "sign with debug" flag.<br> - new option to package/sign with given keys.<br> debug build (through incremental builder) use the new apt option -debug-mode that automatically insert debuggable true in the manifest.<br> this allows for the same source code to generate debug and release builds.<br> currently, only the "export unsigned release apk" action use the new "release" build.<br> need to update the export wizard.<br> also need to add support for this in ant.<br> new folder in sdk.<br>git/testapps for test projects to be used in upcoming automated build tests.<br> simple "basicproject" to start with.<br> change-id: i3041312bc817153603656de2a355f8fcaf00b5b	2	-2	 5499[0] commit[0] 3d3c3c3a3e4e05f7ae7a0dff440fe500f90b785c[0] adt[0] make[0] release[0] and[0] debug[0] builds[0] really[0] different[0] [[Sentence=-1,1=word max, 1-5]] release[0] export[0] should[0] not[0] be[0] debug[0] builds[0] that[0] are[0] stripped[0] of[0] their[0] signature[0] and[0] optionnaly[0] resigned[-1] [[Sentence=-2,1=word max, 1-5]] instead[0] they[0] should[0] actually[0] build[0] the[0] apk[0] in[0] release[0] mode[0] [[Sentence=-1,1=word max, 1-5]] refactor[0] postcompilerhelper[0] to[0] be[0] easier[0] to[0] use[0] for[0] export[0] feature[0] moved[0] all[0] error[0] handling[0] into[0] the[0] actual[0] incrementalbuilder[0] since[0] we[0] don't[0] want[0] the[0] helper[0] to[0] put[0] error/warning[0] marker[0] during[0] release[0] export[0] [[Sentence=-1,1=word max, 1-5]] update[0] the[0] api[0] of[0] apkbuilder[0] and[0] postcompilerhelper[0] to[0] deal[0] better[0] with[0] signing[0] key[0] option[0] to[0] package[0] with[0] a[0] sign[0] with[0] debug[0] flag[0] [[Sentence=-1,1=word max, 1-5]] new[0] option[0] to[0] package/sign[0] with[0] given[0] keys[0] [[Sentence=-1,1=word max, 1-5]] debug[0] build[0] through[0] incremental[0] builder[0] use[0] the[0] new[0] aapt/apt[0] option[0] debug[0] mode[0] that[0] automatically[0] insert[0] debuggable[0] true[1] in[0] the[0] manifest[0] [[Sentence=-1,2=word max, 1-5]] this[0] allows[0] for[0] the[0] same[0] source[-1] code[0] to[0] generate[0] debug[0] and[0] release[0] builds[0] [[Sentence=-2,1=word max, 1-5]] currently[0] only[0] the[0] export[0] unsigned[0] release[0] apk[0] action[0] use[0] the[0] new[0] release[0] build[0] [[Sentence=-1,1=word max, 1-5]] need[0] to[0] update[0] the[0] export[0] wizard[0] [[Sentence=-1,1=word max, 1-5]] also[0] need[0] to[0] add[0] support[0] for[0] this[0] in[0] ant[0] [[Sentence=-1,1=word max, 1-5]] new[0] folder[0] in[0] sdk[0] [[Sentence=-1,1=word max, 1-5]] git/testapps[0] for[0] test[0] projects[0] to[0] be[0] used[0] in[0] upcoming[0] automated[0] build[0] tests[0] [[Sentence=-1,1=word max, 1-5]] simple[0] basicproject[0] to[0] start[0] with[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] i3041312bc817153603656de2aa355f8fcaf00b5b/i3041312bc817153603656de2a355f8fcaf00b5b[0] [[Sentence=-1,1=word max, 1-5]][[[2,-2 max of sentences]]]
5825 commit b9a220dbb0fc481e5744417ca599176961f207b4 merge: e1da4a2 452ff02 merge "refactoring of apkbuilder to prepare for its integration into sdklib." 	5825 commit b9a220dbb0fc481e574417ca599176961f207b4 merge: e1da4a2 452ff02 merge "refactoring of apkbuilder to prepare for its integration into sdklib.	1	-1	 5825[0] commit[0] b9a220dbb0fc481e5744417ca599176961f207b4/b9a220dbb0fc481e574417ca599176961f207b4[0] merge[0] e1da4a2[0] 452ff02[0] merge[0] refactoring[0] of[0] apkbuilder[0] to[0] prepare[0] for[0] its[0] integration[0] into[0] sdklib[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
5826 commit 452ff02ae286668819d1f4ca94f1ed15d2553807 refactoring of apkbuilder to prepare for its integration into sdklib. change-id: if75b9262126813769537435546be0ad4e4648ac2 	5826 commit 452ff02ae28668819d1f4ca94f1ed15d2553807 refactoring of apkbuilder to prepare for its integration into sdklib.<br> change-id: if75b9262126813769537435546be0ad4e4648ac2	1	-1	 5826[0] commit[0] 452ff02ae286668819d1f4ca94f1ed15d2553807/452ff02ae28668819d1f4ca94f1ed15d2553807[0] refactoring[0] of[0] apkbuilder[0] to[0] prepare[0] for[0] its[0] integration[0] into[0] sdklib[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] if75b9262126813769537435546be0ad4e4648ac2[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
5841 commit 006471e6d11a7893b3bfc030e6369fb91c3eeef3 merge: f264a2f 59243b8 merge "refactor most of the apkbuilder into a separate helper class." 	5841 commit 006471e6d11a7893b3bfc030e6369fb91c3eef3 merge: f264a2f 59243b8 merge "refactor most of the apkbuilder into a separate helper class.	1	-1	 5841[0] commit[0] 006471e6d11a7893b3bfc030e6369fb91c3eeef3/006471e6d11a7893b3bfc030e6369fb91c3eef3[0] merge[0] f264a2f[0] 59243b8[0] merge[0] refactor[0] most[0] of[0] the[0] apkbuilder[0] into[0] a[0] separate[0] helper[0] class[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
5845 commit 59243b8de886379e7154c886adbefc74dac24055 refactor most of the apkbuilder into a separate helper class. the eclipse incremental builder will call the helper, as will the multi-apk export code (that is not an eclipse builder). change-id: ibac9aff4557232a3fa0033336c5d4d4327ae3883 	5845 commit 59243b8de886379e7154c886adbefc74dac24055 refactor most of the apkbuilder into a separate helper class.<br> the eclipse incremental builder will call the helper, as will the multi-apk export code (that is not an eclipse builder)<br> change-id: ibac9aff4557232a3fa00336c5d4d4327ae3883	2	-1	 5845[0] commit[0] 59243b8de886379e7154c886adbefc74dac24055[0] refactor[0] most[0] of[0] the[0] apkbuilder[0] into[0] a[0] separate[0] helper[0] class[0] [[Sentence=-1,1=word max, 1-5]] the[0] eclipse[0] incremental[0] builder[0] will[0] call[0] the[0] helper[0] as[0] will[0] the[0] multi[0] apk[0] export[0] code[0] that[0] is[0] not[0] an[0] eclipse[0] builder[0] [[Sentence=-1,1=word max, 1-5]] change[0] id[0] ibac9aff4557232a3fa0033336c5d4d4327ae3883/ibac9aff4557232a3fa00336c5d4d4327ae3883[0][+0.6 MultipleLetters] [[Sentence=-1,2=word max, 1-5]][[[2,-1 max of sentences]]]
5897 commit ac8b6fa3ca5dd744a49a312c07835328f0805eab refactored most of the multi-apk export out of the ant task into sdklib. this common code will be used by adt when processing multi-apk export. i also had to improve the api for iabstractfile/folder. change-id: ied76f0a9f068223ceaba36124e841f804febfaf8 	5897 commit ac8b6fa3ca5dd744a49a312c07835328f0805eab refactored most of the multi-apk export out of the ant task into sdklib.<br> this common code will be used by adt when processing multi-apk export.<br> i also had to improve the api for iabstractfile/folder.<br> change-id: ied76f0a9f068223ceaba36124e841f804febfaf8	2	-1	 5897[0] commit[0] ac8b6fa3ca5dd744a49a312c07835328f0805eab[0] refactored[0] most[0] of[0] the[0] multi[0] apk[0] export[0] out[0] of[0] the[0] ant[0] task[0] into[0] sdklib[0] [[Sentence=-1,1=word max, 1-5]] this[0] common[0] code[0] will[0] be[0] used[0] by[0] adt[0] when[0] processing[0] multi[0] apk[0] export[0] [[Sentence=-1,1=word max, 1-5]] i[0] also[0] had[0] to[0] improve[1] the[0] api[0] for[0] iabstractfile/folder[0] [[Sentence=-1,2=word max, 1-5]] change[0] id[0] ied76f0a9f068223ceaba36124e841f804febfaf8[0] [[Sentence=-1,1=word max, 1-5]][[[2,-1 max of sentences]]]
7566 commit 8aded2db86d1232d9d50b4ab59cbd9fdfc7381a1 merge: 6c18e49 c556783 am 4db669b9: am 603899e5: merge change i95a34d28 into eclair merge commit '4db669b91e576c9eaeb8e44af594953f85de3788' * commit '4db669b91e576c9eaeb8e44af594953f85de3788': adt xml string refactoring: fix refusing to edit @ id/blah. 	7566 commit 8aded2db86d1232d9d50b4ab59cbd9fdfc7381a1 merge: 6c18e49 c556783 am 4db669b9: am 603899e5: merge change i95a34d28 into eclair merge commit '4db669b91e576c9eaeb8e44af594953f85de3788' * commit '4db669b91e576c9eaeb8e44af594953f85de3788': adt xml string refactoring: fix refusing to edit @ id/blah.	1	-1	 7566[0] commit[0] 8aded2db86d1232d9d50b4ab59cbd9fdfc7381a1[0] merge[0] 6c18e49[0] c556783[0] am[0] 4db669b9[0] am[0] 603899e5[0] merge[0] change[0] i95a34d28[0] into[0] eclair[0] merge[0] commit[0] '4db669b91e576c9eaeb8e44af594953f85de3788'[0] commit[0] '4db669b91e576c9eaeb8e44af594953f85de3788'[0] adt[0] xml[0] string[0] refactoring[0] fix[0] refusing[0] to[0] edit[0] @[0] id/blah[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
7592 commit c5567831aed276ab7bfa3e235da4ad32abf43680 merge: dad7d04 409b143 am 603899e5: merge change i95a34d28 into eclair merge commit '603899e5a9c50bcfd2149c7932050fda0524ec6b' into eclair-plus-aosp * commit '603899e5a9c50bcfd2149c7932050fda0524ec6b': adt xml string refactoring: fix refusing to edit @ id/blah. 	7592 commit c5567831aed276ab7bfa3e235da4ad32abf43680 merge: dad7d04 409b143 am 603899e5: merge change i95a34d28 into eclair merge commit '603899e5a9c50bcfd2149c7932050fda0524ec6b' into eclair-plus-aosp * commit '603899e5a9c50bcfd2149c7932050fda0524ec6b': adt xml string refactoring: fix refusing to edit @ id/blah.	1	-1	 7592[0] commit[0] c5567831aed276ab7bfa3e235da4ad32abf43680[0] merge[0] dad7d04[0] 409b143[0] am[0] 603899e5[0] merge[0] change[0] i95a34d28[0] into[0] eclair[0] merge[0] commit[0] '603899e5a9c50bcfd2149c7932050fda0524ec6b'[0] into[0] eclair[0] plus[0] aosp[0] commit[0] '603899e5a9c50bcfd2149c7932050fda0524ec6b'[0] adt[0] xml[0] string[0] refactoring[0] fix[0] refusing[0] to[0] edit[0] @[0] id/blah[0] [[Sentence=-1,1=word max, 1-5]][[[1,-1 max of sentences]]]
7596 commit 409b1434a8d7c190985631bde824794b3eba20b8 merge: 3c20000 245991f merge change i95a34d28 into eclair * changes: adt xml string refactoring: fix refusing to edit @ id/blah. 	7596 commit 409b1434a8d7c190985631bde824794b3eba20b8 merge: 3c200 245991f merge change i95a34d28 into eclair * changes: adt xml string refactoring: fix refusing to edit @ id/blah.	2	-1	 7596[0] commit[0] 409b1434a8d7c190985631bde824794b3eba20b8[0] merge[0] 3c20000/3c200[0][+0.6 MultipleLetters] 245991f[0] merge[0] change[0] i95a34d28[0] into[0] eclair[0] changes[0] adt[0] xml[0] string[0] refactoring[0] fix[0] refusing[0] to[0] edit[0] @[0] id/blah[0] [[Sentence=-1,2=word max, 1-5]][[[2,-1 max of sentences]]]
7603 commit 245991f7b16b8733bf14adf1f2dd13c50cab8a93 adt xml string refactoring: fix refusing to edit @ id/blah. it correctly only refuses to edit @string/blah now. this cl also does a bit of refactoring; i extracted some methods and a class to make it a bit easier to read. bug 2066460 change-id: i95a34d28d6390ab0cc075f05ea83ceec04993ae9 	7603 commit 245991f7b16b8733bf14adf1f2dd13c50cab8a93 adt xml string refactoring: fix refusing to edit @ id/blah.<br> it correctly only refuses to edit @string/blah now.<br> this cl also does a bit of refactoring; i extracted some methods and a class to make it a bit easier to read.<br> bug 2066460 change-id: i95a34d28d6390ab0cc075f05ea83ceec04993ae9	1	-2	 7603[0] commit[0] 245991f7b16b8733bf14adf1f2dd13c50cab8a93[0] adt[0] xml[0] string[0] refactoring[0] fix[0] refusing[0] to[0] edit[0] @[0] id/blah[0] [[Sentence=-1,1=word max, 1-5]] it[0] correctly[0] only[0] refuses[-1] to[0] edit[0] @string/blah[0] now[0] [[Sentence=-2,1=word max, 1-5]] this[0] cl[0] also[0] does[0] a[0] bit[0] of[0] refactoring[0] i[0] extracted[0] some[0] methods[0] and[0] a[0] class[0] to[0] make[0] it[0] a[0] bit[0] easier[0] to[0] read[0] [[Sentence=-1,1=word max, 1-5]] bug[0] 2066460[0] change[0] id[0] i95a34d28d6390ab0cc075f05ea83ceec04993ae9[0] [[Sentence=-1,1=word max, 1-5]][[[1,-2 max of sentences]]]
9069 commit 9d29cd313cefe5a71042ec9be7117efea882c386 sdk updater: fetch source xml, display them in tree. there's a notion of an asynchronous task with a progress bar & status ui. that's still just experimental. will need some refactoring, etc. 	9069 commit 9d29cd313cefe5a71042ec9be7117efea882c386 sdk updater: fetch source xml, display them in tree.<br> there's a notion of an asynchronous task with a progress bar & status ui.<br> that's still just experimental.<br> will need some refactoring, etc.	1	-2	 9069[0] commit[0] 9d29cd313cefe5a71042ec9be7117efea882c386[0] sdk[0] updater[0] fetch[0] source[-1] xml[0] display[0] them[0] in[0] tree[0] [[Sentence=-2,1=word max, 1-5]] there's[0] a[0] notion[0] of[0] an[0] asynchronous[0] task[0] with[0] a[0] progress[0] bar[0] &[0] status[0] ui[0] [[Sentence=-1,1=word max, 1-5]] that's[0] still[0] just[0] experimental[0] [[Sentence=-1,1=word max, 1-5]] will[0] need[0] some[0] refactoring[0] etc[0] [[Sentence=-1,1=word max, 1-5]][[[1,-2 max of sentences]]]
